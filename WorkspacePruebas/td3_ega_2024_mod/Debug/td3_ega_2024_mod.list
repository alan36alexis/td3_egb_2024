
td3_ega_2024_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cccc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800cde0  0800cde0  0001cde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2d8  0800d2d8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d2d8  0800d2d8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d2d8  0800d2d8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d8  0800d2d8  0001d2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2dc  0800d2dc  0001d2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d2e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000090  0800d36c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800d36c  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6fc  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d05  00000000  00000000  0003b7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  00040af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c345  00000000  00000000  00041f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b28  00000000  00000000  0005e2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ab3  00000000  00000000  00077e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f8b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c30  00000000  00000000  0010f90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cdc4 	.word	0x0800cdc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800cdc4 	.word	0x0800cdc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e016      	b.n	8000ab4 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d20b      	bcs.n	8000aae <GetPage+0x36>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a9c:	029b      	lsls	r3, r3, #10
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d304      	bcc.n	8000aae <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000aaa:	029b      	lsls	r3, r3, #10
 8000aac:	e006      	b.n	8000abc <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab8:	dde5      	ble.n	8000a86 <GetPage+0xe>
	  }
  }

  return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000ada:	f003 faa5 	bl	8004028 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ffca 	bl	8000a78 <GetPage>
 8000ae4:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000af2:	69f8      	ldr	r0, [r7, #28]
 8000af4:	f7ff ffc0 	bl	8000a78 <GetPage>
 8000af8:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	0a9b      	lsrs	r3, r3, #10
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b12:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b1c:	f003 fb76 	bl	800420c <HAL_FLASHEx_Erase>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d01d      	beq.n	8000b62 <Flash_Write_Data+0x9a>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000b26:	f003 fab5 	bl	8004094 <HAL_FLASH_GetError>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	e020      	b.n	8000b70 <Flash_Write_Data+0xa8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	2002      	movs	r0, #2
 8000b42:	f003 fa01 	bl	8003f48 <HAL_FLASH_Program>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <Flash_Write_Data+0x92>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
 8000b58:	e003      	b.n	8000b62 <Flash_Write_Data+0x9a>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000b5a:	f003 fa9b 	bl	8004094 <HAL_FLASH_GetError>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e006      	b.n	8000b70 <Flash_Write_Data+0xa8>
	   while (sofar<numberofwords)
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbe1      	blt.n	8000b2e <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000b6a:	f003 fa83 	bl	8004074 <HAL_FLASH_Lock>

	   return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000ac 	.word	0x200000ac

08000b7c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	1e5a      	subs	r2, r3, #1
 8000ba2:	80fa      	strh	r2, [r7, #6]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d000      	beq.n	8000baa <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000ba8:	e7ef      	b.n	8000b8a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000baa:	bf00      	nop
	}
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <HAL_I2C_ListenCpltCallback>:
#ifdef EGB
#include "i2c_slave_bluepill.h"

static uint8_t rxBuffer[rxBUFFER_SIZE], txBuffer[txBUFFER_SIZE];

void i2c_listen_callback(i2c_handler *hi2c) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	i2c_start_listen(hi2c);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f004 f8ea 	bl	8004d98 <HAL_I2C_EnableListen_IT>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_I2C_AddrCallback>:

void i2c_addr_callback(i2c_handler *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	803b      	strh	r3, [r7, #0]
	if(I2C_DIRECTION_TRANSMIT == TransferDirection)
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d106      	bne.n	8000bf0 <HAL_I2C_AddrCallback+0x24>
		i2c_seq_rx(hi2c, rxBuffer, rxBUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);
 8000be2:	2308      	movs	r3, #8
 8000be4:	2215      	movs	r2, #21
 8000be6:	4907      	ldr	r1, [pc, #28]	; (8000c04 <HAL_I2C_AddrCallback+0x38>)
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f004 f863 	bl	8004cb4 <HAL_I2C_Slave_Seq_Receive_IT>
	else {
		i2c_seq_tx(hi2c, txBuffer, txBUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);
	}
}
 8000bee:	e005      	b.n	8000bfc <HAL_I2C_AddrCallback+0x30>
		i2c_seq_tx(hi2c, txBuffer, txBUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	2215      	movs	r2, #21
 8000bf4:	4904      	ldr	r1, [pc, #16]	; (8000c08 <HAL_I2C_AddrCallback+0x3c>)
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f003 ffea 	bl	8004bd0 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200000bc 	.word	0x200000bc
 8000c08:	200000d4 	.word	0x200000d4

08000c0c <HAL_I2C_SlaveRxCpltCallback>:

void i2c_rx_callback(i2c_handler *hi2c) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	i2c_slave_rx_process(rxBuffer, rxBUFFER_SIZE);
 8000c14:	2115      	movs	r1, #21
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8000c18:	f002 f8f2 	bl	8002e00 <i2c_slave_rx_process>
	memset(rxBuffer,'\0', rxBUFFER_SIZE);
 8000c1c:	2215      	movs	r2, #21
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8000c22:	f009 fe73 	bl	800a90c <memset>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000bc 	.word	0x200000bc

08000c34 <HAL_I2C_SlaveTxCpltCallback>:

void i2c_tx_callback(i2c_handler *hi2c) {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <HAL_I2C_ErrorCallback>:

void i2c_err_callback(i2c_handler *hi2c) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	i2c_start_listen(hi2c);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f004 f8a2 	bl	8004d98 <HAL_I2C_EnableListen_IT>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <i2c_set_txBuffer>:

void i2c_set_txBuffer(uint8_t* data, uint8_t size) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	memset(txBuffer,'\0', txBUFFER_SIZE);
 8000c68:	2215      	movs	r2, #21
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <i2c_set_txBuffer+0x2c>)
 8000c6e:	f009 fe4d 	bl	800a90c <memset>
	memcpy(txBuffer, data, size);
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	461a      	mov	r2, r3
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <i2c_set_txBuffer+0x2c>)
 8000c7a:	f009 fe39 	bl	800a8f0 <memcpy>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000d4 	.word	0x200000d4

08000c8c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000c96:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <HD44780_Init+0xec>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000c9c:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <HD44780_Init+0xf0>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <HD44780_Init+0xf4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <HD44780_Init+0xec>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d907      	bls.n	8000cc0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000cb0:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <HD44780_Init+0xf4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <HD44780_Init+0xf4>)
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e006      	b.n	8000cce <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HD44780_Init+0xf4>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HD44780_Init+0xf4>)
 8000ccc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000cce:	f000 f985 	bl	8000fdc <DelayInit>
  HAL_Delay(50);
 8000cd2:	2032      	movs	r0, #50	; 0x32
 8000cd4:	f002 ffae 	bl	8003c34 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <HD44780_Init+0xf0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f943 	bl	8000f68 <ExpanderWrite>
  HAL_Delay(1000);
 8000ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce6:	f002 ffa5 	bl	8003c34 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000cea:	2030      	movs	r0, #48	; 0x30
 8000cec:	f000 f92b 	bl	8000f46 <Write4Bits>
  DelayUS(4500);
 8000cf0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000cf4:	f000 f99a 	bl	800102c <DelayUS>

  Write4Bits(0x03 << 4);
 8000cf8:	2030      	movs	r0, #48	; 0x30
 8000cfa:	f000 f924 	bl	8000f46 <Write4Bits>
  DelayUS(4500);
 8000cfe:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d02:	f000 f993 	bl	800102c <DelayUS>

  Write4Bits(0x03 << 4);
 8000d06:	2030      	movs	r0, #48	; 0x30
 8000d08:	f000 f91d 	bl	8000f46 <Write4Bits>
  DelayUS(4500);
 8000d0c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d10:	f000 f98c 	bl	800102c <DelayUS>

  Write4Bits(0x02 << 4);
 8000d14:	2020      	movs	r0, #32
 8000d16:	f000 f916 	bl	8000f46 <Write4Bits>
  DelayUS(100);
 8000d1a:	2064      	movs	r0, #100	; 0x64
 8000d1c:	f000 f986 	bl	800102c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HD44780_Init+0xf4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f043 0320 	orr.w	r3, r3, #32
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f8ce 	bl	8000ecc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HD44780_Init+0xf8>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000d36:	f000 f875 	bl	8000e24 <HD44780_Display>
  HD44780_Clear();
 8000d3a:	f000 f82b 	bl	8000d94 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HD44780_Init+0xfc>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HD44780_Init+0xfc>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f8bc 	bl	8000ecc <SendCommand>
  DelayUS(4500);
 8000d54:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d58:	f000 f968 	bl	800102c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000d5c:	490b      	ldr	r1, [pc, #44]	; (8000d8c <HD44780_Init+0x100>)
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f876 	bl	8000e50 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000d64:	490a      	ldr	r1, [pc, #40]	; (8000d90 <HD44780_Init+0x104>)
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 f872 	bl	8000e50 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000d6c:	f000 f81d 	bl	8000daa <HD44780_Home>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000276 	.word	0x20000276
 8000d7c:	20000278 	.word	0x20000278
 8000d80:	20000274 	.word	0x20000274
 8000d84:	20000277 	.word	0x20000277
 8000d88:	20000275 	.word	0x20000275
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008

08000d94 <HD44780_Clear>:

void HD44780_Clear()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f000 f897 	bl	8000ecc <SendCommand>
  DelayUS(2000);
 8000d9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000da2:	f000 f943 	bl	800102c <DelayUS>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HD44780_Home>:

void HD44780_Home()
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f000 f88c 	bl	8000ecc <SendCommand>
  DelayUS(2000);
 8000db4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000db8:	f000 f938 	bl	800102c <DelayUS>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HD44780_SetCursor+0x5c>)
 8000dd2:	f107 0408 	add.w	r4, r7, #8
 8000dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HD44780_SetCursor+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	79ba      	ldrb	r2, [r7, #6]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d303      	bcc.n	8000dee <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HD44780_SetCursor+0x60>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	f107 0218 	add.w	r2, r7, #24
 8000df6:	4413      	add	r3, r2
 8000df8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f85c 	bl	8000ecc <SendCommand>
}
 8000e14:	bf00      	nop
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	0800cde0 	.word	0x0800cde0
 8000e20:	20000276 	.word	0x20000276

08000e24 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HD44780_Display+0x28>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HD44780_Display+0x28>)
 8000e34:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HD44780_Display+0x28>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f843 	bl	8000ecc <SendCommand>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000277 	.word	0x20000277

08000e50 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f82a 	bl	8000ecc <SendCommand>
  for (int i=0; i<8; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e009      	b.n	8000e92 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f82e 	bl	8000ee8 <SendChar>
  for (int i=0; i<8; i++)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	ddf2      	ble.n	8000e7e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000eaa:	e006      	b.n	8000eba <HD44780_PrintStr+0x18>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f817 	bl	8000ee8 <SendChar>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f4      	bne.n	8000eac <HD44780_PrintStr+0xa>
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f812 	bl	8000f04 <Send>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f804 	bl	8000f04 <Send>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f023 030f 	bic.w	r3, r3, #15
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f80b 	bl	8000f46 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f30:	7bba      	ldrb	r2, [r7, #14]
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f804 	bl	8000f46 <Write4Bits>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f808 	bl	8000f68 <ExpanderWrite>
  PulseEnable(value);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f820 	bl	8000fa0 <PulseEnable>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <ExpanderWrite+0x30>)
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000f7e:	f107 020f 	add.w	r2, r7, #15
 8000f82:	230a      	movs	r3, #10
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	214e      	movs	r1, #78	; 0x4e
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <ExpanderWrite+0x34>)
 8000f8c:	f003 fd22 	bl	80049d4 <HAL_I2C_Master_Transmit>
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000278 	.word	0x20000278
 8000f9c:	20000288 	.word	0x20000288

08000fa0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ffd8 	bl	8000f68 <ExpanderWrite>
  DelayUS(20);
 8000fb8:	2014      	movs	r0, #20
 8000fba:	f000 f837 	bl	800102c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffce 	bl	8000f68 <ExpanderWrite>
  DelayUS(20);
 8000fcc:	2014      	movs	r0, #20
 8000fce:	f000 f82d 	bl	800102c <DelayUS>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <DelayInit>:

static void DelayInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <DelayInit+0x48>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <DelayInit+0x48>)
 8000fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fea:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <DelayInit+0x48>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <DelayInit+0x48>)
 8000ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <DelayInit+0x4c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <DelayInit+0x4c>)
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <DelayInit+0x4c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <DelayInit+0x4c>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <DelayInit+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001016:	bf00      	nop
  __ASM volatile ("NOP");
 8001018:	bf00      	nop
  __ASM volatile ("NOP");
 800101a:	bf00      	nop
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	e000edf0 	.word	0xe000edf0
 8001028:	e0001000 	.word	0xe0001000

0800102c <DelayUS>:

static void DelayUS(uint32_t us) {
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <DelayUS+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <DelayUS+0x44>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9a      	lsrs	r2, r3, #18
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <DelayUS+0x48>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <DelayUS+0x48>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f6      	bhi.n	800104e <DelayUS+0x22>
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000010 	.word	0x20000010
 8001070:	431bde83 	.word	0x431bde83
 8001074:	e0001000 	.word	0xe0001000

08001078 <MEN_BuildMenu>:
	privilege_t privilege;
	uint32_t state;
}level_t;

void MEN_BuildMenu(level_t *currentNode,uint32_t userNo, char row1[16], char row2[16],level_t *prevNode, level_t *nextNode,level_t *maestraNode, level_t *cancelarNode, level_t *aceptarNode, level_t *menuNode, level_t *lastNode)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	currentNode->userNo = userNo;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	601a      	str	r2, [r3, #0]
    strcpy(currentNode->row1, row1);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3304      	adds	r3, #4
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	f009 fd4c 	bl	800ab30 <strcpy>
    strcpy(currentNode->row2, row2);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3314      	adds	r3, #20
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fd46 	bl	800ab30 <strcpy>
    currentNode->prev = prevNode;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
    currentNode->next = nextNode;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
    currentNode->maestra = maestraNode;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a3a      	ldr	r2, [r7, #32]
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
    currentNode->cancelar = cancelarNode;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	631a      	str	r2, [r3, #48]	; 0x30
    currentNode->aceptar = aceptarNode;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
    currentNode->menu = menuNode;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
    currentNode->last = lastNode;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010cc:	63da      	str	r2, [r3, #60]	; 0x3c
    currentNode->privilege = USER;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <MEN_Next>:

void MEN_Next(level_t **currentNode)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->next != NULL){
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <MEN_Next+0x2a>
	  level_t *auxLastNode = *currentNode;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->next;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <MEN_Prev>:

void MEN_Prev(level_t **currentNode)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  if((*currentNode)->prev != NULL){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <MEN_Prev+0x2a>
	  level_t *auxLastNode = *currentNode;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->prev;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <MEN_Maestra>:
void MEN_Maestra(level_t **currentNode)
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  if((*currentNode)->maestra != NULL){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00b      	beq.n	8001170 <MEN_Maestra+0x2a>
	  level_t *auxLastNode = *currentNode;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->maestra;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <MEN_Cancelar>:

void MEN_Cancelar(level_t **currentNode)
{
 800117a:	b480      	push	{r7}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	if((*currentNode)->cancelar != NULL){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00b      	beq.n	80011a4 <MEN_Cancelar+0x2a>
	  level_t *auxLastNode = *currentNode;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->cancelar;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <MEN_Menu>:
	  (*currentNode) = (*currentNode)->aceptar;
	  (*currentNode)->last = auxLastNode;
  }
}
void MEN_Menu(level_t **currentNode)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  if((*currentNode)->menu != NULL){
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <MEN_Menu+0x2a>
	  level_t *auxLastNode = *currentNode;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->menu;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <MEN_Last>:

void MEN_Last(level_t **currentNode){
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  level_t *auxLastNode = *currentNode;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60fb      	str	r3, [r7, #12]
  (*currentNode)->last = auxLastNode;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
	...

08001204 <display_Print>:
		bufferAux[(2*j)+1] = 0;
	}
	Flash_Write_Data(PAGE_ADDR_1, bufferAux, FLASH_BUFFER_SIZE);
}

void display_Print(uint8_t accion, char *linea1, char *linea2){
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	73fb      	strb	r3, [r7, #15]
	display_t display;

	display.accion = accion;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	753b      	strb	r3, [r7, #20]
	strcpy(display.linea1, linea1);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	3301      	adds	r3, #1
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	4618      	mov	r0, r3
 8001220:	f009 fc86 	bl	800ab30 <strcpy>
	strcpy(display.linea2, linea2);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	3311      	adds	r3, #17
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	f009 fc7f 	bl	800ab30 <strcpy>
	xQueueSend(display_q, &display, blockForever);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <display_Print+0x48>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f107 0114 	add.w	r1, r7, #20
 800123a:	2300      	movs	r3, #0
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	f006 fe2c 	bl	8007e9c <xQueueGenericSend>
}
 8001244:	bf00      	nop
 8001246:	3738      	adds	r7, #56	; 0x38
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000394 	.word	0x20000394

08001250 <t_Menu>:


//menu----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Menu (void *pvParameters){
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 8001256:	af08      	add	r7, sp, #32
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	6018      	str	r0, [r3, #0]
	struct level claveUsuario1, claveUsuario2, claveUsuario3, claveUsuario4, claveUsuario5, claveUsuario6,
	 	 	 	 	 claveUsuario7, claveUsuario8, claveUsuario9, claveUsuario10,
					claveMaestra, agregarUsuario, borrarUsuario, resetFabrica, menu, *currentM;

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800125c:	2000      	movs	r0, #0
 800125e:	f008 fb75 	bl	800994c <uxTaskGetStackHighWaterMark>
 8001262:	f8c7 0508 	str.w	r0, [r7, #1288]	; 0x508

	usuario_t usuario[CANT_MAX_USUARIOS];

	uint32_t i;
#ifdef EGB
	vTaskSuspend(tComextern_h);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <t_Menu+0x28>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f007 fbf6 	bl	8008a5c <vTaskSuspend>
#endif
	for(i = 0; i < CANT_MAX_USUARIOS; i++){
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8001276:	e03d      	b.n	80012f4 <t_Menu+0xa4>
 8001278:	20000104 	.word	0x20000104
		usuario[i].clave = 0;
 800127c:	f107 021c 	add.w	r2, r7, #28
 8001280:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	4413      	add	r3, r2
 8001288:	3304      	adds	r3, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
		usuario[i].nroUsuario = i;
 800128e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	f107 021c 	add.w	r2, r7, #28
 8001298:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	3301      	adds	r3, #1
 80012a2:	460a      	mov	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
		usuario[i].accion = SCANN;
 80012a6:	f107 021c 	add.w	r2, r7, #28
 80012aa:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]

		xQueueSendToBack(reqAcceso_q, &usuario[i], blockForever);
 80012b6:	4bbe      	ldr	r3, [pc, #760]	; (80015b0 <t_Menu+0x360>)
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	f107 021c 	add.w	r2, r7, #28
 80012be:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	18d1      	adds	r1, r2, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	f006 fde6 	bl	8007e9c <xQueueGenericSend>
		xQueueReceive(respAcceso_q, &usuario[i], blockForever);
 80012d0:	4bb8      	ldr	r3, [pc, #736]	; (80015b4 <t_Menu+0x364>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f107 021c 	add.w	r2, r7, #28
 80012d8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	4619      	mov	r1, r3
 80012e6:	f006 ff89 	bl	80081fc <xQueueReceive>
	for(i = 0; i < CANT_MAX_USUARIOS; i++){
 80012ea:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80012f4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012f8:	2b0a      	cmp	r3, #10
 80012fa:	d9bf      	bls.n	800127c <t_Menu+0x2c>
	}

#ifdef EGB
	global_id = 0;
 80012fc:	4bae      	ldr	r3, [pc, #696]	; (80015b8 <t_Menu+0x368>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
	xQueueReset(reqAcceso_aux_q);
 8001302:	4bae      	ldr	r3, [pc, #696]	; (80015bc <t_Menu+0x36c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f006 fcc5 	bl	8007c98 <xQueueGenericReset>
	xQueueReset(respAcceso_aux_q);
 800130e:	4bac      	ldr	r3, [pc, #688]	; (80015c0 <t_Menu+0x370>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fcbf 	bl	8007c98 <xQueueGenericReset>
	xQueueReset(actuador_aux_q);
 800131a:	4baa      	ldr	r3, [pc, #680]	; (80015c4 <t_Menu+0x374>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f006 fcb9 	bl	8007c98 <xQueueGenericReset>
	vTaskResume(tComextern_h);
 8001326:	4ba8      	ldr	r3, [pc, #672]	; (80015c8 <t_Menu+0x378>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f007 fc48 	bl	8008bc0 <vTaskResume>
#endif
	//BuildMenu(nodoActual, nroUsuario, imprimir1, imprimir2, funcCancelar, funcAceptar, nodoArriba, nodoAbajo, nodoMaestra, nodoCancelar, nodoAceptar, nodoMenu, lastMenu)

    MEN_BuildMenu(&claveUsuario1, 	USUARIO_1,	"USUARIO 1", ">>>", 	&claveUsuario10, &claveUsuario2, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001330:	f507 6098 	add.w	r0, r7, #1216	; 0x4c0
 8001334:	2300      	movs	r3, #0
 8001336:	9306      	str	r3, [sp, #24]
 8001338:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800133c:	9305      	str	r3, [sp, #20]
 800133e:	2300      	movs	r3, #0
 8001340:	9304      	str	r3, [sp, #16]
 8001342:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001346:	9303      	str	r3, [sp, #12]
 8001348:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4b9c      	ldr	r3, [pc, #624]	; (80015cc <t_Menu+0x37c>)
 800135c:	4a9c      	ldr	r2, [pc, #624]	; (80015d0 <t_Menu+0x380>)
 800135e:	2101      	movs	r1, #1
 8001360:	f7ff fe8a 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario2, 	USUARIO_2,	"USUARIO 2", ">>>", 	&claveUsuario1, &claveUsuario3, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001364:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8001368:	2300      	movs	r3, #0
 800136a:	9306      	str	r3, [sp, #24]
 800136c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001370:	9305      	str	r3, [sp, #20]
 8001372:	2300      	movs	r3, #0
 8001374:	9304      	str	r3, [sp, #16]
 8001376:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800137a:	9303      	str	r3, [sp, #12]
 800137c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4b8f      	ldr	r3, [pc, #572]	; (80015cc <t_Menu+0x37c>)
 8001390:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <t_Menu+0x384>)
 8001392:	2102      	movs	r1, #2
 8001394:	f7ff fe70 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario3, 	USUARIO_3,	"USUARIO 3", ">>>", 	&claveUsuario2, &claveUsuario4, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001398:	f507 6086 	add.w	r0, r7, #1072	; 0x430
 800139c:	2300      	movs	r3, #0
 800139e:	9306      	str	r3, [sp, #24]
 80013a0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013a4:	9305      	str	r3, [sp, #20]
 80013a6:	2300      	movs	r3, #0
 80013a8:	9304      	str	r3, [sp, #16]
 80013aa:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80013ae:	9303      	str	r3, [sp, #12]
 80013b0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4b82      	ldr	r3, [pc, #520]	; (80015cc <t_Menu+0x37c>)
 80013c4:	4a84      	ldr	r2, [pc, #528]	; (80015d8 <t_Menu+0x388>)
 80013c6:	2103      	movs	r1, #3
 80013c8:	f7ff fe56 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario4, 	USUARIO_4,	"USUARIO 4", ">>>", 	&claveUsuario3, &claveUsuario5, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80013cc:	f507 707a 	add.w	r0, r7, #1000	; 0x3e8
 80013d0:	2300      	movs	r3, #0
 80013d2:	9306      	str	r3, [sp, #24]
 80013d4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013d8:	9305      	str	r3, [sp, #20]
 80013da:	2300      	movs	r3, #0
 80013dc:	9304      	str	r3, [sp, #16]
 80013de:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80013e2:	9303      	str	r3, [sp, #12]
 80013e4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4b75      	ldr	r3, [pc, #468]	; (80015cc <t_Menu+0x37c>)
 80013f8:	4a78      	ldr	r2, [pc, #480]	; (80015dc <t_Menu+0x38c>)
 80013fa:	2104      	movs	r1, #4
 80013fc:	f7ff fe3c 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario5, 	USUARIO_5,	"USUARIO 5", ">>>", 	&claveUsuario4, &claveUsuario6, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001400:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8001404:	2300      	movs	r3, #0
 8001406:	9306      	str	r3, [sp, #24]
 8001408:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800140c:	9305      	str	r3, [sp, #20]
 800140e:	2300      	movs	r3, #0
 8001410:	9304      	str	r3, [sp, #16]
 8001412:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001416:	9303      	str	r3, [sp, #12]
 8001418:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	4b68      	ldr	r3, [pc, #416]	; (80015cc <t_Menu+0x37c>)
 800142c:	4a6c      	ldr	r2, [pc, #432]	; (80015e0 <t_Menu+0x390>)
 800142e:	2105      	movs	r1, #5
 8001430:	f7ff fe22 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario6, 	USUARIO_6,	"USUARIO 6", ">>>", 	&claveUsuario5, &claveUsuario7, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001434:	f507 7056 	add.w	r0, r7, #856	; 0x358
 8001438:	2300      	movs	r3, #0
 800143a:	9306      	str	r3, [sp, #24]
 800143c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001440:	9305      	str	r3, [sp, #20]
 8001442:	2300      	movs	r3, #0
 8001444:	9304      	str	r3, [sp, #16]
 8001446:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800144a:	9303      	str	r3, [sp, #12]
 800144c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <t_Menu+0x37c>)
 8001460:	4a60      	ldr	r2, [pc, #384]	; (80015e4 <t_Menu+0x394>)
 8001462:	2106      	movs	r1, #6
 8001464:	f7ff fe08 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario7, 	USUARIO_7,	"USUARIO 7", ">>>", 	&claveUsuario6, &claveUsuario8, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001468:	f507 7044 	add.w	r0, r7, #784	; 0x310
 800146c:	2300      	movs	r3, #0
 800146e:	9306      	str	r3, [sp, #24]
 8001470:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001474:	9305      	str	r3, [sp, #20]
 8001476:	2300      	movs	r3, #0
 8001478:	9304      	str	r3, [sp, #16]
 800147a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800147e:	9303      	str	r3, [sp, #12]
 8001480:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4b4e      	ldr	r3, [pc, #312]	; (80015cc <t_Menu+0x37c>)
 8001494:	4a54      	ldr	r2, [pc, #336]	; (80015e8 <t_Menu+0x398>)
 8001496:	2107      	movs	r1, #7
 8001498:	f7ff fdee 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario8, 	USUARIO_8,	"USUARIO 8", ">>>", 	&claveUsuario7, &claveUsuario9, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 800149c:	f507 7032 	add.w	r0, r7, #712	; 0x2c8
 80014a0:	2300      	movs	r3, #0
 80014a2:	9306      	str	r3, [sp, #24]
 80014a4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014a8:	9305      	str	r3, [sp, #20]
 80014aa:	2300      	movs	r3, #0
 80014ac:	9304      	str	r3, [sp, #16]
 80014ae:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80014b2:	9303      	str	r3, [sp, #12]
 80014b4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <t_Menu+0x37c>)
 80014c8:	4a48      	ldr	r2, [pc, #288]	; (80015ec <t_Menu+0x39c>)
 80014ca:	2108      	movs	r1, #8
 80014cc:	f7ff fdd4 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario9, 	USUARIO_9,	"USUARIO 9", ">>>", 	&claveUsuario8, &claveUsuario10, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80014d0:	f507 7020 	add.w	r0, r7, #640	; 0x280
 80014d4:	2300      	movs	r3, #0
 80014d6:	9306      	str	r3, [sp, #24]
 80014d8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014dc:	9305      	str	r3, [sp, #20]
 80014de:	2300      	movs	r3, #0
 80014e0:	9304      	str	r3, [sp, #16]
 80014e2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80014e6:	9303      	str	r3, [sp, #12]
 80014e8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <t_Menu+0x37c>)
 80014fc:	4a3c      	ldr	r2, [pc, #240]	; (80015f0 <t_Menu+0x3a0>)
 80014fe:	2109      	movs	r1, #9
 8001500:	f7ff fdba 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario10, USUARIO_10, "USUARIO 10", ">>>", 	&claveUsuario9, &claveUsuario1, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001504:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8001508:	2300      	movs	r3, #0
 800150a:	9306      	str	r3, [sp, #24]
 800150c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001510:	9305      	str	r3, [sp, #20]
 8001512:	2300      	movs	r3, #0
 8001514:	9304      	str	r3, [sp, #16]
 8001516:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <t_Menu+0x37c>)
 8001530:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <t_Menu+0x3a4>)
 8001532:	210a      	movs	r1, #10
 8001534:	f7ff fda0 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveMaestra, 			0,"CLAVE MAESTRA", ">>>", 	0, 			   0, 			  0, &claveUsuario1, 0, &menu, 0);
 8001538:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 800153c:	2300      	movs	r3, #0
 800153e:	9306      	str	r3, [sp, #24]
 8001540:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001544:	9305      	str	r3, [sp, #20]
 8001546:	2300      	movs	r3, #0
 8001548:	9304      	str	r3, [sp, #16]
 800154a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800154e:	9303      	str	r3, [sp, #12]
 8001550:	2300      	movs	r3, #0
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2300      	movs	r3, #0
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <t_Menu+0x37c>)
 800155e:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <t_Menu+0x3a8>)
 8001560:	2100      	movs	r1, #0
 8001562:	f7ff fd89 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&menu,		 			0,"MENU CONFIG.", "<<< >>>",&borrarUsuario, &agregarUsuario, 			  0, &claveUsuario1, 0, 	0, 0);
 8001566:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800156a:	2300      	movs	r3, #0
 800156c:	9306      	str	r3, [sp, #24]
 800156e:	2300      	movs	r3, #0
 8001570:	9305      	str	r3, [sp, #20]
 8001572:	2300      	movs	r3, #0
 8001574:	9304      	str	r3, [sp, #16]
 8001576:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800157a:	9303      	str	r3, [sp, #12]
 800157c:	2300      	movs	r3, #0
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <t_Menu+0x3ac>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <t_Menu+0x3b0>)
 8001590:	2100      	movs	r1, #0
 8001592:	f7ff fd71 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&agregarUsuario, 			11,"AGREGAR USUARIO", ">>>",&borrarUsuario, &borrarUsuario, 			  0, &claveUsuario1, 0, 	0, 0);
 8001596:	f507 70d4 	add.w	r0, r7, #424	; 0x1a8
 800159a:	2300      	movs	r3, #0
 800159c:	9306      	str	r3, [sp, #24]
 800159e:	2300      	movs	r3, #0
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	2300      	movs	r3, #0
 80015a4:	9304      	str	r3, [sp, #16]
 80015a6:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80015aa:	9303      	str	r3, [sp, #12]
 80015ac:	2300      	movs	r3, #0
 80015ae:	e029      	b.n	8001604 <t_Menu+0x3b4>
 80015b0:	20000284 	.word	0x20000284
 80015b4:	2000038c 	.word	0x2000038c
 80015b8:	20000110 	.word	0x20000110
 80015bc:	20000338 	.word	0x20000338
 80015c0:	20000390 	.word	0x20000390
 80015c4:	20000330 	.word	0x20000330
 80015c8:	20000104 	.word	0x20000104
 80015cc:	0800cdf0 	.word	0x0800cdf0
 80015d0:	0800cdf4 	.word	0x0800cdf4
 80015d4:	0800ce00 	.word	0x0800ce00
 80015d8:	0800ce0c 	.word	0x0800ce0c
 80015dc:	0800ce18 	.word	0x0800ce18
 80015e0:	0800ce24 	.word	0x0800ce24
 80015e4:	0800ce30 	.word	0x0800ce30
 80015e8:	0800ce3c 	.word	0x0800ce3c
 80015ec:	0800ce48 	.word	0x0800ce48
 80015f0:	0800ce54 	.word	0x0800ce54
 80015f4:	0800ce60 	.word	0x0800ce60
 80015f8:	0800ce6c 	.word	0x0800ce6c
 80015fc:	0800ce7c 	.word	0x0800ce7c
 8001600:	0800ce84 	.word	0x0800ce84
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4bbc      	ldr	r3, [pc, #752]	; (8001904 <t_Menu+0x6b4>)
 8001614:	4abc      	ldr	r2, [pc, #752]	; (8001908 <t_Menu+0x6b8>)
 8001616:	210b      	movs	r1, #11
 8001618:	f7ff fd2e 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&borrarUsuario, 			12,"BORRAR USUARIO", ">>>",	&agregarUsuario, &agregarUsuario, 		  0, &claveUsuario1, 0, 	0, 0);
 800161c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8001620:	2300      	movs	r3, #0
 8001622:	9306      	str	r3, [sp, #24]
 8001624:	2300      	movs	r3, #0
 8001626:	9305      	str	r3, [sp, #20]
 8001628:	2300      	movs	r3, #0
 800162a:	9304      	str	r3, [sp, #16]
 800162c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	2300      	movs	r3, #0
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	4bb0      	ldr	r3, [pc, #704]	; (8001904 <t_Menu+0x6b4>)
 8001644:	4ab1      	ldr	r2, [pc, #708]	; (800190c <t_Menu+0x6bc>)
 8001646:	210c      	movs	r1, #12
 8001648:	f7ff fd16 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&resetFabrica, 			13,"RESET FABRICA", ">>>", 	&agregarUsuario, &borrarUsuario, 			  0, &claveUsuario1, 0, 	0, 0);
 800164c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001650:	2300      	movs	r3, #0
 8001652:	9306      	str	r3, [sp, #24]
 8001654:	2300      	movs	r3, #0
 8001656:	9305      	str	r3, [sp, #20]
 8001658:	2300      	movs	r3, #0
 800165a:	9304      	str	r3, [sp, #16]
 800165c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001660:	9303      	str	r3, [sp, #12]
 8001662:	2300      	movs	r3, #0
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4ba4      	ldr	r3, [pc, #656]	; (8001904 <t_Menu+0x6b4>)
 8001674:	4aa6      	ldr	r2, [pc, #664]	; (8001910 <t_Menu+0x6c0>)
 8001676:	210d      	movs	r1, #13
 8001678:	f7ff fcfe 	bl	8001078 <MEN_BuildMenu>

	char lcdStr[16] = ">>>";
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4aa4      	ldr	r2, [pc, #656]	; (8001914 <t_Menu+0x6c4>)
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	3304      	adds	r3, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
	uint32_t claveIngresada = 0, contDig = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
	lcd_init(lcdSize);
 800169a:	2002      	movs	r0, #2
 800169c:	f7ff faf6 	bl	8000c8c <HD44780_Init>

    currentM = &claveUsuario1;
 80016a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a4:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80016a8:	601a      	str	r2, [r3, #0]
    MEN_Last(&currentM);
 80016aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fd97 	bl	80011e2 <MEN_Last>
	display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80016b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	1d19      	adds	r1, r3, #4
 80016bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3314      	adds	r3, #20
 80016c4:	461a      	mov	r2, r3
 80016c6:	2006      	movs	r0, #6
 80016c8:	f7ff fd9c 	bl	8001204 <display_Print>

    tecla_t tecla;

	for(;;){
		xQueueReceive(tecla_q, &tecla, blockForever);
 80016cc:	4b92      	ldr	r3, [pc, #584]	; (8001918 <t_Menu+0x6c8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f107 0108 	add.w	r1, r7, #8
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 fd8f 	bl	80081fc <xQueueReceive>
		switch(tecla.accion){
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3b0a      	subs	r3, #10
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	f200 850c 	bhi.w	8002104 <t_Menu+0xeb4>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <t_Menu+0x4a4>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	080020c3 	.word	0x080020c3
 80016f8:	080017bf 	.word	0x080017bf
 80016fc:	0800183b 	.word	0x0800183b
 8001700:	08002081 	.word	0x08002081
 8001704:	080018b7 	.word	0x080018b7
 8001708:	08001931 	.word	0x08001931
 800170c:	08001711 	.word	0x08001711
			case NUM:

				if(contDig < 8){
 8001710:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8001714:	2b07      	cmp	r3, #7
 8001716:	d844      	bhi.n	80017a2 <t_Menu+0x552>
					claveIngresada += tecla.tecla * pow(10, contDig);
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	785b      	ldrb	r3, [r3, #1]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fe70 	bl	8000404 <__aeabi_i2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	f8d7 050c 	ldr.w	r0, [r7, #1292]	; 0x50c
 800172c:	f7fe fe5a 	bl	80003e4 <__aeabi_ui2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	f04f 0000 	mov.w	r0, #0
 8001738:	4978      	ldr	r1, [pc, #480]	; (800191c <t_Menu+0x6cc>)
 800173a:	f00a fbb3 	bl	800bea4 <pow>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fec7 	bl	80004d8 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4614      	mov	r4, r2
 8001750:	461d      	mov	r5, r3
 8001752:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 8001756:	f7fe fe45 	bl	80003e4 <__aeabi_ui2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe fd03 	bl	800016c <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f963 	bl	8000a38 <__aeabi_d2uiz>
 8001772:	4603      	mov	r3, r0
 8001774:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
					contDig++;
 8001778:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 800177c:	3301      	adds	r3, #1
 800177e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
					strcat(lcdStr,"*");
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fce2 	bl	8000150 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4413      	add	r3, r2
 8001796:	4962      	ldr	r1, [pc, #392]	; (8001920 <t_Menu+0x6d0>)
 8001798:	461a      	mov	r2, r3
 800179a:	460b      	mov	r3, r1
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	8013      	strh	r3, [r2, #0]
 80017a0:	e004      	b.n	80017ac <t_Menu+0x55c>
				}
				else
					display_Print(TEMPORARY_PRINTING, '\0', "ERROR 5");
 80017a2:	4a60      	ldr	r2, [pc, #384]	; (8001924 <t_Menu+0x6d4>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff fd2c 	bl	8001204 <display_Print>

				display_Print(PRINT, '\0', lcdStr);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	461a      	mov	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff fd25 	bl	8001204 <display_Print>
				break;
 80017ba:	f000 bca3 	b.w	8002104 <t_Menu+0xeb4>
			case ARRIBA:
				MEN_Prev(&currentM);
 80017be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fca5 	bl	8001112 <MEN_Prev>
				if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR)
 80017c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f107 021c 	add.w	r2, r7, #28
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b0a      	cmp	r3, #10
 80017dc:	d109      	bne.n	80017f2 <t_Menu+0x5a2>
					display_Print(CLEAR_PRINT, currentM->row1, "Sin asignar");
 80017de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3304      	adds	r3, #4
 80017e6:	4a50      	ldr	r2, [pc, #320]	; (8001928 <t_Menu+0x6d8>)
 80017e8:	4619      	mov	r1, r3
 80017ea:	2006      	movs	r0, #6
 80017ec:	f7ff fd0a 	bl	8001204 <display_Print>
 80017f0:	e00b      	b.n	800180a <t_Menu+0x5ba>
				else display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80017f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1d19      	adds	r1, r3, #4
 80017fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3314      	adds	r3, #20
 8001802:	461a      	mov	r2, r3
 8001804:	2006      	movs	r0, #6
 8001806:	f7ff fcfd 	bl	8001204 <display_Print>
				if(menu.privilege == MASTER)
 800180a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800180e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <t_Menu+0x5d2>
					currentM->last = &borrarUsuario;
 8001816:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
				reset_values();
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4a38      	ldr	r2, [pc, #224]	; (8001914 <t_Menu+0x6c4>)
 8001834:	601a      	str	r2, [r3, #0]
				break;
 8001836:	f000 bc65 	b.w	8002104 <t_Menu+0xeb4>

			case ABAJO:
				MEN_Next(&currentM);
 800183a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fc4d 	bl	80010de <MEN_Next>
				if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR)
 8001844:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f107 021c 	add.w	r2, r7, #28
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b0a      	cmp	r3, #10
 8001858:	d109      	bne.n	800186e <t_Menu+0x61e>
					display_Print(CLEAR_PRINT, currentM->row1, "Sin asignar");
 800185a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3304      	adds	r3, #4
 8001862:	4a31      	ldr	r2, [pc, #196]	; (8001928 <t_Menu+0x6d8>)
 8001864:	4619      	mov	r1, r3
 8001866:	2006      	movs	r0, #6
 8001868:	f7ff fccc 	bl	8001204 <display_Print>
 800186c:	e00b      	b.n	8001886 <t_Menu+0x636>
				else display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 800186e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	1d19      	adds	r1, r3, #4
 8001876:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3314      	adds	r3, #20
 800187e:	461a      	mov	r2, r3
 8001880:	2006      	movs	r0, #6
 8001882:	f7ff fcbf 	bl	8001204 <display_Print>
				if(menu.privilege == MASTER)
 8001886:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800188a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <t_Menu+0x64e>
					currentM->last = &borrarUsuario;
 8001892:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c
				reset_values();
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4a19      	ldr	r2, [pc, #100]	; (8001914 <t_Menu+0x6c4>)
 80018b0:	601a      	str	r2, [r3, #0]
				break;
 80018b2:	f000 bc27 	b.w	8002104 <t_Menu+0xeb4>

			case MENU:
				MEN_Maestra(&currentM);
 80018b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fc43 	bl	8001146 <MEN_Maestra>
				currentM->last = &menu;
 80018c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
				display_Print(TEMPORARY_PRINTING, "MENU CONFIG.", 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	4917      	ldr	r1, [pc, #92]	; (800192c <t_Menu+0x6dc>)
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff fc97 	bl	8001204 <display_Print>
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80018d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1d19      	adds	r1, r3, #4
 80018de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3314      	adds	r3, #20
 80018e6:	461a      	mov	r2, r3
 80018e8:	2006      	movs	r0, #6
 80018ea:	f7ff fc8b 	bl	8001204 <display_Print>
				reset_values();
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <t_Menu+0x6c4>)
 8001900:	601a      	str	r2, [r3, #0]
				break;
 8001902:	e3ff      	b.n	8002104 <t_Menu+0xeb4>
 8001904:	0800cdf0 	.word	0x0800cdf0
 8001908:	0800ce94 	.word	0x0800ce94
 800190c:	0800cea4 	.word	0x0800cea4
 8001910:	0800ceb4 	.word	0x0800ceb4
 8001914:	003e3e3e 	.word	0x003e3e3e
 8001918:	20000334 	.word	0x20000334
 800191c:	40240000 	.word	0x40240000
 8001920:	0800cec4 	.word	0x0800cec4
 8001924:	0800cec8 	.word	0x0800cec8
 8001928:	0800ced0 	.word	0x0800ced0
 800192c:	0800ce84 	.word	0x0800ce84

			case ACEPTAR:

				if((currentM == &claveUsuario1 || currentM == &claveUsuario2 || currentM == &claveUsuario3 || currentM == &claveUsuario4 || currentM == &claveMaestra) && menu.privilege == USER){
 8001930:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800193a:	429a      	cmp	r2, r3
 800193c:	d01c      	beq.n	8001978 <t_Menu+0x728>
 800193e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001948:	429a      	cmp	r2, r3
 800194a:	d015      	beq.n	8001978 <t_Menu+0x728>
 800194c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001956:	429a      	cmp	r2, r3
 8001958:	d00e      	beq.n	8001978 <t_Menu+0x728>
 800195a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8001964:	429a      	cmp	r2, r3
 8001966:	d007      	beq.n	8001978 <t_Menu+0x728>
 8001968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001972:	429a      	cmp	r2, r3
 8001974:	f040 81c0 	bne.w	8001cf8 <t_Menu+0xaa8>
 8001978:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800197c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001980:	2b00      	cmp	r3, #0
 8001982:	f040 81b9 	bne.w	8001cf8 <t_Menu+0xaa8>
					if(currentM->userNo == 0){
 8001986:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 80f2 	bne.w	8001b78 <t_Menu+0x928>
						//clave maestra
						if(contDig != 8) display_Print(TEMPORARY_PRINTING, 0, "Error de digitos");
 8001994:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8001998:	2b08      	cmp	r3, #8
 800199a:	d005      	beq.n	80019a8 <t_Menu+0x758>
 800199c:	4ac8      	ldr	r2, [pc, #800]	; (8001cc0 <t_Menu+0xa70>)
 800199e:	2100      	movs	r1, #0
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff fc2f 	bl	8001204 <display_Print>
					if(currentM->userNo == 0){
 80019a6:	e349      	b.n	800203c <t_Menu+0xdec>
						else{
							//cantidad correcta de digitos
							usuario[currentM->userNo].clave = claveIngresada;
 80019a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f107 021c 	add.w	r2, r7, #28
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	3304      	adds	r3, #4
 80019ba:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 80019be:	601a      	str	r2, [r3, #0]
							usuario[currentM->userNo].accion = READ;
 80019c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f107 021c 	add.w	r2, r7, #28
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]

							usuario[currentM->userNo].id = global_id++;
 80019d4:	4bbb      	ldr	r3, [pc, #748]	; (8001cc4 <t_Menu+0xa74>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	49ba      	ldr	r1, [pc, #744]	; (8001cc4 <t_Menu+0xa74>)
 80019dc:	600a      	str	r2, [r1, #0]
 80019de:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f107 011c 	add.w	r1, r7, #28
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	440a      	add	r2, r1
 80019ee:	320c      	adds	r2, #12
 80019f0:	6013      	str	r3, [r2, #0]
							xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 80019f2:	4bb5      	ldr	r3, [pc, #724]	; (8001cc8 <t_Menu+0xa78>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f107 021c 	add.w	r2, r7, #28
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	18d1      	adds	r1, r2, r3
 8001a06:	2300      	movs	r3, #0
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	f006 fa46 	bl	8007e9c <xQueueGenericSend>
#ifdef EGB
							xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], nonBlocking);
 8001a10:	4bae      	ldr	r3, [pc, #696]	; (8001ccc <t_Menu+0xa7c>)
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f107 021c 	add.w	r2, r7, #28
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	18d1      	adds	r1, r2, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	2200      	movs	r2, #0
 8001a28:	f006 fa38 	bl	8007e9c <xQueueGenericSend>
#endif
							xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 8001a2c:	4ba8      	ldr	r3, [pc, #672]	; (8001cd0 <t_Menu+0xa80>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f107 021c 	add.w	r2, r7, #28
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	4619      	mov	r1, r3
 8001a46:	f006 fbd9 	bl	80081fc <xQueueReceive>
							reset_values();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4a9e      	ldr	r2, [pc, #632]	; (8001cd4 <t_Menu+0xa84>)
 8001a5c:	601a      	str	r2, [r3, #0]

							switch(usuario[currentM->userNo].accion){
 8001a5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f107 021c 	add.w	r2, r7, #28
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	d061      	beq.n	8001b38 <t_Menu+0x8e8>
 8001a74:	2b07      	cmp	r3, #7
 8001a76:	f300 8139 	bgt.w	8001cec <t_Menu+0xa9c>
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d002      	beq.n	8001a84 <t_Menu+0x834>
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d048      	beq.n	8001b14 <t_Menu+0x8c4>
									reset_values();
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
									break;

								default:
									break;
 8001a82:	e133      	b.n	8001cec <t_Menu+0xa9c>
									if(currentM->last == &menu){
 8001a84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d11e      	bne.n	8001ad2 <t_Menu+0x882>
										MEN_Menu(&currentM);
 8001a94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb88 	bl	80011ae <MEN_Menu>
										display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001a9e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1d19      	adds	r1, r3, #4
 8001aa6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3314      	adds	r3, #20
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2006      	movs	r0, #6
 8001ab2:	f7ff fba7 	bl	8001204 <display_Print>
										menu.privilege = MASTER;
 8001ab6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
										agregarUsuario.state = 0;
 8001ac0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
										borrarUsuario.state = 0;
 8001ac8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001acc:	2200      	movs	r2, #0
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44
									break;
 8001ad0:	e111      	b.n	8001cf6 <t_Menu+0xaa6>
										display_Print(TEMPORARY_PRINTING, 0, "Acceso maestro");
 8001ad2:	4a81      	ldr	r2, [pc, #516]	; (8001cd8 <t_Menu+0xa88>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fb94 	bl	8001204 <display_Print>
										reset_values();
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4a79      	ldr	r2, [pc, #484]	; (8001cd4 <t_Menu+0xa84>)
 8001aee:	601a      	str	r2, [r3, #0]
										currentM = &claveUsuario1;
 8001af0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001af4:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8001af8:	601a      	str	r2, [r3, #0]
										display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001afa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1d19      	adds	r1, r3, #4
 8001b02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3314      	adds	r3, #20
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2006      	movs	r0, #6
 8001b0e:	f7ff fb79 	bl	8001204 <display_Print>
									break;
 8001b12:	e0f0      	b.n	8001cf6 <t_Menu+0xaa6>
									display_Print(TEMPORARY_PRINTING, 0, "Acceso denegado");
 8001b14:	4a71      	ldr	r2, [pc, #452]	; (8001cdc <t_Menu+0xa8c>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff fb73 	bl	8001204 <display_Print>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001b1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1d19      	adds	r1, r3, #4
 8001b26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3314      	adds	r3, #20
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2006      	movs	r0, #6
 8001b32:	f7ff fb67 	bl	8001204 <display_Print>
									break;
 8001b36:	e0de      	b.n	8001cf6 <t_Menu+0xaa6>
									display_Print(TEMPORARY_PRINTING_10s, "Espere 10 seg", "Acceso denegado");
 8001b38:	4a68      	ldr	r2, [pc, #416]	; (8001cdc <t_Menu+0xa8c>)
 8001b3a:	4969      	ldr	r1, [pc, #420]	; (8001ce0 <t_Menu+0xa90>)
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff fb61 	bl	8001204 <display_Print>
									vTaskDelay(sleep_10s);
 8001b42:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b46:	f006 ff55 	bl	80089f4 <vTaskDelay>
									reset_values();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4a5e      	ldr	r2, [pc, #376]	; (8001cd4 <t_Menu+0xa84>)
 8001b5c:	601a      	str	r2, [r3, #0]
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001b5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1d19      	adds	r1, r3, #4
 8001b66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3314      	adds	r3, #20
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2006      	movs	r0, #6
 8001b72:	f7ff fb47 	bl	8001204 <display_Print>
									break;
 8001b76:	e0be      	b.n	8001cf6 <t_Menu+0xaa6>
							}
						}
					}
					else{
						if(contDig != 4) display_Print(TEMPORARY_PRINTING, 0, "ERROR 3");
 8001b78:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d005      	beq.n	8001b8c <t_Menu+0x93c>
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <t_Menu+0xa94>)
 8001b82:	2100      	movs	r1, #0
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fb3d 	bl	8001204 <display_Print>
					if(currentM->userNo == 0){
 8001b8a:	e257      	b.n	800203c <t_Menu+0xdec>
						else{
							//cantidad correcta de digitos
							usuario[currentM->userNo].clave = claveIngresada;
 8001b8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f107 021c 	add.w	r2, r7, #28
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8001ba2:	601a      	str	r2, [r3, #0]
							usuario[currentM->userNo].accion = READ;
 8001ba4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f107 021c 	add.w	r2, r7, #28
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]

							usuario[currentM->userNo].id = global_id++;
 8001bb8:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <t_Menu+0xa74>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	4941      	ldr	r1, [pc, #260]	; (8001cc4 <t_Menu+0xa74>)
 8001bc0:	600a      	str	r2, [r1, #0]
 8001bc2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	f107 011c 	add.w	r1, r7, #28
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	440a      	add	r2, r1
 8001bd2:	320c      	adds	r2, #12
 8001bd4:	6013      	str	r3, [r2, #0]
							xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <t_Menu+0xa78>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f107 021c 	add.w	r2, r7, #28
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	18d1      	adds	r1, r2, r3
 8001bea:	2300      	movs	r3, #0
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	f006 f954 	bl	8007e9c <xQueueGenericSend>
#ifdef EGB
							xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], nonBlocking);
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <t_Menu+0xa7c>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f107 021c 	add.w	r2, r7, #28
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	18d1      	adds	r1, r2, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f006 f946 	bl	8007e9c <xQueueGenericSend>
#endif
							xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <t_Menu+0xa80>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f107 021c 	add.w	r2, r7, #28
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f006 fae7 	bl	80081fc <xQueueReceive>
							reset_values();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <t_Menu+0xa84>)
 8001c40:	601a      	str	r2, [r3, #0]

							switch(usuario[currentM->userNo].accion){
 8001c42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f107 021c 	add.w	r2, r7, #28
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b07      	cmp	r3, #7
 8001c56:	d04b      	beq.n	8001cf0 <t_Menu+0xaa0>
 8001c58:	2b07      	cmp	r3, #7
 8001c5a:	dc4b      	bgt.n	8001cf4 <t_Menu+0xaa4>
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d002      	beq.n	8001c66 <t_Menu+0xa16>
 8001c60:	2b06      	cmp	r3, #6
 8001c62:	d01b      	beq.n	8001c9c <t_Menu+0xa4c>
									break;
								case ACC_ERROR:

									break;
								default:
									break;
 8001c64:	e046      	b.n	8001cf4 <t_Menu+0xaa4>
									display_Print(TEMPORARY_PRINTING, 0, "Acceso permitido");
 8001c66:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <t_Menu+0xa98>)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f7ff faca 	bl	8001204 <display_Print>
									vTaskDelay(sleep_2s);
 8001c70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c74:	f006 febe 	bl	80089f4 <vTaskDelay>
									MEN_Last(&currentM);
 8001c78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fab0 	bl	80011e2 <MEN_Last>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001c82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1d19      	adds	r1, r3, #4
 8001c8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3314      	adds	r3, #20
 8001c92:	461a      	mov	r2, r3
 8001c94:	2006      	movs	r0, #6
 8001c96:	f7ff fab5 	bl	8001204 <display_Print>
									break;
 8001c9a:	e02c      	b.n	8001cf6 <t_Menu+0xaa6>
									display_Print(TEMPORARY_PRINTING, 0, "Acceso denegado");
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <t_Menu+0xa8c>)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff faaf 	bl	8001204 <display_Print>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001ca6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	1d19      	adds	r1, r3, #4
 8001cae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3314      	adds	r3, #20
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2006      	movs	r0, #6
 8001cba:	f7ff faa3 	bl	8001204 <display_Print>
									break;
 8001cbe:	e01a      	b.n	8001cf6 <t_Menu+0xaa6>
 8001cc0:	0800cedc 	.word	0x0800cedc
 8001cc4:	20000110 	.word	0x20000110
 8001cc8:	20000284 	.word	0x20000284
 8001ccc:	20000338 	.word	0x20000338
 8001cd0:	2000038c 	.word	0x2000038c
 8001cd4:	003e3e3e 	.word	0x003e3e3e
 8001cd8:	0800cef0 	.word	0x0800cef0
 8001cdc:	0800cf00 	.word	0x0800cf00
 8001ce0:	0800cf10 	.word	0x0800cf10
 8001ce4:	0800cf20 	.word	0x0800cf20
 8001ce8:	0800cf28 	.word	0x0800cf28
									break;
 8001cec:	bf00      	nop
 8001cee:	e1a5      	b.n	800203c <t_Menu+0xdec>
									break;
 8001cf0:	bf00      	nop
 8001cf2:	e1a3      	b.n	800203c <t_Menu+0xdec>
									break;
 8001cf4:	bf00      	nop
					if(currentM->userNo == 0){
 8001cf6:	e1a1      	b.n	800203c <t_Menu+0xdec>
							}
						}
					}
				}
				else if(menu.privilege == MASTER){
 8001cf8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f040 819b 	bne.w	800203c <t_Menu+0xdec>
					if(currentM == &agregarUsuario){
 8001d06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f040 8098 	bne.w	8001e46 <t_Menu+0xbf6>
						switch(agregarUsuario.state){
 8001d16:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <t_Menu+0xad6>
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d03b      	beq.n	8001d9c <t_Menu+0xb4c>
 8001d24:	e18a      	b.n	800203c <t_Menu+0xdec>
						case 0:
							i = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
							while(usuario[i].accion != ACC_SIN_ASIGNAR){
 8001d2c:	e00f      	b.n	8001d4e <t_Menu+0xafe>
								if(i < CANT_MAX_USUARIOS) i++;
 8001d2e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d32:	2b0a      	cmp	r3, #10
 8001d34:	d805      	bhi.n	8001d42 <t_Menu+0xaf2>
 8001d36:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8001d40:	e005      	b.n	8001d4e <t_Menu+0xafe>
								else {
									display_Print(TEMPORARY_PRINTING, 0, "Sin espacio");
 8001d42:	4ac4      	ldr	r2, [pc, #784]	; (8002054 <t_Menu+0xe04>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff fa5c 	bl	8001204 <display_Print>
									break;
 8001d4c:	e008      	b.n	8001d60 <t_Menu+0xb10>
							while(usuario[i].accion != ACC_SIN_ASIGNAR){
 8001d4e:	f107 021c 	add.w	r2, r7, #28
 8001d52:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b0a      	cmp	r3, #10
 8001d5e:	d1e6      	bne.n	8001d2e <t_Menu+0xade>
								}
							}
							if(usuario[i].accion == ACC_SIN_ASIGNAR){
 8001d60:	f107 021c 	add.w	r2, r7, #28
 8001d64:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b0a      	cmp	r3, #10
 8001d70:	f040 8163 	bne.w	800203a <t_Menu+0xdea>
								sprintf(lcdStr, "Usuario %u libre", i);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 8001d7c:	49b6      	ldr	r1, [pc, #728]	; (8002058 <t_Menu+0xe08>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f008 feb6 	bl	800aaf0 <siprintf>
								display_Print(TEMPORARY_PRINTING, 0, lcdStr);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f7ff fa39 	bl	8001204 <display_Print>
								agregarUsuario.state = 1;
 8001d92:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d96:	2201      	movs	r2, #1
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
							}
							break;
 8001d9a:	e14e      	b.n	800203a <t_Menu+0xdea>
						case 1:
							usuario[i].clave = claveIngresada;
 8001d9c:	f107 021c 	add.w	r2, r7, #28
 8001da0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8001dae:	601a      	str	r2, [r3, #0]
							usuario[i].accion = WRITE;
 8001db0:	f107 021c 	add.w	r2, r7, #28
 8001db4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
							usuario[i].nroUsuario = i;
 8001dc0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001dc4:	b2d9      	uxtb	r1, r3
 8001dc6:	f107 021c 	add.w	r2, r7, #28
 8001dca:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]

							xQueueSendToBack(reqAcceso_q, &usuario[i], blockForever);
 8001dd8:	4ba0      	ldr	r3, [pc, #640]	; (800205c <t_Menu+0xe0c>)
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	f107 021c 	add.w	r2, r7, #28
 8001de0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	18d1      	adds	r1, r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	f04f 32ff 	mov.w	r2, #4294967295
 8001dee:	f006 f855 	bl	8007e9c <xQueueGenericSend>
							sprintf(lcdStr, "Usuario %u", i);
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 8001dfa:	4999      	ldr	r1, [pc, #612]	; (8002060 <t_Menu+0xe10>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f008 fe77 	bl	800aaf0 <siprintf>
							display_Print(TEMPORARY_PRINTING, lcdStr, "Guardado");
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4a97      	ldr	r2, [pc, #604]	; (8002064 <t_Menu+0xe14>)
 8001e08:	4619      	mov	r1, r3
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f9fa 	bl	8001204 <display_Print>
						    currentM = &claveUsuario1;
 8001e10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e14:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8001e18:	601a      	str	r2, [r3, #0]
							display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001e1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1d19      	adds	r1, r3, #4
 8001e22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3314      	adds	r3, #20
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2006      	movs	r0, #6
 8001e2e:	f7ff f9e9 	bl	8001204 <display_Print>
							agregarUsuario.state = 0;
 8001e32:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
							menu.privilege = USER;
 8001e3a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
							break;
 8001e44:	e0fa      	b.n	800203c <t_Menu+0xdec>
						}

					}
					else if(currentM == &borrarUsuario){
 8001e46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d121      	bne.n	8001e98 <t_Menu+0xc48>
						currentM = &claveUsuario1;
 8001e54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e58:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8001e5c:	601a      	str	r2, [r3, #0]
						display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001e5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	1d19      	adds	r1, r3, #4
 8001e66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2006      	movs	r0, #6
 8001e72:	f7ff f9c7 	bl	8001204 <display_Print>
						display_Print(TEMPORARY_PRINTING, currentM->row1, currentM->row2);
 8001e76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1d19      	adds	r1, r3, #4
 8001e7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3314      	adds	r3, #20
 8001e86:	461a      	mov	r2, r3
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7ff f9bb 	bl	8001204 <display_Print>
						borrarUsuario.state = 1;
 8001e8e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e92:	2201      	movs	r2, #1
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
 8001e96:	e0d1      	b.n	800203c <t_Menu+0xdec>
					}
					else if(currentM->last == &borrarUsuario){
 8001e98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ea0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 80c9 	bne.w	800203c <t_Menu+0xdec>
						usuario[currentM->userNo].clave = 0;
 8001eaa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f107 021c 	add.w	r2, r7, #28
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	4413      	add	r3, r2
 8001eba:	3304      	adds	r3, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
						usuario[currentM->userNo].accion = WRITE;
 8001ec0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f107 021c 	add.w	r2, r7, #28
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]

						usuario[currentM->userNo].id = global_id++;
 8001ed4:	4b64      	ldr	r3, [pc, #400]	; (8002068 <t_Menu+0xe18>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	4963      	ldr	r1, [pc, #396]	; (8002068 <t_Menu+0xe18>)
 8001edc:	600a      	str	r2, [r1, #0]
 8001ede:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	f107 011c 	add.w	r1, r7, #28
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	440a      	add	r2, r1
 8001eee:	320c      	adds	r2, #12
 8001ef0:	6013      	str	r3, [r2, #0]
						xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	; (800205c <t_Menu+0xe0c>)
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f107 021c 	add.w	r2, r7, #28
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	18d1      	adds	r1, r2, r3
 8001f06:	2300      	movs	r3, #0
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	f005 ffc6 	bl	8007e9c <xQueueGenericSend>
#ifdef EGB
						xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], nonBlocking);
 8001f10:	4b56      	ldr	r3, [pc, #344]	; (800206c <t_Menu+0xe1c>)
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f107 021c 	add.w	r2, r7, #28
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	18d1      	adds	r1, r2, r3
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	f005 ffb8 	bl	8007e9c <xQueueGenericSend>
#endif
						usuario[currentM->userNo].accion = SCANN;
 8001f2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f107 021c 	add.w	r2, r7, #28
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	701a      	strb	r2, [r3, #0]

						usuario[currentM->userNo].id = global_id++;
 8001f40:	4b49      	ldr	r3, [pc, #292]	; (8002068 <t_Menu+0xe18>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	4948      	ldr	r1, [pc, #288]	; (8002068 <t_Menu+0xe18>)
 8001f48:	600a      	str	r2, [r1, #0]
 8001f4a:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f107 011c 	add.w	r1, r7, #28
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	440a      	add	r2, r1
 8001f5a:	320c      	adds	r2, #12
 8001f5c:	6013      	str	r3, [r2, #0]
						xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <t_Menu+0xe0c>)
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f107 021c 	add.w	r2, r7, #28
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	18d1      	adds	r1, r2, r3
 8001f72:	2300      	movs	r3, #0
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	f005 ff90 	bl	8007e9c <xQueueGenericSend>
#ifdef EGB
						xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], nonBlocking);
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <t_Menu+0xe1c>)
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f107 021c 	add.w	r2, r7, #28
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	18d1      	adds	r1, r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	2200      	movs	r2, #0
 8001f94:	f005 ff82 	bl	8007e9c <xQueueGenericSend>
#endif
						xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <t_Menu+0xe20>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f107 021c 	add.w	r2, r7, #28
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f006 f923 	bl	80081fc <xQueueReceive>

						if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR){
 8001fb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f107 021c 	add.w	r2, r7, #28
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b0a      	cmp	r3, #10
 8001fca:	d111      	bne.n	8001ff0 <t_Menu+0xda0>
							sprintf(lcdStr, "Usuario %u", currentM->userNo);
 8001fcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	4921      	ldr	r1, [pc, #132]	; (8002060 <t_Menu+0xe10>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f008 fd88 	bl	800aaf0 <siprintf>
							display_Print(TEMPORARY_PRINTING, lcdStr, "Borrado");
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	4a23      	ldr	r2, [pc, #140]	; (8002074 <t_Menu+0xe24>)
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff f90b 	bl	8001204 <display_Print>
 8001fee:	e004      	b.n	8001ffa <t_Menu+0xdaa>
						}
						else
							display_Print(TEMPORARY_PRINTING, 0, "Error en borrado");
 8001ff0:	4a21      	ldr	r2, [pc, #132]	; (8002078 <t_Menu+0xe28>)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff f905 	bl	8001204 <display_Print>
					    currentM = &claveUsuario1;
 8001ffa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ffe:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8002002:	601a      	str	r2, [r3, #0]
						display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8002004:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	1d19      	adds	r1, r3, #4
 800200c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3314      	adds	r3, #20
 8002014:	461a      	mov	r2, r3
 8002016:	2006      	movs	r0, #6
 8002018:	f7ff f8f4 	bl	8001204 <display_Print>

						borrarUsuario.state = 0;
 800201c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002020:	2200      	movs	r2, #0
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
						menu.privilege = USER;
 8002024:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
						MEN_Last(&currentM);
 800202e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f8d5 	bl	80011e2 <MEN_Last>
 8002038:	e000      	b.n	800203c <t_Menu+0xdec>
							break;
 800203a:	bf00      	nop
					}
				}
				reset_values();
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <t_Menu+0xe2c>)
 800204e:	601a      	str	r2, [r3, #0]
				break;
 8002050:	e058      	b.n	8002104 <t_Menu+0xeb4>
 8002052:	bf00      	nop
 8002054:	0800cf3c 	.word	0x0800cf3c
 8002058:	0800cf48 	.word	0x0800cf48
 800205c:	20000284 	.word	0x20000284
 8002060:	0800cf5c 	.word	0x0800cf5c
 8002064:	0800cf68 	.word	0x0800cf68
 8002068:	20000110 	.word	0x20000110
 800206c:	20000338 	.word	0x20000338
 8002070:	2000038c 	.word	0x2000038c
 8002074:	0800cf74 	.word	0x0800cf74
 8002078:	0800cf7c 	.word	0x0800cf7c
 800207c:	003e3e3e 	.word	0x003e3e3e
			case CANCELAR:
				MEN_Cancelar(&currentM);
 8002080:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f878 	bl	800117a <MEN_Cancelar>
				reset_values();
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <t_Menu+0xec4>)
 800209c:	601a      	str	r2, [r3, #0]
				menu.privilege = USER;
 800209e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80020a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1d19      	adds	r1, r3, #4
 80020b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3314      	adds	r3, #20
 80020b8:	461a      	mov	r2, r3
 80020ba:	2006      	movs	r0, #6
 80020bc:	f7ff f8a2 	bl	8001204 <display_Print>

				break;
 80020c0:	e020      	b.n	8002104 <t_Menu+0xeb4>

			case MAESTRA:
				MEN_Maestra(&currentM);
 80020c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f83d 	bl	8001146 <MEN_Maestra>
				reset_values();
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <t_Menu+0xec4>)
 80020de:	601a      	str	r2, [r3, #0]
				menu.privilege = USER;
 80020e0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80020ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	1d19      	adds	r1, r3, #4
 80020f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3314      	adds	r3, #20
 80020fa:	461a      	mov	r2, r3
 80020fc:	2006      	movs	r0, #6
 80020fe:	f7ff f881 	bl	8001204 <display_Print>
				break;
 8002102:	bf00      	nop
		}


		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002104:	2000      	movs	r0, #0
 8002106:	f007 fc21 	bl	800994c <uxTaskGetStackHighWaterMark>
 800210a:	f8c7 0508 	str.w	r0, [r7, #1288]	; 0x508
		xQueueReceive(tecla_q, &tecla, blockForever);
 800210e:	f7ff badd 	b.w	80016cc <t_Menu+0x47c>
 8002112:	bf00      	nop
 8002114:	003e3e3e 	.word	0x003e3e3e

08002118 <t_Display>:


//display----------------------------------------------------------------------------------------------------------------------------------------------------------------------


static void t_Display (void *pvParameters){
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	; 0x50
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	display_t display;
	uint8_t lastRow1[16], lastRow2[16];

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002120:	2000      	movs	r0, #0
 8002122:	f007 fc13 	bl	800994c <uxTaskGetStackHighWaterMark>
 8002126:	64f8      	str	r0, [r7, #76]	; 0x4c

	for(;;){
		if(strcmp(display.linea1,"\0") != 0) strcpy(lastRow1, display.linea1);
 8002128:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <t_Display+0x2a>
 8002130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	f107 0318 	add.w	r3, r7, #24
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f008 fcf7 	bl	800ab30 <strcpy>
		if(strcmp(display.linea2,"\0") != 0) strcpy(lastRow2, display.linea2);
 8002142:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <t_Display+0x46>
 800214a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214e:	f103 0211 	add.w	r2, r3, #17
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f008 fce9 	bl	800ab30 <strcpy>

		xQueueReceive(display_q, &display, blockForever);
 800215e:	4b68      	ldr	r3, [pc, #416]	; (8002300 <t_Display+0x1e8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002166:	f04f 32ff 	mov.w	r2, #4294967295
 800216a:	4618      	mov	r0, r3
 800216c:	f006 f846 	bl	80081fc <xQueueReceive>
		switch(display.accion){
 8002170:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002174:	2b06      	cmp	r3, #6
 8002176:	f200 80ae 	bhi.w	80022d6 <t_Display+0x1be>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <t_Display+0x68>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	0800219d 	.word	0x0800219d
 8002184:	080021c7 	.word	0x080021c7
 8002188:	08002225 	.word	0x08002225
 800218c:	08002283 	.word	0x08002283
 8002190:	08002289 	.word	0x08002289
 8002194:	08002299 	.word	0x08002299
 8002198:	080022a9 	.word	0x080022a9
			case PRINT:
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 800219c:	2100      	movs	r1, #0
 800219e:	2000      	movs	r0, #0
 80021a0:	f7fe fe0e 	bl	8000dc0 <HD44780_SetCursor>
 80021a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a8:	3301      	adds	r3, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fe79 	bl	8000ea2 <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 80021b0:	2101      	movs	r1, #1
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7fe fe04 	bl	8000dc0 <HD44780_SetCursor>
 80021b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021bc:	3311      	adds	r3, #17
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fe6f 	bl	8000ea2 <HD44780_PrintStr>
				}
				break;
 80021c4:	e097      	b.n	80022f6 <t_Display+0x1de>
			case TEMPORARY_PRINTING:
				lcd_clear();
 80021c6:	f7fe fde5 	bl	8000d94 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7fe fdf7 	bl	8000dc0 <HD44780_SetCursor>
 80021d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d6:	3301      	adds	r3, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fe62 	bl	8000ea2 <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 80021de:	2101      	movs	r1, #1
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe fded 	bl	8000dc0 <HD44780_SetCursor>
 80021e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ea:	3311      	adds	r3, #17
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fe58 	bl	8000ea2 <HD44780_PrintStr>
				}
				vTaskDelay(sleep_2s);
 80021f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021f6:	f006 fbfd 	bl	80089f4 <vTaskDelay>
				lcd_clear();
 80021fa:	f7fe fdcb 	bl	8000d94 <HD44780_Clear>
				lcd_msgPrint(0, 0, lastRow1);
 80021fe:	2100      	movs	r1, #0
 8002200:	2000      	movs	r0, #0
 8002202:	f7fe fddd 	bl	8000dc0 <HD44780_SetCursor>
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fe49 	bl	8000ea2 <HD44780_PrintStr>
				lcd_msgPrint(0, 1, lastRow2);
 8002210:	2101      	movs	r1, #1
 8002212:	2000      	movs	r0, #0
 8002214:	f7fe fdd4 	bl	8000dc0 <HD44780_SetCursor>
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fe40 	bl	8000ea2 <HD44780_PrintStr>
				break;
 8002222:	e068      	b.n	80022f6 <t_Display+0x1de>
			case TEMPORARY_PRINTING_10s:
				lcd_clear();
 8002224:	f7fe fdb6 	bl	8000d94 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 8002228:	2100      	movs	r1, #0
 800222a:	2000      	movs	r0, #0
 800222c:	f7fe fdc8 	bl	8000dc0 <HD44780_SetCursor>
 8002230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002234:	3301      	adds	r3, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fe33 	bl	8000ea2 <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 800223c:	2101      	movs	r1, #1
 800223e:	2000      	movs	r0, #0
 8002240:	f7fe fdbe 	bl	8000dc0 <HD44780_SetCursor>
 8002244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002248:	3311      	adds	r3, #17
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fe29 	bl	8000ea2 <HD44780_PrintStr>
				}
				vTaskDelay(sleep_10s);
 8002250:	f242 7010 	movw	r0, #10000	; 0x2710
 8002254:	f006 fbce 	bl	80089f4 <vTaskDelay>
				lcd_clear();
 8002258:	f7fe fd9c 	bl	8000d94 <HD44780_Clear>
				lcd_msgPrint(0, 0, lastRow1);
 800225c:	2100      	movs	r1, #0
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe fdae 	bl	8000dc0 <HD44780_SetCursor>
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fe1a 	bl	8000ea2 <HD44780_PrintStr>
				lcd_msgPrint(0, 1, lastRow2);
 800226e:	2101      	movs	r1, #1
 8002270:	2000      	movs	r0, #0
 8002272:	f7fe fda5 	bl	8000dc0 <HD44780_SetCursor>
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fe11 	bl	8000ea2 <HD44780_PrintStr>
				break;
 8002280:	e039      	b.n	80022f6 <t_Display+0x1de>
			case CLEAR:
				lcd_clear();
 8002282:	f7fe fd87 	bl	8000d94 <HD44780_Clear>
				break;
 8002286:	e036      	b.n	80022f6 <t_Display+0x1de>
			case CLEAR_1:
				lcd_msgPrint(0, 0, "                ");
 8002288:	2100      	movs	r1, #0
 800228a:	2000      	movs	r0, #0
 800228c:	f7fe fd98 	bl	8000dc0 <HD44780_SetCursor>
 8002290:	481c      	ldr	r0, [pc, #112]	; (8002304 <t_Display+0x1ec>)
 8002292:	f7fe fe06 	bl	8000ea2 <HD44780_PrintStr>
				break;
 8002296:	e02e      	b.n	80022f6 <t_Display+0x1de>
			case CLEAR_2:
				lcd_msgPrint(0, 1, "                ");
 8002298:	2101      	movs	r1, #1
 800229a:	2000      	movs	r0, #0
 800229c:	f7fe fd90 	bl	8000dc0 <HD44780_SetCursor>
 80022a0:	4818      	ldr	r0, [pc, #96]	; (8002304 <t_Display+0x1ec>)
 80022a2:	f7fe fdfe 	bl	8000ea2 <HD44780_PrintStr>
				break;
 80022a6:	e026      	b.n	80022f6 <t_Display+0x1de>
			case CLEAR_PRINT:
				lcd_clear();
 80022a8:	f7fe fd74 	bl	8000d94 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 80022ac:	2100      	movs	r1, #0
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7fe fd86 	bl	8000dc0 <HD44780_SetCursor>
 80022b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b8:	3301      	adds	r3, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fdf1 	bl	8000ea2 <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 80022c0:	2101      	movs	r1, #1
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7fe fd7c 	bl	8000dc0 <HD44780_SetCursor>
 80022c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022cc:	3311      	adds	r3, #17
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fde7 	bl	8000ea2 <HD44780_PrintStr>
				}
				break;
 80022d4:	e00f      	b.n	80022f6 <t_Display+0x1de>
			default:
				lcd_clear();
 80022d6:	f7fe fd5d 	bl	8000d94 <HD44780_Clear>
				lcd_msgPrint(0, 1, "ERROR 1");
 80022da:	2101      	movs	r1, #1
 80022dc:	2000      	movs	r0, #0
 80022de:	f7fe fd6f 	bl	8000dc0 <HD44780_SetCursor>
 80022e2:	4809      	ldr	r0, [pc, #36]	; (8002308 <t_Display+0x1f0>)
 80022e4:	f7fe fddd 	bl	8000ea2 <HD44780_PrintStr>
				vTaskDelay(sleep_1s);
 80022e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022ec:	f006 fb82 	bl	80089f4 <vTaskDelay>
				lcd_clear();
 80022f0:	f7fe fd50 	bl	8000d94 <HD44780_Clear>
				break;
 80022f4:	bf00      	nop
		}
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80022f6:	2000      	movs	r0, #0
 80022f8:	f007 fb28 	bl	800994c <uxTaskGetStackHighWaterMark>
 80022fc:	64f8      	str	r0, [r7, #76]	; 0x4c
		if(strcmp(display.linea1,"\0") != 0) strcpy(lastRow1, display.linea1);
 80022fe:	e713      	b.n	8002128 <t_Display+0x10>
 8002300:	20000394 	.word	0x20000394
 8002304:	0800cf90 	.word	0x0800cf90
 8002308:	0800cfa4 	.word	0x0800cfa4

0800230c <t_Flash>:
}

//flash----------------------------------------------------------------------------------------------------------------------------------------------------------------------


static void t_Flash (void *pvParameters){
 800230c:	b580      	push	{r7, lr}
 800230e:	b0aa      	sub	sp, #168	; 0xa8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	 * la mitad de FLASH_BUFFER_SIZE sera el numero maximo de usuarios permitidos. FLASH_BUFFER_SIZE debe ser un numero par.
	 * el maximo teorico de usuarios pemitidos es 512 (la mitad del tamaño de una pagina de la memoria flash)
	 *
	 */

	uint32_t index = 0, nroUsuario;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	usuario_t value;
	uint32_t buffer[FLASH_BUFFER_SIZE];

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800231a:	2000      	movs	r0, #0
 800231c:	f007 fb16 	bl	800994c <uxTaskGetStackHighWaterMark>
 8002320:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	for(;;){
		xQueueReceive(flashcmd_q, &value, blockForever);
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <t_Flash+0xf8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	4618      	mov	r0, r3
 8002332:	f005 ff63 	bl	80081fc <xQueueReceive>
		switch(value.accion){
 8002336:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <t_Flash+0x38>
 800233e:	2b01      	cmp	r3, #1
 8002340:	d02c      	beq.n	800239c <t_Flash+0x90>
			buffer[index + 1] = value.clave;					//se escrive el codigo en el indice impar

			Flash_Write_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
			break;
		default:
			break;
 8002342:	e058      	b.n	80023f6 <t_Flash+0xea>
			index = (2 * (value.nroUsuario));							//se calcula el indice del usuario solicitado
 8002344:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			Flash_Read_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);	//se realiza la lectura de la memoria
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	2220      	movs	r2, #32
 8002354:	4619      	mov	r1, r3
 8002356:	482c      	ldr	r0, [pc, #176]	; (8002408 <t_Flash+0xfc>)
 8002358:	f7fe fc10 	bl	8000b7c <Flash_Read_Data>
			value.nroUsuario = buffer[index];								//se asigna a la estructura el nro de usuario, si esta vacio se asigna "SIN_ASIGNAR"
 800235c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002366:	4413      	add	r3, r2
 8002368:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			value.clave = buffer[index + 1];								//se asigna a la estructura de usuario la clave correspondiente
 8002372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002376:	3301      	adds	r3, #1
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800237e:	4413      	add	r3, r2
 8002380:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8002384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			xQueueSend(flashdata_q,&value,blockForever);
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <t_Flash+0x100>)
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002390:	2300      	movs	r3, #0
 8002392:	f04f 32ff 	mov.w	r2, #4294967295
 8002396:	f005 fd81 	bl	8007e9c <xQueueGenericSend>
			break;
 800239a:	e02c      	b.n	80023f6 <t_Flash+0xea>
			index = (value.nroUsuario)*2;
 800239c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			nroUsuario = value.nroUsuario;
 80023a6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80023aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			Flash_Read_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	2220      	movs	r2, #32
 80023b4:	4619      	mov	r1, r3
 80023b6:	4814      	ldr	r0, [pc, #80]	; (8002408 <t_Flash+0xfc>)
 80023b8:	f7fe fbe0 	bl	8000b7c <Flash_Read_Data>
			buffer[index] = nroUsuario;				//se escrive el numero de usuario en el indice par
 80023bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023c6:	4413      	add	r3, r2
 80023c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80023cc:	f843 2c9c 	str.w	r2, [r3, #-156]
			buffer[index + 1] = value.clave;					//se escrive el codigo en el indice impar
 80023d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023d4:	3301      	adds	r3, #1
 80023d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80023e0:	440b      	add	r3, r1
 80023e2:	f843 2c9c 	str.w	r2, [r3, #-156]
			Flash_Write_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2220      	movs	r2, #32
 80023ec:	4619      	mov	r1, r3
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <t_Flash+0xfc>)
 80023f0:	f7fe fb6a 	bl	8000ac8 <Flash_Write_Data>
			break;
 80023f4:	bf00      	nop
		}
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80023f6:	2000      	movs	r0, #0
 80023f8:	f007 faa8 	bl	800994c <uxTaskGetStackHighWaterMark>
 80023fc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		xQueueReceive(flashcmd_q, &value, blockForever);
 8002400:	e790      	b.n	8002324 <t_Flash+0x18>
 8002402:	bf00      	nop
 8002404:	2000027c 	.word	0x2000027c
 8002408:	0801fc00 	.word	0x0801fc00
 800240c:	20000280 	.word	0x20000280

08002410 <t_ControlAcceso>:
	}
}

//control de acceso----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_ControlAcceso (void *pvParameters){
 8002410:	b580      	push	{r7, lr}
 8002412:	b0b8      	sub	sp, #224	; 0xe0
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	usuario_t usuario[CANT_MAX_USUARIOS], usuarioAux;
	nroUsuario_t nroUsuario;
	actuador_t actuador;

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002418:	2000      	movs	r0, #0
 800241a:	f007 fa97 	bl	800994c <uxTaskGetStackHighWaterMark>
 800241e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002428:	e00d      	b.n	8002446 <t_ControlAcceso+0x36>
		usuario[i].intentosDisp = CANT_MAX_INTENTOS;
 800242a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002434:	4413      	add	r3, r2
 8002436:	3bb8      	subs	r3, #184	; 0xb8
 8002438:	2203      	movs	r2, #3
 800243a:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 800243c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002440:	3301      	adds	r3, #1
 8002442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800244a:	2b0a      	cmp	r3, #10
 800244c:	d9ed      	bls.n	800242a <t_ControlAcceso+0x1a>
	}

	for(;;){
		if(xQueueReceive(reqAcceso_q, &usuarioAux, blockForever) == pdPASS){
 800244e:	4bd4      	ldr	r3, [pc, #848]	; (80027a0 <t_ControlAcceso+0x390>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f107 0110 	add.w	r1, r7, #16
 8002456:	f04f 32ff 	mov.w	r2, #4294967295
 800245a:	4618      	mov	r0, r3
 800245c:	f005 fece 	bl	80081fc <xQueueReceive>
 8002460:	4603      	mov	r3, r0
 8002462:	2b01      	cmp	r3, #1
 8002464:	f040 8260 	bne.w	8002928 <t_ControlAcceso+0x518>

			nroUsuario = usuarioAux.nroUsuario;
 8002468:	7c7b      	ldrb	r3, [r7, #17]
 800246a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
			usuario[nroUsuario].nroUsuario = usuarioAux.nroUsuario;
 800246e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002472:	7c7a      	ldrb	r2, [r7, #17]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800247a:	440b      	add	r3, r1
 800247c:	3bbf      	subs	r3, #191	; 0xbf
 800247e:	701a      	strb	r2, [r3, #0]
			usuario[nroUsuario].clave = usuarioAux.clave;
 8002480:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800248c:	440b      	add	r3, r1
 800248e:	3bbc      	subs	r3, #188	; 0xbc
 8002490:	601a      	str	r2, [r3, #0]
			usuario[nroUsuario].accion = usuarioAux.accion;
 8002492:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002496:	7c3a      	ldrb	r2, [r7, #16]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800249e:	440b      	add	r3, r1
 80024a0:	3bc0      	subs	r3, #192	; 0xc0
 80024a2:	701a      	strb	r2, [r3, #0]

			switch(usuario[nroUsuario].accion){
 80024a4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80024ae:	4413      	add	r3, r2
 80024b0:	3bc0      	subs	r3, #192	; 0xc0
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f000 81db 	beq.w	8002870 <t_ControlAcceso+0x460>
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f300 8236 	bgt.w	800292c <t_ControlAcceso+0x51c>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <t_ControlAcceso+0xbc>
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f000 81c5 	beq.w	8002854 <t_ControlAcceso+0x444>
#ifdef EGB
					xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
#endif
					break;
				default:
					break;
 80024ca:	e22f      	b.n	800292c <t_ControlAcceso+0x51c>
					if(nroUsuario == MAESTRO){
 80024cc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 8095 	bne.w	8002600 <t_ControlAcceso+0x1f0>
						usuario[nroUsuario].accion = READ;
 80024d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80024e0:	4413      	add	r3, r2
 80024e2:	3bc0      	subs	r3, #192	; 0xc0
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
						xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 80024e8:	4bae      	ldr	r3, [pc, #696]	; (80027a4 <t_ControlAcceso+0x394>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80024f0:	f107 0220 	add.w	r2, r7, #32
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	18d1      	adds	r1, r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	f04f 32ff 	mov.w	r2, #4294967295
 80024fe:	f005 fccd 	bl	8007e9c <xQueueGenericSend>
						xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 8002502:	4ba9      	ldr	r3, [pc, #676]	; (80027a8 <t_ControlAcceso+0x398>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f107 0110 	add.w	r1, r7, #16
 800250a:	f04f 32ff 	mov.w	r2, #4294967295
 800250e:	4618      	mov	r0, r3
 8002510:	f005 fe74 	bl	80081fc <xQueueReceive>
						if(usuarioAux.clave == usuario[nroUsuario].clave){
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002520:	440b      	add	r3, r1
 8002522:	3bbc      	subs	r3, #188	; 0xbc
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d123      	bne.n	8002572 <t_ControlAcceso+0x162>
							usuario[nroUsuario].accion = ACC_OK;
 800252a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002534:	4413      	add	r3, r2
 8002536:	3bc0      	subs	r3, #192	; 0xc0
 8002538:	2205      	movs	r2, #5
 800253a:	701a      	strb	r2, [r3, #0]
							actuador.tipo = PUERTA;
 800253c:	2301      	movs	r3, #1
 800253e:	723b      	strb	r3, [r7, #8]
							actuador.accion = ACC_MASTER;
 8002540:	230c      	movs	r3, #12
 8002542:	727b      	strb	r3, [r7, #9]
							for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800254a:	e00d      	b.n	8002568 <t_ControlAcceso+0x158>
								usuario[i].intentosDisp = CANT_MAX_INTENTOS;
 800254c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002556:	4413      	add	r3, r2
 8002558:	3bb8      	subs	r3, #184	; 0xb8
 800255a:	2203      	movs	r2, #3
 800255c:	601a      	str	r2, [r3, #0]
							for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 800255e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002562:	3301      	adds	r3, #1
 8002564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800256c:	2b0a      	cmp	r3, #10
 800256e:	d9ed      	bls.n	800254c <t_ControlAcceso+0x13c>
 8002570:	e008      	b.n	8002584 <t_ControlAcceso+0x174>
							usuario[nroUsuario].accion = ACC_ERROR;
 8002572:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800257c:	4413      	add	r3, r2
 800257e:	3bc0      	subs	r3, #192	; 0xc0
 8002580:	2207      	movs	r2, #7
 8002582:	701a      	strb	r2, [r3, #0]
						actuador.id = global_id++;
 8002584:	4b89      	ldr	r3, [pc, #548]	; (80027ac <t_ControlAcceso+0x39c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	4988      	ldr	r1, [pc, #544]	; (80027ac <t_ControlAcceso+0x39c>)
 800258c:	600a      	str	r2, [r1, #0]
 800258e:	60fb      	str	r3, [r7, #12]
						xQueueSend(actuador_q, &actuador, blockForever);
 8002590:	4b87      	ldr	r3, [pc, #540]	; (80027b0 <t_ControlAcceso+0x3a0>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	f107 0108 	add.w	r1, r7, #8
 8002598:	2300      	movs	r3, #0
 800259a:	f04f 32ff 	mov.w	r2, #4294967295
 800259e:	f005 fc7d 	bl	8007e9c <xQueueGenericSend>
						xQueueSendToBack(actuador_aux_q, &actuador, nonBlocking);
 80025a2:	4b84      	ldr	r3, [pc, #528]	; (80027b4 <t_ControlAcceso+0x3a4>)
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	f107 0108 	add.w	r1, r7, #8
 80025aa:	2300      	movs	r3, #0
 80025ac:	2200      	movs	r2, #0
 80025ae:	f005 fc75 	bl	8007e9c <xQueueGenericSend>
						usuario[nroUsuario].id = global_id++;
 80025b2:	4b7e      	ldr	r3, [pc, #504]	; (80027ac <t_ControlAcceso+0x39c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	497c      	ldr	r1, [pc, #496]	; (80027ac <t_ControlAcceso+0x39c>)
 80025ba:	600a      	str	r2, [r1, #0]
 80025bc:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80025c6:	440a      	add	r2, r1
 80025c8:	3ab4      	subs	r2, #180	; 0xb4
 80025ca:	6013      	str	r3, [r2, #0]
						xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 80025cc:	4b7a      	ldr	r3, [pc, #488]	; (80027b8 <t_ControlAcceso+0x3a8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80025d4:	f107 0220 	add.w	r2, r7, #32
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	18d1      	adds	r1, r2, r3
 80025dc:	2300      	movs	r3, #0
 80025de:	f04f 32ff 	mov.w	r2, #4294967295
 80025e2:	f005 fc5b 	bl	8007e9c <xQueueGenericSend>
						xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
 80025e6:	4b75      	ldr	r3, [pc, #468]	; (80027bc <t_ControlAcceso+0x3ac>)
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80025ee:	f107 0220 	add.w	r2, r7, #32
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	18d1      	adds	r1, r2, r3
 80025f6:	2300      	movs	r3, #0
 80025f8:	2200      	movs	r2, #0
 80025fa:	f005 fc4f 	bl	8007e9c <xQueueGenericSend>
					break;
 80025fe:	e197      	b.n	8002930 <t_ControlAcceso+0x520>
					else if(nroUsuario != MAESTRO && nroUsuario != SIN_ASIGNAR){
 8002600:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8193 	beq.w	8002930 <t_ControlAcceso+0x520>
 800260a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800260e:	2b0b      	cmp	r3, #11
 8002610:	f000 818e 	beq.w	8002930 <t_ControlAcceso+0x520>
						if(usuario[nroUsuario].intentosDisp != SIN_INTENTOS_DISP){
 8002614:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800261e:	4413      	add	r3, r2
 8002620:	3bb8      	subs	r3, #184	; 0xb8
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80cb 	beq.w	80027c0 <t_ControlAcceso+0x3b0>
							usuario[nroUsuario].accion = READ;
 800262a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002634:	4413      	add	r3, r2
 8002636:	3bc0      	subs	r3, #192	; 0xc0
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
							xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <t_ControlAcceso+0x394>)
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002644:	f107 0220 	add.w	r2, r7, #32
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	18d1      	adds	r1, r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	f04f 32ff 	mov.w	r2, #4294967295
 8002652:	f005 fc23 	bl	8007e9c <xQueueGenericSend>
							xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <t_ControlAcceso+0x398>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f107 0110 	add.w	r1, r7, #16
 800265e:	f04f 32ff 	mov.w	r2, #4294967295
 8002662:	4618      	mov	r0, r3
 8002664:	f005 fdca 	bl	80081fc <xQueueReceive>
							if(usuarioAux.clave == usuario[nroUsuario].clave){
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002674:	440b      	add	r3, r1
 8002676:	3bbc      	subs	r3, #188	; 0xbc
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d12d      	bne.n	80026da <t_ControlAcceso+0x2ca>
								usuario[nroUsuario].accion = ACC_OK;
 800267e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002688:	4413      	add	r3, r2
 800268a:	3bc0      	subs	r3, #192	; 0xc0
 800268c:	2205      	movs	r2, #5
 800268e:	701a      	strb	r2, [r3, #0]
								actuador.tipo = PUERTA;
 8002690:	2301      	movs	r3, #1
 8002692:	723b      	strb	r3, [r7, #8]
								actuador.accion = ACC_OK;
 8002694:	2305      	movs	r3, #5
 8002696:	727b      	strb	r3, [r7, #9]
								usuario[nroUsuario].intentosDisp = CANT_MAX_INTENTOS;
 8002698:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80026a2:	4413      	add	r3, r2
 80026a4:	3bb8      	subs	r3, #184	; 0xb8
 80026a6:	2203      	movs	r2, #3
 80026a8:	601a      	str	r2, [r3, #0]
								actuador.id = global_id++;
 80026aa:	4b40      	ldr	r3, [pc, #256]	; (80027ac <t_ControlAcceso+0x39c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	493e      	ldr	r1, [pc, #248]	; (80027ac <t_ControlAcceso+0x39c>)
 80026b2:	600a      	str	r2, [r1, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
								xQueueSend(actuador_q, &actuador, blockForever);
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <t_ControlAcceso+0x3a0>)
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	f107 0108 	add.w	r1, r7, #8
 80026be:	2300      	movs	r3, #0
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	f005 fbea 	bl	8007e9c <xQueueGenericSend>
								xQueueSendToBack(actuador_aux_q, &actuador, nonBlocking);
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <t_ControlAcceso+0x3a4>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	f107 0108 	add.w	r1, r7, #8
 80026d0:	2300      	movs	r3, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	f005 fbe2 	bl	8007e9c <xQueueGenericSend>
 80026d8:	e03b      	b.n	8002752 <t_ControlAcceso+0x342>
								usuario[nroUsuario].accion = ACC_DENEGADO;
 80026da:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80026e4:	4413      	add	r3, r2
 80026e6:	3bc0      	subs	r3, #192	; 0xc0
 80026e8:	2206      	movs	r2, #6
 80026ea:	701a      	strb	r2, [r3, #0]
								usuario[nroUsuario].intentosDisp--;
 80026ec:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026f0:	011a      	lsls	r2, r3, #4
 80026f2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80026f6:	440a      	add	r2, r1
 80026f8:	3ab8      	subs	r2, #184	; 0xb8
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	3a01      	subs	r2, #1
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002704:	440b      	add	r3, r1
 8002706:	3bb8      	subs	r3, #184	; 0xb8
 8002708:	601a      	str	r2, [r3, #0]
								if(usuario[nroUsuario].intentosDisp == SIN_INTENTOS_DISP){
 800270a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002714:	4413      	add	r3, r2
 8002716:	3bb8      	subs	r3, #184	; 0xb8
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d119      	bne.n	8002752 <t_ControlAcceso+0x342>
									actuador.tipo = PUERTA;
 800271e:	2301      	movs	r3, #1
 8002720:	723b      	strb	r3, [r7, #8]
									actuador.accion = ACC_DENEGADO;
 8002722:	2306      	movs	r3, #6
 8002724:	727b      	strb	r3, [r7, #9]
									actuador.id = global_id++;
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <t_ControlAcceso+0x39c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	491f      	ldr	r1, [pc, #124]	; (80027ac <t_ControlAcceso+0x39c>)
 800272e:	600a      	str	r2, [r1, #0]
 8002730:	60fb      	str	r3, [r7, #12]
									xQueueSend(actuador_q, &actuador, nonBlocking);
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <t_ControlAcceso+0x3a0>)
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	f107 0108 	add.w	r1, r7, #8
 800273a:	2300      	movs	r3, #0
 800273c:	2200      	movs	r2, #0
 800273e:	f005 fbad 	bl	8007e9c <xQueueGenericSend>
									xQueueSendToBack(actuador_aux_q, &actuador, nonBlocking);
 8002742:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <t_ControlAcceso+0x3a4>)
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	f107 0108 	add.w	r1, r7, #8
 800274a:	2300      	movs	r3, #0
 800274c:	2200      	movs	r2, #0
 800274e:	f005 fba5 	bl	8007e9c <xQueueGenericSend>
							usuario[nroUsuario].id = global_id++;
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <t_ControlAcceso+0x39c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	4914      	ldr	r1, [pc, #80]	; (80027ac <t_ControlAcceso+0x39c>)
 800275a:	600a      	str	r2, [r1, #0]
 800275c:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002766:	440a      	add	r2, r1
 8002768:	3ab4      	subs	r2, #180	; 0xb4
 800276a:	6013      	str	r3, [r2, #0]
							xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <t_ControlAcceso+0x3a8>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002774:	f107 0220 	add.w	r2, r7, #32
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	18d1      	adds	r1, r2, r3
 800277c:	2300      	movs	r3, #0
 800277e:	f04f 32ff 	mov.w	r2, #4294967295
 8002782:	f005 fb8b 	bl	8007e9c <xQueueGenericSend>
							xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <t_ControlAcceso+0x3ac>)
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800278e:	f107 0220 	add.w	r2, r7, #32
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	18d1      	adds	r1, r2, r3
 8002796:	2300      	movs	r3, #0
 8002798:	2200      	movs	r2, #0
 800279a:	f005 fb7f 	bl	8007e9c <xQueueGenericSend>
					break;
 800279e:	e0c7      	b.n	8002930 <t_ControlAcceso+0x520>
 80027a0:	20000284 	.word	0x20000284
 80027a4:	2000027c 	.word	0x2000027c
 80027a8:	20000280 	.word	0x20000280
 80027ac:	20000110 	.word	0x20000110
 80027b0:	20000388 	.word	0x20000388
 80027b4:	20000330 	.word	0x20000330
 80027b8:	2000038c 	.word	0x2000038c
 80027bc:	20000390 	.word	0x20000390
							usuario[nroUsuario].accion = ACC_DENEGADO;
 80027c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80027ca:	4413      	add	r3, r2
 80027cc:	3bc0      	subs	r3, #192	; 0xc0
 80027ce:	2206      	movs	r2, #6
 80027d0:	701a      	strb	r2, [r3, #0]
							actuador.tipo = PUERTA;
 80027d2:	2301      	movs	r3, #1
 80027d4:	723b      	strb	r3, [r7, #8]
							actuador.accion = ACC_DENEGADO;
 80027d6:	2306      	movs	r3, #6
 80027d8:	727b      	strb	r3, [r7, #9]
							actuador.id = global_id++;
 80027da:	4b59      	ldr	r3, [pc, #356]	; (8002940 <t_ControlAcceso+0x530>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	4957      	ldr	r1, [pc, #348]	; (8002940 <t_ControlAcceso+0x530>)
 80027e2:	600a      	str	r2, [r1, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
							xQueueSend(actuador_q, &actuador, nonBlocking);
 80027e6:	4b57      	ldr	r3, [pc, #348]	; (8002944 <t_ControlAcceso+0x534>)
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	f107 0108 	add.w	r1, r7, #8
 80027ee:	2300      	movs	r3, #0
 80027f0:	2200      	movs	r2, #0
 80027f2:	f005 fb53 	bl	8007e9c <xQueueGenericSend>
							xQueueSendToBack(actuador_aux_q, &actuador, nonBlocking);
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <t_ControlAcceso+0x538>)
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	f107 0108 	add.w	r1, r7, #8
 80027fe:	2300      	movs	r3, #0
 8002800:	2200      	movs	r2, #0
 8002802:	f005 fb4b 	bl	8007e9c <xQueueGenericSend>
							usuario[nroUsuario].id = global_id++;
 8002806:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <t_ControlAcceso+0x530>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	494c      	ldr	r1, [pc, #304]	; (8002940 <t_ControlAcceso+0x530>)
 800280e:	600a      	str	r2, [r1, #0]
 8002810:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800281a:	440a      	add	r2, r1
 800281c:	3ab4      	subs	r2, #180	; 0xb4
 800281e:	6013      	str	r3, [r2, #0]
							xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 8002820:	4b4a      	ldr	r3, [pc, #296]	; (800294c <t_ControlAcceso+0x53c>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002828:	f107 0220 	add.w	r2, r7, #32
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	18d1      	adds	r1, r2, r3
 8002830:	2300      	movs	r3, #0
 8002832:	f04f 32ff 	mov.w	r2, #4294967295
 8002836:	f005 fb31 	bl	8007e9c <xQueueGenericSend>
							xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
 800283a:	4b45      	ldr	r3, [pc, #276]	; (8002950 <t_ControlAcceso+0x540>)
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002842:	f107 0220 	add.w	r2, r7, #32
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	18d1      	adds	r1, r2, r3
 800284a:	2300      	movs	r3, #0
 800284c:	2200      	movs	r2, #0
 800284e:	f005 fb25 	bl	8007e9c <xQueueGenericSend>
					break;
 8002852:	e06d      	b.n	8002930 <t_ControlAcceso+0x520>
					xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 8002854:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <t_ControlAcceso+0x544>)
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800285c:	f107 0220 	add.w	r2, r7, #32
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	18d1      	adds	r1, r2, r3
 8002864:	2300      	movs	r3, #0
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	f005 fb17 	bl	8007e9c <xQueueGenericSend>
					break;
 800286e:	e060      	b.n	8002932 <t_ControlAcceso+0x522>
					usuario[nroUsuario].accion = READ;
 8002870:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800287a:	4413      	add	r3, r2
 800287c:	3bc0      	subs	r3, #192	; 0xc0
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
					xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 8002882:	4b34      	ldr	r3, [pc, #208]	; (8002954 <t_ControlAcceso+0x544>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800288a:	f107 0220 	add.w	r2, r7, #32
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	18d1      	adds	r1, r2, r3
 8002892:	2300      	movs	r3, #0
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	f005 fb00 	bl	8007e9c <xQueueGenericSend>
					xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 800289c:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <t_ControlAcceso+0x548>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f107 0110 	add.w	r1, r7, #16
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	4618      	mov	r0, r3
 80028aa:	f005 fca7 	bl	80081fc <xQueueReceive>
					if(usuarioAux.clave == 0)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <t_ControlAcceso+0x4b8>
						usuario[nroUsuario].accion = ACC_SIN_ASIGNAR;
 80028b4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80028be:	4413      	add	r3, r2
 80028c0:	3bc0      	subs	r3, #192	; 0xc0
 80028c2:	220a      	movs	r2, #10
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e008      	b.n	80028da <t_ControlAcceso+0x4ca>
						usuario[nroUsuario].accion = ACC_ASIGNADO;
 80028c8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80028d2:	4413      	add	r3, r2
 80028d4:	3bc0      	subs	r3, #192	; 0xc0
 80028d6:	220b      	movs	r2, #11
 80028d8:	701a      	strb	r2, [r3, #0]
					usuario[nroUsuario].id = global_id++;
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <t_ControlAcceso+0x530>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	4917      	ldr	r1, [pc, #92]	; (8002940 <t_ControlAcceso+0x530>)
 80028e2:	600a      	str	r2, [r1, #0]
 80028e4:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80028ee:	440a      	add	r2, r1
 80028f0:	3ab4      	subs	r2, #180	; 0xb4
 80028f2:	6013      	str	r3, [r2, #0]
					xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <t_ControlAcceso+0x53c>)
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80028fc:	f107 0220 	add.w	r2, r7, #32
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	18d1      	adds	r1, r2, r3
 8002904:	2300      	movs	r3, #0
 8002906:	f04f 32ff 	mov.w	r2, #4294967295
 800290a:	f005 fac7 	bl	8007e9c <xQueueGenericSend>
					xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <t_ControlAcceso+0x540>)
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002916:	f107 0220 	add.w	r2, r7, #32
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	18d1      	adds	r1, r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	2200      	movs	r2, #0
 8002922:	f005 fabb 	bl	8007e9c <xQueueGenericSend>
					break;
 8002926:	e004      	b.n	8002932 <t_ControlAcceso+0x522>
			}
		}
 8002928:	bf00      	nop
 800292a:	e002      	b.n	8002932 <t_ControlAcceso+0x522>
					break;
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <t_ControlAcceso+0x522>
					break;
 8002930:	bf00      	nop
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002932:	2000      	movs	r0, #0
 8002934:	f007 f80a 	bl	800994c <uxTaskGetStackHighWaterMark>
 8002938:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if(xQueueReceive(reqAcceso_q, &usuarioAux, blockForever) == pdPASS){
 800293c:	e587      	b.n	800244e <t_ControlAcceso+0x3e>
 800293e:	bf00      	nop
 8002940:	20000110 	.word	0x20000110
 8002944:	20000388 	.word	0x20000388
 8002948:	20000330 	.word	0x20000330
 800294c:	2000038c 	.word	0x2000038c
 8002950:	20000390 	.word	0x20000390
 8002954:	2000027c 	.word	0x2000027c
 8002958:	20000280 	.word	0x20000280

0800295c <t_Actuadores>:
	}
}

//actuadores----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Actuadores (void *pvParameters){
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	actuador_t actuador;
	accion_t acceso = ACC_DENEGADO;
 8002964:	2306      	movs	r3, #6
 8002966:	75fb      	strb	r3, [r7, #23]

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002968:	2000      	movs	r0, #0
 800296a:	f006 ffef 	bl	800994c <uxTaskGetStackHighWaterMark>
 800296e:	6138      	str	r0, [r7, #16]

	for(;;){
		xQueueReceive(actuador_q, &actuador, blockForever);
 8002970:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <t_Actuadores+0x19c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f107 0108 	add.w	r1, r7, #8
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	4618      	mov	r0, r3
 800297e:	f005 fc3d 	bl	80081fc <xQueueReceive>
		if(actuador.tipo == PUERTA){
 8002982:	7a3b      	ldrb	r3, [r7, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 80ac 	bne.w	8002ae2 <t_Actuadores+0x186>
			switch (actuador.accion){
 800298a:	7a7b      	ldrb	r3, [r7, #9]
 800298c:	3b05      	subs	r3, #5
 800298e:	2b08      	cmp	r3, #8
 8002990:	f200 80a9 	bhi.w	8002ae6 <t_Actuadores+0x18a>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <t_Actuadores+0x40>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029c1 	.word	0x080029c1
 80029a0:	08002a2b 	.word	0x08002a2b
 80029a4:	08002ae7 	.word	0x08002ae7
 80029a8:	08002ae7 	.word	0x08002ae7
 80029ac:	08002ae7 	.word	0x08002ae7
 80029b0:	08002ae7 	.word	0x08002ae7
 80029b4:	08002ae7 	.word	0x08002ae7
 80029b8:	08002a49 	.word	0x08002a49
 80029bc:	08002a7f 	.word	0x08002a7f
				case ACC_OK:
					acceso = ACC_OK;
 80029c0:	2305      	movs	r3, #5
 80029c2:	75fb      	strb	r3, [r7, #23]
					hal_digitalOutput(LOW, ledVerde);
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ca:	484c      	ldr	r0, [pc, #304]	; (8002afc <t_Actuadores+0x1a0>)
 80029cc:	f001 fe61 	bl	8004692 <HAL_GPIO_WritePin>
					hal_digitalOutput(HIGH, acPuerta);
 80029d0:	2201      	movs	r2, #1
 80029d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029d6:	4849      	ldr	r0, [pc, #292]	; (8002afc <t_Actuadores+0x1a0>)
 80029d8:	f001 fe5b 	bl	8004692 <HAL_GPIO_WritePin>
					vTaskDelay(sleep_10s);
 80029dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80029e0:	f006 f808 	bl	80089f4 <vTaskDelay>
					if(hal_digitalInput(PA) == LOW){
 80029e4:	2102      	movs	r1, #2
 80029e6:	4845      	ldr	r0, [pc, #276]	; (8002afc <t_Actuadores+0x1a0>)
 80029e8:	f001 fe3c 	bl	8004664 <HAL_GPIO_ReadPin>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10c      	bne.n	8002a0c <t_Actuadores+0xb0>
						hal_digitalOutput(LOW, ledRojo);
 80029f2:	2200      	movs	r2, #0
 80029f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029f8:	4840      	ldr	r0, [pc, #256]	; (8002afc <t_Actuadores+0x1a0>)
 80029fa:	f001 fe4a 	bl	8004692 <HAL_GPIO_WritePin>
						hal_digitalOutput(HIGH, acAlarma);
 80029fe:	2201      	movs	r2, #1
 8002a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a04:	483d      	ldr	r0, [pc, #244]	; (8002afc <t_Actuadores+0x1a0>)
 8002a06:	f001 fe44 	bl	8004692 <HAL_GPIO_WritePin>
 8002a0a:	e00b      	b.n	8002a24 <t_Actuadores+0xc8>
					}
					else{
						hal_digitalOutput(HIGH, ledVerde);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a12:	483a      	ldr	r0, [pc, #232]	; (8002afc <t_Actuadores+0x1a0>)
 8002a14:	f001 fe3d 	bl	8004692 <HAL_GPIO_WritePin>
						hal_digitalOutput(LOW, acPuerta);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a1e:	4837      	ldr	r0, [pc, #220]	; (8002afc <t_Actuadores+0x1a0>)
 8002a20:	f001 fe37 	bl	8004692 <HAL_GPIO_WritePin>
					}
					acceso = ACC_DENEGADO;
 8002a24:	2306      	movs	r3, #6
 8002a26:	75fb      	strb	r3, [r7, #23]
					break;
 8002a28:	e060      	b.n	8002aec <t_Actuadores+0x190>
				case ACC_DENEGADO:
					acceso = ACC_DENEGADO;
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	75fb      	strb	r3, [r7, #23]
					hal_digitalOutput(LOW, ledRojo);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a34:	4831      	ldr	r0, [pc, #196]	; (8002afc <t_Actuadores+0x1a0>)
 8002a36:	f001 fe2c 	bl	8004692 <HAL_GPIO_WritePin>
					hal_digitalOutput(HIGH, acAlarma);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a40:	482e      	ldr	r0, [pc, #184]	; (8002afc <t_Actuadores+0x1a0>)
 8002a42:	f001 fe26 	bl	8004692 <HAL_GPIO_WritePin>
//					vTaskDelay(sleep_10s);
//					hal_digitalOutput(HIGH, ledRojo);
//					hal_digitalOutput(LOW, acAlarma);
					break;
 8002a46:	e051      	b.n	8002aec <t_Actuadores+0x190>
				case ACC_MASTER:
					acceso = ACC_OK;
 8002a48:	2305      	movs	r3, #5
 8002a4a:	75fb      	strb	r3, [r7, #23]
					hal_digitalOutput(HIGH, ledRojo);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a52:	482a      	ldr	r0, [pc, #168]	; (8002afc <t_Actuadores+0x1a0>)
 8002a54:	f001 fe1d 	bl	8004692 <HAL_GPIO_WritePin>
					hal_digitalOutput(LOW, acAlarma);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5e:	4827      	ldr	r0, [pc, #156]	; (8002afc <t_Actuadores+0x1a0>)
 8002a60:	f001 fe17 	bl	8004692 <HAL_GPIO_WritePin>
					hal_digitalOutput(LOW, ledVerde);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a6a:	4824      	ldr	r0, [pc, #144]	; (8002afc <t_Actuadores+0x1a0>)
 8002a6c:	f001 fe11 	bl	8004692 <HAL_GPIO_WritePin>
					hal_digitalOutput(HIGH, acPuerta);
 8002a70:	2201      	movs	r2, #1
 8002a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a76:	4821      	ldr	r0, [pc, #132]	; (8002afc <t_Actuadores+0x1a0>)
 8002a78:	f001 fe0b 	bl	8004692 <HAL_GPIO_WritePin>
//					}
//					else{
//						hal_digitalOutput(HIGH, ledVerde);
//						hal_digitalOutput(LOW, acPuerta);
//					}
					break;
 8002a7c:	e036      	b.n	8002aec <t_Actuadores+0x190>
				case CAMBIO_ESTADO:
					vTaskDelay(sleep_100ms);
 8002a7e:	2064      	movs	r0, #100	; 0x64
 8002a80:	f005 ffb8 	bl	80089f4 <vTaskDelay>
					if(hal_digitalInput(PA) == LOW){
 8002a84:	2102      	movs	r1, #2
 8002a86:	481d      	ldr	r0, [pc, #116]	; (8002afc <t_Actuadores+0x1a0>)
 8002a88:	f001 fdec 	bl	8004664 <HAL_GPIO_ReadPin>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10f      	bne.n	8002ab2 <t_Actuadores+0x156>
						if(acceso == ACC_DENEGADO){
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d128      	bne.n	8002aea <t_Actuadores+0x18e>
							hal_digitalOutput(LOW, ledRojo);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a9e:	4817      	ldr	r0, [pc, #92]	; (8002afc <t_Actuadores+0x1a0>)
 8002aa0:	f001 fdf7 	bl	8004692 <HAL_GPIO_WritePin>
							hal_digitalOutput(HIGH, acAlarma);
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aaa:	4814      	ldr	r0, [pc, #80]	; (8002afc <t_Actuadores+0x1a0>)
 8002aac:	f001 fdf1 	bl	8004692 <HAL_GPIO_WritePin>
							hal_digitalOutput(LOW, acAlarma);
							hal_digitalOutput(HIGH, ledVerde);

						}
					}
					break;
 8002ab0:	e01b      	b.n	8002aea <t_Actuadores+0x18e>
						if(acceso == ACC_OK){
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d118      	bne.n	8002aea <t_Actuadores+0x18e>
							acceso = ACC_DENEGADO;
 8002ab8:	2306      	movs	r3, #6
 8002aba:	75fb      	strb	r3, [r7, #23]
							hal_digitalOutput(HIGH, ledRojo);
 8002abc:	2201      	movs	r2, #1
 8002abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ac2:	480e      	ldr	r0, [pc, #56]	; (8002afc <t_Actuadores+0x1a0>)
 8002ac4:	f001 fde5 	bl	8004692 <HAL_GPIO_WritePin>
							hal_digitalOutput(LOW, acAlarma);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ace:	480b      	ldr	r0, [pc, #44]	; (8002afc <t_Actuadores+0x1a0>)
 8002ad0:	f001 fddf 	bl	8004692 <HAL_GPIO_WritePin>
							hal_digitalOutput(HIGH, ledVerde);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <t_Actuadores+0x1a0>)
 8002adc:	f001 fdd9 	bl	8004692 <HAL_GPIO_WritePin>
					break;
 8002ae0:	e003      	b.n	8002aea <t_Actuadores+0x18e>
				default:
					break;
			}
		}
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <t_Actuadores+0x190>
					break;
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <t_Actuadores+0x190>
					break;
 8002aea:	bf00      	nop
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002aec:	2000      	movs	r0, #0
 8002aee:	f006 ff2d 	bl	800994c <uxTaskGetStackHighWaterMark>
 8002af2:	6138      	str	r0, [r7, #16]
		xQueueReceive(actuador_q, &actuador, blockForever);
 8002af4:	e73c      	b.n	8002970 <t_Actuadores+0x14>
 8002af6:	bf00      	nop
 8002af8:	20000388 	.word	0x20000388
 8002afc:	40010c00 	.word	0x40010c00

08002b00 <t_Teclado>:
	}
}

//teclado----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Teclado (void *pvParameters){
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b08b      	sub	sp, #44	; 0x2c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	columna_t columna;
	fila_t fila;
	tecla_t tecla;
	uint8_t teclado[4][4] = {{1,4,7,MENU},{2,5,8,0},{3,6,9,ACEPTAR},{MAESTRA,ARRIBA,ABAJO,CANCELAR}};
 8002b08:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <t_Teclado+0x1d4>)
 8002b0a:	f107 040c 	add.w	r4, r7, #12
 8002b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002b14:	2000      	movs	r0, #0
 8002b16:	f006 ff19 	bl	800994c <uxTaskGetStackHighWaterMark>
 8002b1a:	6238      	str	r0, [r7, #32]

	hal_digitalOutput(LOW, fil1);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2110      	movs	r1, #16
 8002b20:	486d      	ldr	r0, [pc, #436]	; (8002cd8 <t_Teclado+0x1d8>)
 8002b22:	f001 fdb6 	bl	8004692 <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil2);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2108      	movs	r1, #8
 8002b2a:	486b      	ldr	r0, [pc, #428]	; (8002cd8 <t_Teclado+0x1d8>)
 8002b2c:	f001 fdb1 	bl	8004692 <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil3);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b36:	4869      	ldr	r0, [pc, #420]	; (8002cdc <t_Teclado+0x1dc>)
 8002b38:	f001 fdab 	bl	8004692 <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil4);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b42:	4866      	ldr	r0, [pc, #408]	; (8002cdc <t_Teclado+0x1dc>)
 8002b44:	f001 fda5 	bl	8004692 <HAL_GPIO_WritePin>

	for(;;){
		xQueueReceive(columna_q, &columna, blockForever);
 8002b48:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <t_Teclado+0x1e0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f107 011f 	add.w	r1, r7, #31
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	4618      	mov	r0, r3
 8002b56:	f005 fb51 	bl	80081fc <xQueueReceive>

		hal_digitalOutput(HIGH, fil1);
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	485e      	ldr	r0, [pc, #376]	; (8002cd8 <t_Teclado+0x1d8>)
 8002b60:	f001 fd97 	bl	8004692 <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil2);
 8002b64:	2201      	movs	r2, #1
 8002b66:	2108      	movs	r1, #8
 8002b68:	485b      	ldr	r0, [pc, #364]	; (8002cd8 <t_Teclado+0x1d8>)
 8002b6a:	f001 fd92 	bl	8004692 <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil3);
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b74:	4859      	ldr	r0, [pc, #356]	; (8002cdc <t_Teclado+0x1dc>)
 8002b76:	f001 fd8c 	bl	8004692 <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil4);
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b80:	4856      	ldr	r0, [pc, #344]	; (8002cdc <t_Teclado+0x1dc>)
 8002b82:	f001 fd86 	bl	8004692 <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil1);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2110      	movs	r1, #16
 8002b8a:	4853      	ldr	r0, [pc, #332]	; (8002cd8 <t_Teclado+0x1d8>)
 8002b8c:	f001 fd81 	bl	8004692 <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <t_Teclado+0x1e0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f107 011f 	add.w	r1, r7, #31
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 fb2e 	bl	80081fc <xQueueReceive>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d102      	bne.n	8002bac <t_Teclado+0xac>
			fila = FILA_1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		hal_digitalOutput(HIGH, fil1);
 8002bac:	2201      	movs	r2, #1
 8002bae:	2110      	movs	r1, #16
 8002bb0:	4849      	ldr	r0, [pc, #292]	; (8002cd8 <t_Teclado+0x1d8>)
 8002bb2:	f001 fd6e 	bl	8004692 <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil2);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2108      	movs	r1, #8
 8002bba:	4847      	ldr	r0, [pc, #284]	; (8002cd8 <t_Teclado+0x1d8>)
 8002bbc:	f001 fd69 	bl	8004692 <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002bc0:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <t_Teclado+0x1e0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f107 011f 	add.w	r1, r7, #31
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f005 fb16 	bl	80081fc <xQueueReceive>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <t_Teclado+0xdc>
			fila = FILA_2;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		hal_digitalOutput(HIGH, fil2);
 8002bdc:	2201      	movs	r2, #1
 8002bde:	2108      	movs	r1, #8
 8002be0:	483d      	ldr	r0, [pc, #244]	; (8002cd8 <t_Teclado+0x1d8>)
 8002be2:	f001 fd56 	bl	8004692 <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil3);
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bec:	483b      	ldr	r0, [pc, #236]	; (8002cdc <t_Teclado+0x1dc>)
 8002bee:	f001 fd50 	bl	8004692 <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <t_Teclado+0x1e0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f107 011f 	add.w	r1, r7, #31
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f005 fafd 	bl	80081fc <xQueueReceive>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <t_Teclado+0x10e>
			fila = FILA_3;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		hal_digitalOutput(HIGH, fil3);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c14:	4831      	ldr	r0, [pc, #196]	; (8002cdc <t_Teclado+0x1dc>)
 8002c16:	f001 fd3c 	bl	8004692 <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil4);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c20:	482e      	ldr	r0, [pc, #184]	; (8002cdc <t_Teclado+0x1dc>)
 8002c22:	f001 fd36 	bl	8004692 <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002c26:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <t_Teclado+0x1e0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f107 011f 	add.w	r1, r7, #31
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f005 fae3 	bl	80081fc <xQueueReceive>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <t_Teclado+0x142>
			fila = FILA_4;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		hal_digitalOutput(HIGH, fil4);
 8002c42:	2201      	movs	r2, #1
 8002c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c48:	4824      	ldr	r0, [pc, #144]	; (8002cdc <t_Teclado+0x1dc>)
 8002c4a:	f001 fd22 	bl	8004692 <HAL_GPIO_WritePin>

		tecla.tecla = teclado[columna][fila];
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002c5c:	440a      	add	r2, r1
 8002c5e:	4413      	add	r3, r2
 8002c60:	3b1c      	subs	r3, #28
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	777b      	strb	r3, [r7, #29]
		if(tecla.tecla < 10) tecla.accion = NUM;
 8002c66:	7f7b      	ldrb	r3, [r7, #29]
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	d802      	bhi.n	8002c72 <t_Teclado+0x172>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	773b      	strb	r3, [r7, #28]
 8002c70:	e001      	b.n	8002c76 <t_Teclado+0x176>
		else tecla.accion = tecla.tecla;
 8002c72:	7f7b      	ldrb	r3, [r7, #29]
 8002c74:	773b      	strb	r3, [r7, #28]

		xQueueSendToBack(tecla_q, &tecla, blockForever);
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <t_Teclado+0x1e4>)
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	f107 011c 	add.w	r1, r7, #28
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	f005 f90a 	bl	8007e9c <xQueueGenericSend>

		vTaskDelay(sleep_500ms);
 8002c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c8c:	f005 feb2 	bl	80089f4 <vTaskDelay>
		xQueueReset(columna_q);
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <t_Teclado+0x1e0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fffe 	bl	8007c98 <xQueueGenericReset>
		hal_digitalOutput(LOW, fil1);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2110      	movs	r1, #16
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <t_Teclado+0x1d8>)
 8002ca2:	f001 fcf6 	bl	8004692 <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil2);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2108      	movs	r1, #8
 8002caa:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <t_Teclado+0x1d8>)
 8002cac:	f001 fcf1 	bl	8004692 <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil3);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb6:	4809      	ldr	r0, [pc, #36]	; (8002cdc <t_Teclado+0x1dc>)
 8002cb8:	f001 fceb 	bl	8004692 <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil4);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cc2:	4806      	ldr	r0, [pc, #24]	; (8002cdc <t_Teclado+0x1dc>)
 8002cc4:	f001 fce5 	bl	8004692 <HAL_GPIO_WritePin>

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f006 fe3f 	bl	800994c <uxTaskGetStackHighWaterMark>
 8002cce:	6238      	str	r0, [r7, #32]
		xQueueReceive(columna_q, &columna, blockForever);
 8002cd0:	e73a      	b.n	8002b48 <t_Teclado+0x48>
 8002cd2:	bf00      	nop
 8002cd4:	0800cfac 	.word	0x0800cfac
 8002cd8:	40010c00 	.word	0x40010c00
 8002cdc:	40010800 	.word	0x40010800
 8002ce0:	20000398 	.word	0x20000398
 8002ce4:	20000334 	.word	0x20000334

08002ce8 <parse_csv_to_struct>:
	}
}

#ifdef EGB
//comunicaccion externa----------------------------------------------------------------------------------------------------------------------------------------------------------------------
static uint8_t parse_csv_to_struct(const char *input, usuario_t *usuario, actuador_t *actuador){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    uint8_t identificator;
	char buffer[rxBUFFER_SIZE]; // Buffer para manipular el string de entrada
    strncpy(buffer, input, sizeof(buffer) - 1);
 8002cf4:	f107 0310 	add.w	r3, r7, #16
 8002cf8:	2214      	movs	r2, #20
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f007 ff1f 	bl	800ab40 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Asegurar terminación nula
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    char *token = strtok(buffer, ",");
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	493b      	ldr	r1, [pc, #236]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f007 ff2a 	bl	800ab68 <strtok>
 8002d14:	62f8      	str	r0, [r7, #44]	; 0x2c
    size_t index = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28

    //00(idglobal),p(identificador),1(user),1111(password),0(nroIntentos),0(accion_t),$
    //00(idglobal),a(identificador),1(tipo),xxxx(relleno),0(accion),0(accion_anterior),$

    //idglobal lo descarto
    token = strtok(NULL, ",");
 8002d1a:	4938      	ldr	r1, [pc, #224]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f007 ff23 	bl	800ab68 <strtok>
 8002d22:	62f8      	str	r0, [r7, #44]	; 0x2c
    identificator = buffer[3];
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(identificator == 'p'){
 8002d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d2e:	2b70      	cmp	r3, #112	; 0x70
 8002d30:	d130      	bne.n	8002d94 <parse_csv_to_struct+0xac>
        token = strtok(NULL, ",");
 8002d32:	4932      	ldr	r1, [pc, #200]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002d34:	2000      	movs	r0, #0
 8002d36:	f007 ff17 	bl	800ab68 <strtok>
 8002d3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        usuario->nroUsuario = atoi(token);
 8002d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d3e:	f007 fd99 	bl	800a874 <atoi>
 8002d42:	4603      	mov	r3, r0
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	705a      	strb	r2, [r3, #1]
        token = strtok(NULL, ",");
 8002d4a:	492c      	ldr	r1, [pc, #176]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f007 ff0b 	bl	800ab68 <strtok>
 8002d52:	62f8      	str	r0, [r7, #44]	; 0x2c
        usuario->clave = atoi(token);
 8002d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d56:	f007 fd8d 	bl	800a874 <atoi>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	605a      	str	r2, [r3, #4]
        token = strtok(NULL, ",");
 8002d62:	4926      	ldr	r1, [pc, #152]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002d64:	2000      	movs	r0, #0
 8002d66:	f007 feff 	bl	800ab68 <strtok>
 8002d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        usuario->intentosDisp = atoi(token);
 8002d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d6e:	f007 fd81 	bl	800a874 <atoi>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	609a      	str	r2, [r3, #8]
        token = strtok(NULL, ",");
 8002d7a:	4920      	ldr	r1, [pc, #128]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f007 fef3 	bl	800ab68 <strtok>
 8002d82:	62f8      	str	r0, [r7, #44]	; 0x2c
        usuario->accion = atoi(token);
 8002d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d86:	f007 fd75 	bl	800a874 <atoi>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e02c      	b.n	8002dee <parse_csv_to_struct+0x106>
    }
    else if(identificator == 'a'){
 8002d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d98:	2b61      	cmp	r3, #97	; 0x61
 8002d9a:	d128      	bne.n	8002dee <parse_csv_to_struct+0x106>
        token = strtok(NULL, ",");
 8002d9c:	4917      	ldr	r1, [pc, #92]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f007 fee2 	bl	800ab68 <strtok>
 8002da4:	62f8      	str	r0, [r7, #44]	; 0x2c
        actuador->tipo = atoi(token);
 8002da6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002da8:	f007 fd64 	bl	800a874 <atoi>
 8002dac:	4603      	mov	r3, r0
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	701a      	strb	r2, [r3, #0]
        token = strtok(NULL, ",");
 8002db4:	4911      	ldr	r1, [pc, #68]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002db6:	2000      	movs	r0, #0
 8002db8:	f007 fed6 	bl	800ab68 <strtok>
 8002dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
        //descarto bytes relleno
        token = strtok(NULL, ",");
 8002dbe:	490f      	ldr	r1, [pc, #60]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f007 fed1 	bl	800ab68 <strtok>
 8002dc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        actuador->accion = atoi(token);
 8002dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dca:	f007 fd53 	bl	800a874 <atoi>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	705a      	strb	r2, [r3, #1]
        token = strtok(NULL, ",");
 8002dd6:	4909      	ldr	r1, [pc, #36]	; (8002dfc <parse_csv_to_struct+0x114>)
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f007 fec5 	bl	800ab68 <strtok>
 8002dde:	62f8      	str	r0, [r7, #44]	; 0x2c
        actuador->anterior = atoi(token);
 8002de0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002de2:	f007 fd47 	bl	800a874 <atoi>
 8002de6:	4603      	mov	r3, r0
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	709a      	strb	r2, [r3, #2]
    }

    return identificator;
 8002dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3730      	adds	r7, #48	; 0x30
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	0800cfbc 	.word	0x0800cfbc

08002e00 <i2c_slave_rx_process>:

void i2c_slave_rx_process(uint8_t* data, uint16_t size) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

	xQueueSendFromISR(i2c_rx_q, data, &xHigherPriorityTaskWoken);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <i2c_slave_rx_process+0x40>)
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	f107 020c 	add.w	r2, r7, #12
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	f005 f93c 	bl	8008098 <xQueueGenericSendFromISR>

	//i2c_set_txBuffer((uint8_t *) MSG, strlen(MSG));

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <i2c_slave_rx_process+0x36>
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <i2c_slave_rx_process+0x44>)
 8002e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	f3bf 8f6f 	isb	sy
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000033c 	.word	0x2000033c
 8002e44:	e000ed04 	.word	0xe000ed04

08002e48 <t_Comextern>:

/*
 *tarea para la comunicacion con la raspberry
 */
static void t_Comextern (void *pvParameters){
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b0a4      	sub	sp, #144	; 0x90
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	6078      	str	r0, [r7, #4]

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002e50:	2000      	movs	r0, #0
 8002e52:	f006 fd7b 	bl	800994c <uxTaskGetStackHighWaterMark>
 8002e56:	67f8      	str	r0, [r7, #124]	; 0x7c

	actuador_t aux_actuador, i2c_rx_actuador;
	usuario_t aux_usuario, i2c_rx_usuario;
	uint8_t identificator = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	uint8_t i2c_tx_buf[txBUFFER_SIZE];
	//uint32_t globalID = 0;

	while(1){

		if(xQueueReceive(i2c_rx_q, &i2c_rx_buf, nonBlocking) == pdTRUE){
 8002e5e:	4b4a      	ldr	r3, [pc, #296]	; (8002f88 <t_Comextern+0x140>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f107 0120 	add.w	r1, r7, #32
 8002e66:	2200      	movs	r2, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 f9c7 	bl	80081fc <xQueueReceive>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d126      	bne.n	8002ec2 <t_Comextern+0x7a>

			//00(idglobal),p(identificador),1(user),1111(password),0(nroIntentos),0(accion_t),$
			//00(idglobal),a(identificador),1(tipo),xxxx(relleno),0(accion),0(accion_anterior),$

			identificator = parse_csv_to_struct(i2c_rx_buf, &i2c_rx_usuario, &i2c_rx_actuador);
 8002e74:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002e78:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002e7c:	f107 0320 	add.w	r3, r7, #32
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff31 	bl	8002ce8 <parse_csv_to_struct>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

			if(identificator == 'p'){
 8002e8c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002e90:	2b70      	cmp	r3, #112	; 0x70
 8002e92:	d109      	bne.n	8002ea8 <t_Comextern+0x60>
				xQueueSendToBack(reqAcceso_q, &i2c_rx_usuario, blockForever);
 8002e94:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <t_Comextern+0x144>)
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea2:	f004 fffb 	bl	8007e9c <xQueueGenericSend>
 8002ea6:	e00c      	b.n	8002ec2 <t_Comextern+0x7a>
			}
			else if(identificator == 'a'){
 8002ea8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002eac:	2b61      	cmp	r3, #97	; 0x61
 8002eae:	d108      	bne.n	8002ec2 <t_Comextern+0x7a>
				xQueueSendToBack(actuador_q, &i2c_rx_actuador, blockForever);
 8002eb0:	4b37      	ldr	r3, [pc, #220]	; (8002f90 <t_Comextern+0x148>)
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	f004 ffed 	bl	8007e9c <xQueueGenericSend>
			}
			else{
				//error de identificador
			}
		}
		if(uxQueueMessagesWaiting(respAcceso_aux_q)){
 8002ec2:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <t_Comextern+0x14c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 fa78 	bl	80083bc <uxQueueMessagesWaiting>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d029      	beq.n	8002f26 <t_Comextern+0xde>
			xQueueReceive(respAcceso_aux_q, &aux_usuario, blockForever);
 8002ed2:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <t_Comextern+0x14c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002eda:	f04f 32ff 	mov.w	r2, #4294967295
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f005 f98c 	bl	80081fc <xQueueReceive>

			snprintf(i2c_tx_buf, txBUFFER_SIZE, "%02d,r,%01d,%08d,%01d,%01d,$", aux_usuario.id, aux_usuario.nroUsuario, aux_usuario.clave, aux_usuario.intentosDisp, aux_usuario.accion);
 8002ee4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002ee6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002eea:	461c      	mov	r4, r3
 8002eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ef0:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	f107 0008 	add.w	r0, r7, #8
 8002efa:	9503      	str	r5, [sp, #12]
 8002efc:	9202      	str	r2, [sp, #8]
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	9400      	str	r4, [sp, #0]
 8002f02:	460b      	mov	r3, r1
 8002f04:	4a24      	ldr	r2, [pc, #144]	; (8002f98 <t_Comextern+0x150>)
 8002f06:	2115      	movs	r1, #21
 8002f08:	f007 fdbe 	bl	800aa88 <sniprintf>
			i2c_set_txBuffer(i2c_tx_buf, strlen(i2c_tx_buf));
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd f91d 	bl	8000150 <strlen>
 8002f16:	4603      	mov	r3, r0
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	f107 0308 	add.w	r3, r7, #8
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fe9b 	bl	8000c5c <i2c_set_txBuffer>
//			xQueueReceive(reqAcceso_aux_q, &aux_usuario, blockForever);
//
//			snprintf(i2c_tx_buf, txBUFFER_SIZE, "%02d,p,%01d,%08d,%01d,%01d,$", aux_usuario.id, aux_usuario.nroUsuario, aux_usuario.clave, aux_usuario.intentosDisp, aux_usuario.accion);
//			i2c_set_txBuffer(i2c_tx_buf, strlen(i2c_tx_buf));
//		}
		if(uxQueueMessagesWaiting(actuador_aux_q)){
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <t_Comextern+0x154>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f005 fa46 	bl	80083bc <uxQueueMessagesWaiting>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d093      	beq.n	8002e5e <t_Comextern+0x16>
			xQueueReceive(actuador_aux_q, &aux_usuario, blockForever);
 8002f36:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <t_Comextern+0x154>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f42:	4618      	mov	r0, r3
 8002f44:	f005 f95a 	bl	80081fc <xQueueReceive>

			snprintf(i2c_tx_buf, txBUFFER_SIZE, "%02d,a,%01d,xxxxxxxx,%01d,%01d,$", aux_actuador.id, aux_actuador.tipo, aux_actuador.accion, aux_actuador.anterior);
 8002f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8002f4e:	f897 1071 	ldrb.w	r1, [r7, #113]	; 0x71
 8002f52:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8002f56:	4604      	mov	r4, r0
 8002f58:	f107 0008 	add.w	r0, r7, #8
 8002f5c:	9402      	str	r4, [sp, #8]
 8002f5e:	9101      	str	r1, [sp, #4]
 8002f60:	9200      	str	r2, [sp, #0]
 8002f62:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <t_Comextern+0x158>)
 8002f64:	2115      	movs	r1, #21
 8002f66:	f007 fd8f 	bl	800aa88 <sniprintf>
			i2c_set_txBuffer(i2c_tx_buf, strlen(i2c_tx_buf));
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd f8ee 	bl	8000150 <strlen>
 8002f74:	4603      	mov	r3, r0
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	f107 0308 	add.w	r3, r7, #8
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fe6c 	bl	8000c5c <i2c_set_txBuffer>
		if(xQueueReceive(i2c_rx_q, &i2c_rx_buf, nonBlocking) == pdTRUE){
 8002f84:	e76b      	b.n	8002e5e <t_Comextern+0x16>
 8002f86:	bf00      	nop
 8002f88:	2000033c 	.word	0x2000033c
 8002f8c:	20000284 	.word	0x20000284
 8002f90:	20000388 	.word	0x20000388
 8002f94:	20000390 	.word	0x20000390
 8002f98:	0800cfc0 	.word	0x0800cfc0
 8002f9c:	20000330 	.word	0x20000330
 8002fa0:	0800cfe0 	.word	0x0800cfe0

08002fa4 <t_LedBlink>:
		}
	}
}

static void t_LedBlink (void *pvParameters){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	for(;;){
		hal_toggleOutput(builtinLed);
 8002fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fb0:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <t_LedBlink+0x1c>)
 8002fb2:	f001 fb86 	bl	80046c2 <HAL_GPIO_TogglePin>
		vTaskDelay(sleep_300ms);
 8002fb6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fba:	f005 fd1b 	bl	80089f4 <vTaskDelay>
		hal_toggleOutput(builtinLed);
 8002fbe:	e7f5      	b.n	8002fac <t_LedBlink+0x8>
 8002fc0:	40011000 	.word	0x40011000

08002fc4 <err>:
}
#endif


//Debugging function
static void err (uint8_t errCode){
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
	while(1);
 8002fce:	e7fe      	b.n	8002fce <err+0xa>

08002fd0 <HAL_GPIO_EXTI_Callback>:
}

//ISR
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	80fb      	strh	r3, [r7, #6]
	columna_t columna;
	actuador_t actuador;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]

	if(GPIO_Pin != PA_Pin){
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d029      	beq.n	8003038 <HAL_GPIO_EXTI_Callback+0x68>
		switch(GPIO_Pin){
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fea:	d00f      	beq.n	800300c <HAL_GPIO_EXTI_Callback+0x3c>
 8002fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff0:	dc18      	bgt.n	8003024 <HAL_GPIO_EXTI_Callback+0x54>
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d00c      	beq.n	8003012 <HAL_GPIO_EXTI_Callback+0x42>
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffc:	dc12      	bgt.n	8003024 <HAL_GPIO_EXTI_Callback+0x54>
 8002ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003002:	d00c      	beq.n	800301e <HAL_GPIO_EXTI_Callback+0x4e>
 8003004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003008:	d006      	beq.n	8003018 <HAL_GPIO_EXTI_Callback+0x48>
 800300a:	e00b      	b.n	8003024 <HAL_GPIO_EXTI_Callback+0x54>
			case col1_Pin:
				columna = COLUMNA_1;
 800300c:	2300      	movs	r3, #0
 800300e:	75fb      	strb	r3, [r7, #23]
				break;
 8003010:	e008      	b.n	8003024 <HAL_GPIO_EXTI_Callback+0x54>
			case col2_Pin:
				columna = COLUMNA_2;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
				break;
 8003016:	e005      	b.n	8003024 <HAL_GPIO_EXTI_Callback+0x54>
			case col3_Pin:
				columna = COLUMNA_3;
 8003018:	2302      	movs	r3, #2
 800301a:	75fb      	strb	r3, [r7, #23]
				break;
 800301c:	e002      	b.n	8003024 <HAL_GPIO_EXTI_Callback+0x54>
			case col4_Pin:
				columna = COLUMNA_4;
 800301e:	2303      	movs	r3, #3
 8003020:	75fb      	strb	r3, [r7, #23]
				break;
 8003022:	bf00      	nop
		}
		xQueueSendFromISR(columna_q, &columna, &xHigherPriorityTaskWoken);
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	f107 0208 	add.w	r2, r7, #8
 800302c:	f107 0117 	add.w	r1, r7, #23
 8003030:	2300      	movs	r3, #0
 8003032:	f005 f831 	bl	8008098 <xQueueGenericSendFromISR>
 8003036:	e00c      	b.n	8003052 <HAL_GPIO_EXTI_Callback+0x82>
	}
	else{
		actuador.tipo = PUERTA;
 8003038:	2301      	movs	r3, #1
 800303a:	733b      	strb	r3, [r7, #12]
		actuador.accion = CAMBIO_ESTADO;
 800303c:	230d      	movs	r3, #13
 800303e:	737b      	strb	r3, [r7, #13]
		xQueueSendFromISR(actuador_q, &actuador, &xHigherPriorityTaskWoken);
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	f107 0208 	add.w	r2, r7, #8
 8003048:	f107 010c 	add.w	r1, r7, #12
 800304c:	2300      	movs	r3, #0
 800304e:	f005 f823 	bl	8008098 <xQueueGenericSendFromISR>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_EXTI_Callback+0x98>
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <HAL_GPIO_EXTI_Callback+0xa8>)
 800305a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
}
 8003068:	bf00      	nop
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000398 	.word	0x20000398
 8003074:	20000388 	.word	0x20000388
 8003078:	e000ed04 	.word	0xe000ed04

0800307c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b092      	sub	sp, #72	; 0x48
 8003080:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003082:	f000 fda5 	bl	8003bd0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003086:	f000 f963 	bl	8003350 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800308a:	f000 fa51 	bl	8003530 <MX_GPIO_Init>
  MX_I2C1_Init();
 800308e:	f000 f9a5 	bl	80033dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8003092:	f000 f9ff 	bl	8003494 <MX_TIM2_Init>
  MX_I2C2_Init();
 8003096:	f000 f9cf 	bl	8003438 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
#ifdef EGB
  i2c_start_listen_check(&hi2c2);
 800309a:	488c      	ldr	r0, [pc, #560]	; (80032cc <main+0x250>)
 800309c:	f001 fe7c 	bl	8004d98 <HAL_I2C_EnableListen_IT>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <main+0x2e>
 80030a6:	f000 fb0d 	bl	80036c4 <Error_Handler>
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  hal_digitalOutput(LOW, acAlarma);
 80030aa:	2200      	movs	r2, #0
 80030ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030b0:	4887      	ldr	r0, [pc, #540]	; (80032d0 <main+0x254>)
 80030b2:	f001 faee 	bl	8004692 <HAL_GPIO_WritePin>
  hal_digitalOutput(LOW, acPuerta);
 80030b6:	2200      	movs	r2, #0
 80030b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030bc:	4884      	ldr	r0, [pc, #528]	; (80032d0 <main+0x254>)
 80030be:	f001 fae8 	bl	8004692 <HAL_GPIO_WritePin>
  hal_digitalOutput(HIGH, ledRojo);
 80030c2:	2201      	movs	r2, #1
 80030c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030c8:	4881      	ldr	r0, [pc, #516]	; (80032d0 <main+0x254>)
 80030ca:	f001 fae2 	bl	8004692 <HAL_GPIO_WritePin>
  hal_digitalOutput(HIGH, ledVerde);
 80030ce:	2201      	movs	r2, #1
 80030d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030d4:	487e      	ldr	r0, [pc, #504]	; (80032d0 <main+0x254>)
 80030d6:	f001 fadc 	bl	8004692 <HAL_GPIO_WritePin>
  //dummyDataMemoryRecording();

  hal_digitalOutput(HIGH,builtinLed);
 80030da:	2201      	movs	r2, #1
 80030dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e0:	487c      	ldr	r0, [pc, #496]	; (80032d4 <main+0x258>)
 80030e2:	f001 fad6 	bl	8004692 <HAL_GPIO_WritePin>

  columna_q = xQueueCreate(1, sizeof(columna));
 80030e6:	2200      	movs	r2, #0
 80030e8:	2101      	movs	r1, #1
 80030ea:	2001      	movs	r0, #1
 80030ec:	f004 fe64 	bl	8007db8 <xQueueGenericCreate>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4a79      	ldr	r2, [pc, #484]	; (80032d8 <main+0x25c>)
 80030f4:	6013      	str	r3, [r2, #0]
  tecla_q = xQueueCreate(1, sizeof(tecla));
 80030f6:	2200      	movs	r2, #0
 80030f8:	2102      	movs	r1, #2
 80030fa:	2001      	movs	r0, #1
 80030fc:	f004 fe5c 	bl	8007db8 <xQueueGenericCreate>
 8003100:	4603      	mov	r3, r0
 8003102:	4a76      	ldr	r2, [pc, #472]	; (80032dc <main+0x260>)
 8003104:	6013      	str	r3, [r2, #0]
  display_q = xQueueCreate(2,sizeof(display));
 8003106:	2200      	movs	r2, #0
 8003108:	2121      	movs	r1, #33	; 0x21
 800310a:	2002      	movs	r0, #2
 800310c:	f004 fe54 	bl	8007db8 <xQueueGenericCreate>
 8003110:	4603      	mov	r3, r0
 8003112:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <main+0x264>)
 8003114:	6013      	str	r3, [r2, #0]
  actuador_q = xQueueCreate(1, sizeof(actuador));
 8003116:	2200      	movs	r2, #0
 8003118:	2108      	movs	r1, #8
 800311a:	2001      	movs	r0, #1
 800311c:	f004 fe4c 	bl	8007db8 <xQueueGenericCreate>
 8003120:	4603      	mov	r3, r0
 8003122:	4a70      	ldr	r2, [pc, #448]	; (80032e4 <main+0x268>)
 8003124:	6013      	str	r3, [r2, #0]
  reqAcceso_q = xQueueCreate(1, sizeof(usuario));
 8003126:	2200      	movs	r2, #0
 8003128:	2110      	movs	r1, #16
 800312a:	2001      	movs	r0, #1
 800312c:	f004 fe44 	bl	8007db8 <xQueueGenericCreate>
 8003130:	4603      	mov	r3, r0
 8003132:	4a6d      	ldr	r2, [pc, #436]	; (80032e8 <main+0x26c>)
 8003134:	6013      	str	r3, [r2, #0]
  respAcceso_q = xQueueCreate(1, sizeof(usuario));
 8003136:	2200      	movs	r2, #0
 8003138:	2110      	movs	r1, #16
 800313a:	2001      	movs	r0, #1
 800313c:	f004 fe3c 	bl	8007db8 <xQueueGenericCreate>
 8003140:	4603      	mov	r3, r0
 8003142:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <main+0x270>)
 8003144:	6013      	str	r3, [r2, #0]
  flashcmd_q = xQueueCreate(1,sizeof(usuario));
 8003146:	2200      	movs	r2, #0
 8003148:	2110      	movs	r1, #16
 800314a:	2001      	movs	r0, #1
 800314c:	f004 fe34 	bl	8007db8 <xQueueGenericCreate>
 8003150:	4603      	mov	r3, r0
 8003152:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <main+0x274>)
 8003154:	6013      	str	r3, [r2, #0]
  flashdata_q = xQueueCreate(1,sizeof(usuario));
 8003156:	2200      	movs	r2, #0
 8003158:	2110      	movs	r1, #16
 800315a:	2001      	movs	r0, #1
 800315c:	f004 fe2c 	bl	8007db8 <xQueueGenericCreate>
 8003160:	4603      	mov	r3, r0
 8003162:	4a64      	ldr	r2, [pc, #400]	; (80032f4 <main+0x278>)
 8003164:	6013      	str	r3, [r2, #0]

#ifdef EGB
  actuador_aux_q = xQueueCreate(1, sizeof(actuador));
 8003166:	2200      	movs	r2, #0
 8003168:	2108      	movs	r1, #8
 800316a:	2001      	movs	r0, #1
 800316c:	f004 fe24 	bl	8007db8 <xQueueGenericCreate>
 8003170:	4603      	mov	r3, r0
 8003172:	4a61      	ldr	r2, [pc, #388]	; (80032f8 <main+0x27c>)
 8003174:	6013      	str	r3, [r2, #0]
  reqAcceso_aux_q = xQueueCreate(1, sizeof(usuario));
 8003176:	2200      	movs	r2, #0
 8003178:	2110      	movs	r1, #16
 800317a:	2001      	movs	r0, #1
 800317c:	f004 fe1c 	bl	8007db8 <xQueueGenericCreate>
 8003180:	4603      	mov	r3, r0
 8003182:	4a5e      	ldr	r2, [pc, #376]	; (80032fc <main+0x280>)
 8003184:	6013      	str	r3, [r2, #0]
  respAcceso_aux_q = xQueueCreate(1, sizeof(usuario));
 8003186:	2200      	movs	r2, #0
 8003188:	2110      	movs	r1, #16
 800318a:	2001      	movs	r0, #1
 800318c:	f004 fe14 	bl	8007db8 <xQueueGenericCreate>
 8003190:	4603      	mov	r3, r0
 8003192:	4a5b      	ldr	r2, [pc, #364]	; (8003300 <main+0x284>)
 8003194:	6013      	str	r3, [r2, #0]

  i2c_rx_q = xQueueCreate(1, rxBUFFER_SIZE);
 8003196:	2200      	movs	r2, #0
 8003198:	2115      	movs	r1, #21
 800319a:	2001      	movs	r0, #1
 800319c:	f004 fe0c 	bl	8007db8 <xQueueGenericCreate>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4a58      	ldr	r2, [pc, #352]	; (8003304 <main+0x288>)
 80031a4:	6013      	str	r3, [r2, #0]
  i2c_tx_q = xQueueCreate(1, rxBUFFER_SIZE);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2115      	movs	r1, #21
 80031aa:	2001      	movs	r0, #1
 80031ac:	f004 fe04 	bl	8007db8 <xQueueGenericCreate>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4a55      	ldr	r2, [pc, #340]	; (8003308 <main+0x28c>)
 80031b4:	6013      	str	r3, [r2, #0]

#endif

  if(xTaskCreate(t_Menu, "", tMenu_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tMenu, &tMenu_h) != pdPASS)
 80031b6:	4b55      	ldr	r3, [pc, #340]	; (800330c <main+0x290>)
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	2301      	movs	r3, #1
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2300      	movs	r3, #0
 80031c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80031c4:	4952      	ldr	r1, [pc, #328]	; (8003310 <main+0x294>)
 80031c6:	4853      	ldr	r0, [pc, #332]	; (8003314 <main+0x298>)
 80031c8:	f005 faa8 	bl	800871c <xTaskCreate>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d002      	beq.n	80031d8 <main+0x15c>
	  err(0);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7ff fef6 	bl	8002fc4 <err>
  if(xTaskCreate(t_Teclado, "", tTeclado_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tTeclado, &tTeclado_h) != pdPASS)
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <main+0x29c>)
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	2302      	movs	r3, #2
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2300      	movs	r3, #0
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	494a      	ldr	r1, [pc, #296]	; (8003310 <main+0x294>)
 80031e6:	484d      	ldr	r0, [pc, #308]	; (800331c <main+0x2a0>)
 80031e8:	f005 fa98 	bl	800871c <xTaskCreate>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d002      	beq.n	80031f8 <main+0x17c>
	  err(1);
 80031f2:	2001      	movs	r0, #1
 80031f4:	f7ff fee6 	bl	8002fc4 <err>
  if(xTaskCreate(t_Display, "", tDisplay_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tDisplay, &tDisplay_h) != pdPASS)
 80031f8:	4b49      	ldr	r3, [pc, #292]	; (8003320 <main+0x2a4>)
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	2301      	movs	r3, #1
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2300      	movs	r3, #0
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	4942      	ldr	r1, [pc, #264]	; (8003310 <main+0x294>)
 8003206:	4847      	ldr	r0, [pc, #284]	; (8003324 <main+0x2a8>)
 8003208:	f005 fa88 	bl	800871c <xTaskCreate>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d002      	beq.n	8003218 <main+0x19c>
	  err(2);
 8003212:	2002      	movs	r0, #2
 8003214:	f7ff fed6 	bl	8002fc4 <err>
  if(xTaskCreate(t_Flash, "", tFlash_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tFlash, &tFlash_h) != pdPASS)
 8003218:	4b43      	ldr	r3, [pc, #268]	; (8003328 <main+0x2ac>)
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	2302      	movs	r3, #2
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2300      	movs	r3, #0
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	493a      	ldr	r1, [pc, #232]	; (8003310 <main+0x294>)
 8003226:	4841      	ldr	r0, [pc, #260]	; (800332c <main+0x2b0>)
 8003228:	f005 fa78 	bl	800871c <xTaskCreate>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d002      	beq.n	8003238 <main+0x1bc>
	  err(3);
 8003232:	2003      	movs	r0, #3
 8003234:	f7ff fec6 	bl	8002fc4 <err>
  if(xTaskCreate(t_ControlAcceso, "", tControlAcceso_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tControlAcceso, &tControlAcceso_h) != pdPASS)
 8003238:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <main+0x2b4>)
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2301      	movs	r3, #1
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2300      	movs	r3, #0
 8003242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003246:	4932      	ldr	r1, [pc, #200]	; (8003310 <main+0x294>)
 8003248:	483a      	ldr	r0, [pc, #232]	; (8003334 <main+0x2b8>)
 800324a:	f005 fa67 	bl	800871c <xTaskCreate>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d002      	beq.n	800325a <main+0x1de>
	  err(4);
 8003254:	2004      	movs	r0, #4
 8003256:	f7ff feb5 	bl	8002fc4 <err>
  if(xTaskCreate(t_Actuadores, "", tActuadores_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tActuadores, &tActuadores_h) != pdPASS)
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <main+0x2bc>)
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2303      	movs	r3, #3
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	492a      	ldr	r1, [pc, #168]	; (8003310 <main+0x294>)
 8003268:	4834      	ldr	r0, [pc, #208]	; (800333c <main+0x2c0>)
 800326a:	f005 fa57 	bl	800871c <xTaskCreate>
 800326e:	4603      	mov	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d002      	beq.n	800327a <main+0x1fe>
	  err(5);
 8003274:	2005      	movs	r0, #5
 8003276:	f7ff fea5 	bl	8002fc4 <err>
#ifdef EGB
  if(xTaskCreate(t_Comextern, "", tComextern_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tComextern, &tComextern_h) != pdPASS)
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <main+0x2c4>)
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	2301      	movs	r3, #1
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2300      	movs	r3, #0
 8003284:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003288:	4921      	ldr	r1, [pc, #132]	; (8003310 <main+0x294>)
 800328a:	482e      	ldr	r0, [pc, #184]	; (8003344 <main+0x2c8>)
 800328c:	f005 fa46 	bl	800871c <xTaskCreate>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d002      	beq.n	800329c <main+0x220>
  	  err(6);
 8003296:	2006      	movs	r0, #6
 8003298:	f7ff fe94 	bl	8002fc4 <err>
  if(xTaskCreate(t_LedBlink, "", tLedBlink_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tLedBlink, &tLedBlink_h) != pdPASS)
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <main+0x2cc>)
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	2301      	movs	r3, #1
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2300      	movs	r3, #0
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	4919      	ldr	r1, [pc, #100]	; (8003310 <main+0x294>)
 80032aa:	4828      	ldr	r0, [pc, #160]	; (800334c <main+0x2d0>)
 80032ac:	f005 fa36 	bl	800871c <xTaskCreate>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d002      	beq.n	80032bc <main+0x240>
  	  err(7);
 80032b6:	2007      	movs	r0, #7
 80032b8:	f7ff fe84 	bl	8002fc4 <err>
#endif
  vTaskStartScheduler();
 80032bc:	f005 fd06 	bl	8008ccc <vTaskStartScheduler>
 80032c0:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3740      	adds	r7, #64	; 0x40
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200002dc 	.word	0x200002dc
 80032d0:	40010c00 	.word	0x40010c00
 80032d4:	40011000 	.word	0x40011000
 80032d8:	20000398 	.word	0x20000398
 80032dc:	20000334 	.word	0x20000334
 80032e0:	20000394 	.word	0x20000394
 80032e4:	20000388 	.word	0x20000388
 80032e8:	20000284 	.word	0x20000284
 80032ec:	2000038c 	.word	0x2000038c
 80032f0:	2000027c 	.word	0x2000027c
 80032f4:	20000280 	.word	0x20000280
 80032f8:	20000330 	.word	0x20000330
 80032fc:	20000338 	.word	0x20000338
 8003300:	20000390 	.word	0x20000390
 8003304:	2000033c 	.word	0x2000033c
 8003308:	2000010c 	.word	0x2000010c
 800330c:	200000ec 	.word	0x200000ec
 8003310:	0800d004 	.word	0x0800d004
 8003314:	08001251 	.word	0x08001251
 8003318:	200000f8 	.word	0x200000f8
 800331c:	08002b01 	.word	0x08002b01
 8003320:	200000f0 	.word	0x200000f0
 8003324:	08002119 	.word	0x08002119
 8003328:	200000f4 	.word	0x200000f4
 800332c:	0800230d 	.word	0x0800230d
 8003330:	200000fc 	.word	0x200000fc
 8003334:	08002411 	.word	0x08002411
 8003338:	20000100 	.word	0x20000100
 800333c:	0800295d 	.word	0x0800295d
 8003340:	20000104 	.word	0x20000104
 8003344:	08002e49 	.word	0x08002e49
 8003348:	20000108 	.word	0x20000108
 800334c:	08002fa5 	.word	0x08002fa5

08003350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b090      	sub	sp, #64	; 0x40
 8003354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003356:	f107 0318 	add.w	r3, r7, #24
 800335a:	2228      	movs	r2, #40	; 0x28
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f007 fad4 	bl	800a90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003372:	2301      	movs	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800337a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800337c:	2300      	movs	r3, #0
 800337e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003380:	2301      	movs	r3, #1
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003384:	2302      	movs	r3, #2
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800338e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003394:	f107 0318 	add.w	r3, r7, #24
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fc41 	bl	8006c20 <HAL_RCC_OscConfig>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80033a4:	f000 f98e 	bl	80036c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033a8:	230f      	movs	r3, #15
 80033aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033ac:	2302      	movs	r3, #2
 80033ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	2102      	movs	r1, #2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 feac 	bl	8007120 <HAL_RCC_ClockConfig>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80033ce:	f000 f979 	bl	80036c4 <Error_Handler>
  }
}
 80033d2:	bf00      	nop
 80033d4:	3740      	adds	r7, #64	; 0x40
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <MX_I2C1_Init+0x50>)
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <MX_I2C1_Init+0x54>)
 80033e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <MX_I2C1_Init+0x50>)
 80033e8:	4a12      	ldr	r2, [pc, #72]	; (8003434 <MX_I2C1_Init+0x58>)
 80033ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <MX_I2C1_Init+0x50>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <MX_I2C1_Init+0x50>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <MX_I2C1_Init+0x50>)
 80033fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <MX_I2C1_Init+0x50>)
 8003402:	2200      	movs	r2, #0
 8003404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <MX_I2C1_Init+0x50>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <MX_I2C1_Init+0x50>)
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <MX_I2C1_Init+0x50>)
 8003414:	2200      	movs	r2, #0
 8003416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003418:	4804      	ldr	r0, [pc, #16]	; (800342c <MX_I2C1_Init+0x50>)
 800341a:	f001 f983 	bl	8004724 <HAL_I2C_Init>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003424:	f000 f94e 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000288 	.word	0x20000288
 8003430:	40005400 	.word	0x40005400
 8003434:	000186a0 	.word	0x000186a0

08003438 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800343c:	4b12      	ldr	r3, [pc, #72]	; (8003488 <MX_I2C2_Init+0x50>)
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <MX_I2C2_Init+0x54>)
 8003440:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <MX_I2C2_Init+0x50>)
 8003444:	4a12      	ldr	r2, [pc, #72]	; (8003490 <MX_I2C2_Init+0x58>)
 8003446:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <MX_I2C2_Init+0x50>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 42;
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <MX_I2C2_Init+0x50>)
 8003450:	222a      	movs	r2, #42	; 0x2a
 8003452:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <MX_I2C2_Init+0x50>)
 8003456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800345a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <MX_I2C2_Init+0x50>)
 800345e:	2200      	movs	r2, #0
 8003460:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <MX_I2C2_Init+0x50>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003468:	4b07      	ldr	r3, [pc, #28]	; (8003488 <MX_I2C2_Init+0x50>)
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <MX_I2C2_Init+0x50>)
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003474:	4804      	ldr	r0, [pc, #16]	; (8003488 <MX_I2C2_Init+0x50>)
 8003476:	f001 f955 	bl	8004724 <HAL_I2C_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003480:	f000 f920 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}
 8003488:	200002dc 	.word	0x200002dc
 800348c:	40005800 	.word	0x40005800
 8003490:	000186a0 	.word	0x000186a0

08003494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a8:	463b      	mov	r3, r7
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <MX_TIM2_Init+0x98>)
 80034b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <MX_TIM2_Init+0x98>)
 80034ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80034be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c0:	4b1a      	ldr	r3, [pc, #104]	; (800352c <MX_TIM2_Init+0x98>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <MX_TIM2_Init+0x98>)
 80034c8:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80034cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <MX_TIM2_Init+0x98>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d4:	4b15      	ldr	r3, [pc, #84]	; (800352c <MX_TIM2_Init+0x98>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034da:	4814      	ldr	r0, [pc, #80]	; (800352c <MX_TIM2_Init+0x98>)
 80034dc:	f003 ffde 	bl	800749c <HAL_TIM_Base_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80034e6:	f000 f8ed 	bl	80036c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034f0:	f107 0308 	add.w	r3, r7, #8
 80034f4:	4619      	mov	r1, r3
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <MX_TIM2_Init+0x98>)
 80034f8:	f004 f97a 	bl	80077f0 <HAL_TIM_ConfigClockSource>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003502:	f000 f8df 	bl	80036c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800350e:	463b      	mov	r3, r7
 8003510:	4619      	mov	r1, r3
 8003512:	4806      	ldr	r0, [pc, #24]	; (800352c <MX_TIM2_Init+0x98>)
 8003514:	f004 fb50 	bl	8007bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800351e:	f000 f8d1 	bl	80036c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000340 	.word	0x20000340

08003530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003536:	f107 0310 	add.w	r3, r7, #16
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003544:	4b51      	ldr	r3, [pc, #324]	; (800368c <MX_GPIO_Init+0x15c>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	4a50      	ldr	r2, [pc, #320]	; (800368c <MX_GPIO_Init+0x15c>)
 800354a:	f043 0310 	orr.w	r3, r3, #16
 800354e:	6193      	str	r3, [r2, #24]
 8003550:	4b4e      	ldr	r3, [pc, #312]	; (800368c <MX_GPIO_Init+0x15c>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800355c:	4b4b      	ldr	r3, [pc, #300]	; (800368c <MX_GPIO_Init+0x15c>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	4a4a      	ldr	r2, [pc, #296]	; (800368c <MX_GPIO_Init+0x15c>)
 8003562:	f043 0320 	orr.w	r3, r3, #32
 8003566:	6193      	str	r3, [r2, #24]
 8003568:	4b48      	ldr	r3, [pc, #288]	; (800368c <MX_GPIO_Init+0x15c>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003574:	4b45      	ldr	r3, [pc, #276]	; (800368c <MX_GPIO_Init+0x15c>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4a44      	ldr	r2, [pc, #272]	; (800368c <MX_GPIO_Init+0x15c>)
 800357a:	f043 0308 	orr.w	r3, r3, #8
 800357e:	6193      	str	r3, [r2, #24]
 8003580:	4b42      	ldr	r3, [pc, #264]	; (800368c <MX_GPIO_Init+0x15c>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800358c:	4b3f      	ldr	r3, [pc, #252]	; (800368c <MX_GPIO_Init+0x15c>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4a3e      	ldr	r2, [pc, #248]	; (800368c <MX_GPIO_Init+0x15c>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6193      	str	r3, [r2, #24]
 8003598:	4b3c      	ldr	r3, [pc, #240]	; (800368c <MX_GPIO_Init+0x15c>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(builtinLed_GPIO_Port, builtinLed_Pin, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035aa:	4839      	ldr	r0, [pc, #228]	; (8003690 <MX_GPIO_Init+0x160>)
 80035ac:	f001 f871 	bl	8004692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, acPuerta_Pin|acAlarma_Pin|ledRojo_Pin|ledVerde_Pin
 80035b0:	2200      	movs	r2, #0
 80035b2:	f24f 0118 	movw	r1, #61464	; 0xf018
 80035b6:	4837      	ldr	r0, [pc, #220]	; (8003694 <MX_GPIO_Init+0x164>)
 80035b8:	f001 f86b 	bl	8004692 <HAL_GPIO_WritePin>
                          |fil2_Pin|fil1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, fil4_Pin|fil3_Pin, GPIO_PIN_RESET);
 80035bc:	2200      	movs	r2, #0
 80035be:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80035c2:	4835      	ldr	r0, [pc, #212]	; (8003698 <MX_GPIO_Init+0x168>)
 80035c4:	f001 f865 	bl	8004692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : builtinLed_Pin */
  GPIO_InitStruct.Pin = builtinLed_Pin;
 80035c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ce:	2301      	movs	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2302      	movs	r3, #2
 80035d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(builtinLed_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 0310 	add.w	r3, r7, #16
 80035de:	4619      	mov	r1, r3
 80035e0:	482b      	ldr	r0, [pc, #172]	; (8003690 <MX_GPIO_Init+0x160>)
 80035e2:	f000 febb 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA_Pin */
  GPIO_InitStruct.Pin = PA_Pin;
 80035e6:	2302      	movs	r3, #2
 80035e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035ea:	4b2c      	ldr	r3, [pc, #176]	; (800369c <MX_GPIO_Init+0x16c>)
 80035ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PA_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 0310 	add.w	r3, r7, #16
 80035f6:	4619      	mov	r1, r3
 80035f8:	4826      	ldr	r0, [pc, #152]	; (8003694 <MX_GPIO_Init+0x164>)
 80035fa:	f000 feaf 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : acPuerta_Pin acAlarma_Pin ledRojo_Pin ledVerde_Pin
                           fil2_Pin fil1_Pin */
  GPIO_InitStruct.Pin = acPuerta_Pin|acAlarma_Pin|ledRojo_Pin|ledVerde_Pin
 80035fe:	f24f 0318 	movw	r3, #61464	; 0xf018
 8003602:	613b      	str	r3, [r7, #16]
                          |fil2_Pin|fil1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003604:	2301      	movs	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360c:	2302      	movs	r3, #2
 800360e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003610:	f107 0310 	add.w	r3, r7, #16
 8003614:	4619      	mov	r1, r3
 8003616:	481f      	ldr	r0, [pc, #124]	; (8003694 <MX_GPIO_Init+0x164>)
 8003618:	f000 fea0 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : col4_Pin col3_Pin col2_Pin col1_Pin */
  GPIO_InitStruct.Pin = col4_Pin|col3_Pin|col2_Pin|col1_Pin;
 800361c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <MX_GPIO_Init+0x16c>)
 8003624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003626:	2301      	movs	r3, #1
 8003628:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362a:	f107 0310 	add.w	r3, r7, #16
 800362e:	4619      	mov	r1, r3
 8003630:	4819      	ldr	r0, [pc, #100]	; (8003698 <MX_GPIO_Init+0x168>)
 8003632:	f000 fe93 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : fil4_Pin fil3_Pin */
  GPIO_InitStruct.Pin = fil4_Pin|fil3_Pin;
 8003636:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800363a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800363c:	2301      	movs	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	2302      	movs	r3, #2
 8003646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	4619      	mov	r1, r3
 800364e:	4812      	ldr	r0, [pc, #72]	; (8003698 <MX_GPIO_Init+0x168>)
 8003650:	f000 fe84 	bl	800435c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 8, 0);
 8003654:	2200      	movs	r2, #0
 8003656:	2108      	movs	r1, #8
 8003658:	2007      	movs	r0, #7
 800365a:	f000 fbc4 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800365e:	2007      	movs	r0, #7
 8003660:	f000 fbdd 	bl	8003e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 8, 0);
 8003664:	2200      	movs	r2, #0
 8003666:	2108      	movs	r1, #8
 8003668:	2017      	movs	r0, #23
 800366a:	f000 fbbc 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800366e:	2017      	movs	r0, #23
 8003670:	f000 fbd5 	bl	8003e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8003674:	2200      	movs	r2, #0
 8003676:	2108      	movs	r1, #8
 8003678:	2028      	movs	r0, #40	; 0x28
 800367a:	f000 fbb4 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800367e:	2028      	movs	r0, #40	; 0x28
 8003680:	f000 fbcd 	bl	8003e1e <HAL_NVIC_EnableIRQ>

}
 8003684:	bf00      	nop
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	40011000 	.word	0x40011000
 8003694:	40010c00 	.word	0x40010c00
 8003698:	40010800 	.word	0x40010800
 800369c:	10210000 	.word	0x10210000

080036a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	actuador_t acc2;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036b2:	f000 faa3 	bl	8003bfc <HAL_IncTick>
//	  xQueueSendFromISR(actuador_q, &acc2, &xHigherPriorityTaskWoken);
//	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
//  }

  /* USER CODE END Callback 1 */
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00

080036c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036c8:	b672      	cpsid	i
}
 80036ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036cc:	e7fe      	b.n	80036cc <Error_Handler+0x8>
	...

080036d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_MspInit+0x5c>)
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	4a14      	ldr	r2, [pc, #80]	; (800372c <HAL_MspInit+0x5c>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6193      	str	r3, [r2, #24]
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_MspInit+0x5c>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	4b0f      	ldr	r3, [pc, #60]	; (800372c <HAL_MspInit+0x5c>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_MspInit+0x5c>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	61d3      	str	r3, [r2, #28]
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_MspInit+0x5c>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_MspInit+0x60>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <HAL_MspInit+0x60>)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40021000 	.word	0x40021000
 8003730:	40010000 	.word	0x40010000

08003734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	; 0x30
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a3a      	ldr	r2, [pc, #232]	; (8003838 <HAL_I2C_MspInit+0x104>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d133      	bne.n	80037bc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_I2C_MspInit+0x108>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4a38      	ldr	r2, [pc, #224]	; (800383c <HAL_I2C_MspInit+0x108>)
 800375a:	f043 0308 	orr.w	r3, r3, #8
 800375e:	6193      	str	r3, [r2, #24]
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <HAL_I2C_MspInit+0x108>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800376c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003772:	2312      	movs	r3, #18
 8003774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003776:	2303      	movs	r3, #3
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377a:	f107 031c 	add.w	r3, r7, #28
 800377e:	4619      	mov	r1, r3
 8003780:	482f      	ldr	r0, [pc, #188]	; (8003840 <HAL_I2C_MspInit+0x10c>)
 8003782:	f000 fdeb 	bl	800435c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_I2C_MspInit+0x110>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379c:	4a29      	ldr	r2, [pc, #164]	; (8003844 <HAL_I2C_MspInit+0x110>)
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <HAL_I2C_MspInit+0x108>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4a25      	ldr	r2, [pc, #148]	; (800383c <HAL_I2C_MspInit+0x108>)
 80037a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037ac:	61d3      	str	r3, [r2, #28]
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <HAL_I2C_MspInit+0x108>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037ba:	e039      	b.n	8003830 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a21      	ldr	r2, [pc, #132]	; (8003848 <HAL_I2C_MspInit+0x114>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d134      	bne.n	8003830 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_I2C_MspInit+0x108>)
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <HAL_I2C_MspInit+0x108>)
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	6193      	str	r3, [r2, #24]
 80037d2:	4b1a      	ldr	r3, [pc, #104]	; (800383c <HAL_I2C_MspInit+0x108>)
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037e4:	2312      	movs	r3, #18
 80037e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037e8:	2303      	movs	r3, #3
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ec:	f107 031c 	add.w	r3, r7, #28
 80037f0:	4619      	mov	r1, r3
 80037f2:	4813      	ldr	r0, [pc, #76]	; (8003840 <HAL_I2C_MspInit+0x10c>)
 80037f4:	f000 fdb2 	bl	800435c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_I2C_MspInit+0x108>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4a0f      	ldr	r2, [pc, #60]	; (800383c <HAL_I2C_MspInit+0x108>)
 80037fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003802:	61d3      	str	r3, [r2, #28]
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_I2C_MspInit+0x108>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 8, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	2108      	movs	r1, #8
 8003814:	2021      	movs	r0, #33	; 0x21
 8003816:	f000 fae6 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800381a:	2021      	movs	r0, #33	; 0x21
 800381c:	f000 faff 	bl	8003e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 8, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2108      	movs	r1, #8
 8003824:	2022      	movs	r0, #34	; 0x22
 8003826:	f000 fade 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800382a:	2022      	movs	r0, #34	; 0x22
 800382c:	f000 faf7 	bl	8003e1e <HAL_NVIC_EnableIRQ>
}
 8003830:	bf00      	nop
 8003832:	3730      	adds	r7, #48	; 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40005400 	.word	0x40005400
 800383c:	40021000 	.word	0x40021000
 8003840:	40010c00 	.word	0x40010c00
 8003844:	40010000 	.word	0x40010000
 8003848:	40005800 	.word	0x40005800

0800384c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385c:	d113      	bne.n	8003886 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_TIM_Base_MspInit+0x44>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_TIM_Base_MspInit+0x44>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	61d3      	str	r3, [r2, #28]
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_TIM_Base_MspInit+0x44>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2108      	movs	r1, #8
 800387a:	201c      	movs	r0, #28
 800387c:	f000 fab3 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003880:	201c      	movs	r0, #28
 8003882:	f000 facc 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000

08003894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08c      	sub	sp, #48	; 0x30
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	2019      	movs	r0, #25
 80038aa:	f000 fa9c 	bl	8003de6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80038ae:	2019      	movs	r0, #25
 80038b0:	f000 fab5 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038b4:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <HAL_InitTick+0x9c>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <HAL_InitTick+0x9c>)
 80038ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038be:	6193      	str	r3, [r2, #24]
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_InitTick+0x9c>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038cc:	f107 0210 	add.w	r2, r7, #16
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f003 fd92 	bl	8007400 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80038dc:	f003 fd7c 	bl	80073d8 <HAL_RCC_GetPCLK2Freq>
 80038e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_InitTick+0xa0>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9b      	lsrs	r3, r3, #18
 80038ec:	3b01      	subs	r3, #1
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_InitTick+0xa4>)
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <HAL_InitTick+0xa8>)
 80038f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_InitTick+0xa4>)
 80038f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_InitTick+0xa4>)
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <HAL_InitTick+0xa4>)
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_InitTick+0xa4>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003910:	4809      	ldr	r0, [pc, #36]	; (8003938 <HAL_InitTick+0xa4>)
 8003912:	f003 fdc3 	bl	800749c <HAL_TIM_Base_Init>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800391c:	4806      	ldr	r0, [pc, #24]	; (8003938 <HAL_InitTick+0xa4>)
 800391e:	f003 fe0d 	bl	800753c <HAL_TIM_Base_Start_IT>
 8003922:	4603      	mov	r3, r0
 8003924:	e000      	b.n	8003928 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	3730      	adds	r7, #48	; 0x30
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	431bde83 	.word	0x431bde83
 8003938:	2000039c 	.word	0x2000039c
 800393c:	40012c00 	.word	0x40012c00

08003940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <NMI_Handler+0x4>

08003946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <HardFault_Handler+0x4>

0800394c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <MemManage_Handler+0x4>

08003952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003956:	e7fe      	b.n	8003956 <BusFault_Handler+0x4>

08003958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800395c:	e7fe      	b.n	800395c <UsageFault_Handler+0x4>

0800395e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800396e:	2002      	movs	r0, #2
 8003970:	f000 fec0 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}

08003978 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800397c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003980:	f000 feb8 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003984:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003988:	f000 feb4 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <TIM1_UP_IRQHandler+0x10>)
 8003996:	f003 fe23 	bl	80075e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	2000039c 	.word	0x2000039c

080039a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <TIM2_IRQHandler+0x10>)
 80039aa:	f003 fe19 	bl	80075e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000340 	.word	0x20000340

080039b8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <I2C2_EV_IRQHandler+0x10>)
 80039be:	f001 fa20 	bl	8004e02 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200002dc 	.word	0x200002dc

080039cc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <I2C2_ER_IRQHandler+0x10>)
 80039d2:	f001 fb87 	bl	80050e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200002dc 	.word	0x200002dc

080039e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80039e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039e8:	f000 fe84 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80039ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039f0:	f000 fe80 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
	return 1;
 80039fc:	2301      	movs	r3, #1
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <_kill>:

int _kill(int pid, int sig)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a10:	f006 ff34 	bl	800a87c <__errno>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2216      	movs	r2, #22
 8003a18:	601a      	str	r2, [r3, #0]
	return -1;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_exit>:

void _exit (int status)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffe7 	bl	8003a06 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a38:	e7fe      	b.n	8003a38 <_exit+0x12>

08003a3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e00a      	b.n	8003a62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a4c:	f3af 8000 	nop.w
 8003a50:	4601      	mov	r1, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	b2ca      	uxtb	r2, r1
 8003a5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	dbf0      	blt.n	8003a4c <_read+0x12>
	}

return len;
 8003a6a:	687b      	ldr	r3, [r7, #4]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e009      	b.n	8003a9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	60ba      	str	r2, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3301      	adds	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	dbf1      	blt.n	8003a86 <_write+0x12>
	}
	return len;
 8003aa2:	687b      	ldr	r3, [r7, #4]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_close>:

int _close(int file)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	return -1;
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ad2:	605a      	str	r2, [r3, #4]
	return 0;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <_isatty>:

int _isatty(int file)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	return 1;
 8003ae8:	2301      	movs	r3, #1
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
	return 0;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b14:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <_sbrk+0x5c>)
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <_sbrk+0x60>)
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <_sbrk+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <_sbrk+0x64>)
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <_sbrk+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <_sbrk+0x64>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d207      	bcs.n	8003b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b3c:	f006 fe9e 	bl	800a87c <__errno>
 8003b40:	4603      	mov	r3, r0
 8003b42:	220c      	movs	r2, #12
 8003b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	e009      	b.n	8003b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <_sbrk+0x64>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <_sbrk+0x64>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <_sbrk+0x64>)
 8003b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20005000 	.word	0x20005000
 8003b6c:	00000400 	.word	0x00000400
 8003b70:	20000114 	.word	0x20000114
 8003b74:	20000458 	.word	0x20000458

08003b78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b84:	f7ff fff8 	bl	8003b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b88:	480b      	ldr	r0, [pc, #44]	; (8003bb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b8a:	490c      	ldr	r1, [pc, #48]	; (8003bbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b8c:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b90:	e002      	b.n	8003b98 <LoopCopyDataInit>

08003b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b96:	3304      	adds	r3, #4

08003b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b9c:	d3f9      	bcc.n	8003b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003ba0:	4c09      	ldr	r4, [pc, #36]	; (8003bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba4:	e001      	b.n	8003baa <LoopFillZerobss>

08003ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba8:	3204      	adds	r2, #4

08003baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bac:	d3fb      	bcc.n	8003ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bae:	f006 fe6b 	bl	800a888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bb2:	f7ff fa63 	bl	800307c <main>
  bx lr
 8003bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8003bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bbc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003bc0:	0800d2e0 	.word	0x0800d2e0
  ldr r2, =_sbss
 8003bc4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003bc8:	20000458 	.word	0x20000458

08003bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bcc:	e7fe      	b.n	8003bcc <ADC1_2_IRQHandler>
	...

08003bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <HAL_Init+0x28>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <HAL_Init+0x28>)
 8003bda:	f043 0310 	orr.w	r3, r3, #16
 8003bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003be0:	2003      	movs	r0, #3
 8003be2:	f000 f8f5 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7ff fe54 	bl	8003894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bec:	f7ff fd70 	bl	80036d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40022000 	.word	0x40022000

08003bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_IncTick+0x1c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_IncTick+0x20>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <HAL_IncTick+0x20>)
 8003c0e:	6013      	str	r3, [r2, #0]
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	20000018 	.word	0x20000018
 8003c1c:	200003e4 	.word	0x200003e4

08003c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return uwTick;
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <HAL_GetTick+0x10>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	200003e4 	.word	0x200003e4

08003c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c3c:	f7ff fff0 	bl	8003c20 <HAL_GetTick>
 8003c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d005      	beq.n	8003c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_Delay+0x44>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c5a:	bf00      	nop
 8003c5c:	f7ff ffe0 	bl	8003c20 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d8f7      	bhi.n	8003c5c <HAL_Delay+0x28>
  {
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000018 	.word	0x20000018

08003c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cae:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	60d3      	str	r3, [r2, #12]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <__NVIC_GetPriorityGrouping+0x18>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	f003 0307 	and.w	r3, r3, #7
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	db0b      	blt.n	8003d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	4906      	ldr	r1, [pc, #24]	; (8003d14 <__NVIC_EnableIRQ+0x34>)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2001      	movs	r0, #1
 8003d02:	fa00 f202 	lsl.w	r2, r0, r2
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	e000e100 	.word	0xe000e100

08003d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	6039      	str	r1, [r7, #0]
 8003d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	db0a      	blt.n	8003d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	490c      	ldr	r1, [pc, #48]	; (8003d64 <__NVIC_SetPriority+0x4c>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	0112      	lsls	r2, r2, #4
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d40:	e00a      	b.n	8003d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	4908      	ldr	r1, [pc, #32]	; (8003d68 <__NVIC_SetPriority+0x50>)
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	3b04      	subs	r3, #4
 8003d50:	0112      	lsls	r2, r2, #4
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	440b      	add	r3, r1
 8003d56:	761a      	strb	r2, [r3, #24]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f1c3 0307 	rsb	r3, r3, #7
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	bf28      	it	cs
 8003d8a:	2304      	movcs	r3, #4
 8003d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3304      	adds	r3, #4
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d902      	bls.n	8003d9c <NVIC_EncodePriority+0x30>
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3b03      	subs	r3, #3
 8003d9a:	e000      	b.n	8003d9e <NVIC_EncodePriority+0x32>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43da      	mvns	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	401a      	ands	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db4:	f04f 31ff 	mov.w	r1, #4294967295
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	43d9      	mvns	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc4:	4313      	orrs	r3, r2
         );
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff4f 	bl	8003c7c <__NVIC_SetPriorityGrouping>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df8:	f7ff ff64 	bl	8003cc4 <__NVIC_GetPriorityGrouping>
 8003dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f7ff ffb2 	bl	8003d6c <NVIC_EncodePriority>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff81 	bl	8003d18 <__NVIC_SetPriority>
}
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff57 	bl	8003ce0 <__NVIC_EnableIRQ>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d005      	beq.n	8003e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2204      	movs	r2, #4
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	e051      	b.n	8003f04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 020e 	bic.w	r2, r2, #14
 8003e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <HAL_DMA_Abort_IT+0xd4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d029      	beq.n	8003ede <HAL_DMA_Abort_IT+0xa2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <HAL_DMA_Abort_IT+0xd8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_Abort_IT+0x9e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <HAL_DMA_Abort_IT+0xdc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01a      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x98>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1e      	ldr	r2, [pc, #120]	; (8003f1c <HAL_DMA_Abort_IT+0xe0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d012      	beq.n	8003ece <HAL_DMA_Abort_IT+0x92>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <HAL_DMA_Abort_IT+0xe4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x8c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1b      	ldr	r2, [pc, #108]	; (8003f24 <HAL_DMA_Abort_IT+0xe8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d102      	bne.n	8003ec2 <HAL_DMA_Abort_IT+0x86>
 8003ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ec0:	e00e      	b.n	8003ee0 <HAL_DMA_Abort_IT+0xa4>
 8003ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ec6:	e00b      	b.n	8003ee0 <HAL_DMA_Abort_IT+0xa4>
 8003ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ecc:	e008      	b.n	8003ee0 <HAL_DMA_Abort_IT+0xa4>
 8003ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ed2:	e005      	b.n	8003ee0 <HAL_DMA_Abort_IT+0xa4>
 8003ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed8:	e002      	b.n	8003ee0 <HAL_DMA_Abort_IT+0xa4>
 8003eda:	2310      	movs	r3, #16
 8003edc:	e000      	b.n	8003ee0 <HAL_DMA_Abort_IT+0xa4>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_DMA_Abort_IT+0xec>)
 8003ee2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
    } 
  }
  return status;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40020008 	.word	0x40020008
 8003f14:	4002001c 	.word	0x4002001c
 8003f18:	40020030 	.word	0x40020030
 8003f1c:	40020044 	.word	0x40020044
 8003f20:	40020058 	.word	0x40020058
 8003f24:	4002006c 	.word	0x4002006c
 8003f28:	40020000 	.word	0x40020000

08003f2c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f3a:	b2db      	uxtb	r3, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f62:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_FLASH_Program+0xd8>)
 8003f64:	7e1b      	ldrb	r3, [r3, #24]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_FLASH_Program+0x26>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e054      	b.n	8004018 <HAL_FLASH_Program+0xd0>
 8003f6e:	4b2c      	ldr	r3, [pc, #176]	; (8004020 <HAL_FLASH_Program+0xd8>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f78:	f000 f8b2 	bl	80040e0 <FLASH_WaitForLastOperation>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d144      	bne.n	8004010 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	757b      	strb	r3, [r7, #21]
 8003f90:	e007      	b.n	8003fa2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d102      	bne.n	8003f9e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	757b      	strb	r3, [r7, #21]
 8003f9c:	e001      	b.n	8003fa2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75bb      	strb	r3, [r7, #22]
 8003fa6:	e02d      	b.n	8004004 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003fa8:	7dbb      	ldrb	r3, [r7, #22]
 8003faa:	005a      	lsls	r2, r3, #1
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	eb02 0c03 	add.w	ip, r2, r3
 8003fb2:	7dbb      	ldrb	r3, [r7, #22]
 8003fb4:	0119      	lsls	r1, r3, #4
 8003fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fba:	f1c1 0620 	rsb	r6, r1, #32
 8003fbe:	f1a1 0020 	sub.w	r0, r1, #32
 8003fc2:	fa22 f401 	lsr.w	r4, r2, r1
 8003fc6:	fa03 f606 	lsl.w	r6, r3, r6
 8003fca:	4334      	orrs	r4, r6
 8003fcc:	fa23 f000 	lsr.w	r0, r3, r0
 8003fd0:	4304      	orrs	r4, r0
 8003fd2:	fa23 f501 	lsr.w	r5, r3, r1
 8003fd6:	b2a3      	uxth	r3, r4
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4660      	mov	r0, ip
 8003fdc:	f000 f864 	bl	80040a8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003fe0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fe4:	f000 f87c 	bl	80040e0 <FLASH_WaitForLastOperation>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <HAL_FLASH_Program+0xdc>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <HAL_FLASH_Program+0xdc>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003ffe:	7dbb      	ldrb	r3, [r7, #22]
 8004000:	3301      	adds	r3, #1
 8004002:	75bb      	strb	r3, [r7, #22]
 8004004:	7dba      	ldrb	r2, [r7, #22]
 8004006:	7d7b      	ldrb	r3, [r7, #21]
 8004008:	429a      	cmp	r2, r3
 800400a:	d3cd      	bcc.n	8003fa8 <HAL_FLASH_Program+0x60>
 800400c:	e000      	b.n	8004010 <HAL_FLASH_Program+0xc8>
      {
        break;
 800400e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_FLASH_Program+0xd8>)
 8004012:	2200      	movs	r2, #0
 8004014:	761a      	strb	r2, [r3, #24]

  return status;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004020:	200003e8 	.word	0x200003e8
 8004024:	40022000 	.word	0x40022000

08004028 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_FLASH_Unlock+0x40>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_FLASH_Unlock+0x40>)
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <HAL_FLASH_Unlock+0x44>)
 8004042:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <HAL_FLASH_Unlock+0x40>)
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_FLASH_Unlock+0x48>)
 8004048:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <HAL_FLASH_Unlock+0x40>)
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800405a:	79fb      	ldrb	r3, [r7, #7]
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40022000 	.word	0x40022000
 800406c:	45670123 	.word	0x45670123
 8004070:	cdef89ab 	.word	0xcdef89ab

08004074 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_FLASH_Lock+0x1c>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_FLASH_Lock+0x1c>)
 800407e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004082:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40022000 	.word	0x40022000

08004094 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004098:	4b02      	ldr	r3, [pc, #8]	; (80040a4 <HAL_FLASH_GetError+0x10>)
 800409a:	69db      	ldr	r3, [r3, #28]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	200003e8 	.word	0x200003e8

080040a8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <FLASH_Program_HalfWord+0x30>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <FLASH_Program_HalfWord+0x34>)
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	4a07      	ldr	r2, [pc, #28]	; (80040dc <FLASH_Program_HalfWord+0x34>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	887a      	ldrh	r2, [r7, #2]
 80040ca:	801a      	strh	r2, [r3, #0]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	200003e8 	.word	0x200003e8
 80040dc:	40022000 	.word	0x40022000

080040e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80040e8:	f7ff fd9a 	bl	8003c20 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80040ee:	e010      	b.n	8004112 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d00c      	beq.n	8004112 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <FLASH_WaitForLastOperation+0x2e>
 80040fe:	f7ff fd8f 	bl	8003c20 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d201      	bcs.n	8004112 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e025      	b.n	800415e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <FLASH_WaitForLastOperation+0x88>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e8      	bne.n	80040f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <FLASH_WaitForLastOperation+0x88>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <FLASH_WaitForLastOperation+0x88>)
 800412c:	2220      	movs	r2, #32
 800412e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <FLASH_WaitForLastOperation+0x88>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <FLASH_WaitForLastOperation+0x88>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <FLASH_WaitForLastOperation+0x88>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004154:	f000 f80a 	bl	800416c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40022000 	.word	0x40022000

0800416c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004176:	4b23      	ldr	r3, [pc, #140]	; (8004204 <FLASH_SetErrorCode+0x98>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004182:	4b21      	ldr	r3, [pc, #132]	; (8004208 <FLASH_SetErrorCode+0x9c>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <FLASH_SetErrorCode+0x9c>)
 800418c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f043 0310 	orr.w	r3, r3, #16
 8004194:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004196:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <FLASH_SetErrorCode+0x98>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80041a2:	4b19      	ldr	r3, [pc, #100]	; (8004208 <FLASH_SetErrorCode+0x9c>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <FLASH_SetErrorCode+0x9c>)
 80041ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <FLASH_SetErrorCode+0x98>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <FLASH_SetErrorCode+0x9c>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f043 0304 	orr.w	r3, r3, #4
 80041ca:	4a0f      	ldr	r2, [pc, #60]	; (8004208 <FLASH_SetErrorCode+0x9c>)
 80041cc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <FLASH_SetErrorCode+0x98>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <FLASH_SetErrorCode+0x98>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f240 1201 	movw	r2, #257	; 0x101
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d106      	bne.n	80041f2 <FLASH_SetErrorCode+0x86>
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <FLASH_SetErrorCode+0x98>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4a06      	ldr	r2, [pc, #24]	; (8004204 <FLASH_SetErrorCode+0x98>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	61d3      	str	r3, [r2, #28]
}  
 80041f0:	e002      	b.n	80041f8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80041f2:	4a04      	ldr	r2, [pc, #16]	; (8004204 <FLASH_SetErrorCode+0x98>)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60d3      	str	r3, [r2, #12]
}  
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40022000 	.word	0x40022000
 8004208:	200003e8 	.word	0x200003e8

0800420c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800421e:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <HAL_FLASHEx_Erase+0xd0>)
 8004220:	7e1b      	ldrb	r3, [r3, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_FLASHEx_Erase+0x1e>
 8004226:	2302      	movs	r3, #2
 8004228:	e053      	b.n	80042d2 <HAL_FLASHEx_Erase+0xc6>
 800422a:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <HAL_FLASHEx_Erase+0xd0>)
 800422c:	2201      	movs	r2, #1
 800422e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d116      	bne.n	8004266 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004238:	f24c 3050 	movw	r0, #50000	; 0xc350
 800423c:	f7ff ff50 	bl	80040e0 <FLASH_WaitForLastOperation>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d141      	bne.n	80042ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004246:	2001      	movs	r0, #1
 8004248:	f000 f84c 	bl	80042e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800424c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004250:	f7ff ff46 	bl	80040e0 <FLASH_WaitForLastOperation>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_FLASHEx_Erase+0xd4>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <HAL_FLASHEx_Erase+0xd4>)
 800425e:	f023 0304 	bic.w	r3, r3, #4
 8004262:	6113      	str	r3, [r2, #16]
 8004264:	e031      	b.n	80042ca <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004266:	f24c 3050 	movw	r0, #50000	; 0xc350
 800426a:	f7ff ff39 	bl	80040e0 <FLASH_WaitForLastOperation>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d12a      	bne.n	80042ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	e019      	b.n	80042b8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004284:	68b8      	ldr	r0, [r7, #8]
 8004286:	f000 f849 	bl	800431c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800428a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800428e:	f7ff ff27 	bl	80040e0 <FLASH_WaitForLastOperation>
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_FLASHEx_Erase+0xd4>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_FLASHEx_Erase+0xd4>)
 800429c:	f023 0302 	bic.w	r3, r3, #2
 80042a0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	601a      	str	r2, [r3, #0]
            break;
 80042ae:	e00c      	b.n	80042ca <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	029a      	lsls	r2, r3, #10
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d3dc      	bcc.n	8004284 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042ca:	4b04      	ldr	r3, [pc, #16]	; (80042dc <HAL_FLASHEx_Erase+0xd0>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	761a      	strb	r2, [r3, #24]

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	200003e8 	.word	0x200003e8
 80042e0:	40022000 	.word	0x40022000

080042e4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <FLASH_MassErase+0x30>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <FLASH_MassErase+0x34>)
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <FLASH_MassErase+0x34>)
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <FLASH_MassErase+0x34>)
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	4a05      	ldr	r2, [pc, #20]	; (8004318 <FLASH_MassErase+0x34>)
 8004304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004308:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	200003e8 	.word	0x200003e8
 8004318:	40022000 	.word	0x40022000

0800431c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <FLASH_PageErase+0x38>)
 8004326:	2200      	movs	r2, #0
 8004328:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <FLASH_PageErase+0x3c>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <FLASH_PageErase+0x3c>)
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <FLASH_PageErase+0x3c>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <FLASH_PageErase+0x3c>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	4a05      	ldr	r2, [pc, #20]	; (8004358 <FLASH_PageErase+0x3c>)
 8004342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004346:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	200003e8 	.word	0x200003e8
 8004358:	40022000 	.word	0x40022000

0800435c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800435c:	b480      	push	{r7}
 800435e:	b08b      	sub	sp, #44	; 0x2c
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004366:	2300      	movs	r3, #0
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800436a:	2300      	movs	r3, #0
 800436c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800436e:	e169      	b.n	8004644 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004370:	2201      	movs	r2, #1
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	429a      	cmp	r2, r3
 800438a:	f040 8158 	bne.w	800463e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4a9a      	ldr	r2, [pc, #616]	; (80045fc <HAL_GPIO_Init+0x2a0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d05e      	beq.n	8004456 <HAL_GPIO_Init+0xfa>
 8004398:	4a98      	ldr	r2, [pc, #608]	; (80045fc <HAL_GPIO_Init+0x2a0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d875      	bhi.n	800448a <HAL_GPIO_Init+0x12e>
 800439e:	4a98      	ldr	r2, [pc, #608]	; (8004600 <HAL_GPIO_Init+0x2a4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d058      	beq.n	8004456 <HAL_GPIO_Init+0xfa>
 80043a4:	4a96      	ldr	r2, [pc, #600]	; (8004600 <HAL_GPIO_Init+0x2a4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d86f      	bhi.n	800448a <HAL_GPIO_Init+0x12e>
 80043aa:	4a96      	ldr	r2, [pc, #600]	; (8004604 <HAL_GPIO_Init+0x2a8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d052      	beq.n	8004456 <HAL_GPIO_Init+0xfa>
 80043b0:	4a94      	ldr	r2, [pc, #592]	; (8004604 <HAL_GPIO_Init+0x2a8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d869      	bhi.n	800448a <HAL_GPIO_Init+0x12e>
 80043b6:	4a94      	ldr	r2, [pc, #592]	; (8004608 <HAL_GPIO_Init+0x2ac>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d04c      	beq.n	8004456 <HAL_GPIO_Init+0xfa>
 80043bc:	4a92      	ldr	r2, [pc, #584]	; (8004608 <HAL_GPIO_Init+0x2ac>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d863      	bhi.n	800448a <HAL_GPIO_Init+0x12e>
 80043c2:	4a92      	ldr	r2, [pc, #584]	; (800460c <HAL_GPIO_Init+0x2b0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d046      	beq.n	8004456 <HAL_GPIO_Init+0xfa>
 80043c8:	4a90      	ldr	r2, [pc, #576]	; (800460c <HAL_GPIO_Init+0x2b0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d85d      	bhi.n	800448a <HAL_GPIO_Init+0x12e>
 80043ce:	2b12      	cmp	r3, #18
 80043d0:	d82a      	bhi.n	8004428 <HAL_GPIO_Init+0xcc>
 80043d2:	2b12      	cmp	r3, #18
 80043d4:	d859      	bhi.n	800448a <HAL_GPIO_Init+0x12e>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <HAL_GPIO_Init+0x80>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004457 	.word	0x08004457
 80043e0:	08004431 	.word	0x08004431
 80043e4:	08004443 	.word	0x08004443
 80043e8:	08004485 	.word	0x08004485
 80043ec:	0800448b 	.word	0x0800448b
 80043f0:	0800448b 	.word	0x0800448b
 80043f4:	0800448b 	.word	0x0800448b
 80043f8:	0800448b 	.word	0x0800448b
 80043fc:	0800448b 	.word	0x0800448b
 8004400:	0800448b 	.word	0x0800448b
 8004404:	0800448b 	.word	0x0800448b
 8004408:	0800448b 	.word	0x0800448b
 800440c:	0800448b 	.word	0x0800448b
 8004410:	0800448b 	.word	0x0800448b
 8004414:	0800448b 	.word	0x0800448b
 8004418:	0800448b 	.word	0x0800448b
 800441c:	0800448b 	.word	0x0800448b
 8004420:	08004439 	.word	0x08004439
 8004424:	0800444d 	.word	0x0800444d
 8004428:	4a79      	ldr	r2, [pc, #484]	; (8004610 <HAL_GPIO_Init+0x2b4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800442e:	e02c      	b.n	800448a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	623b      	str	r3, [r7, #32]
          break;
 8004436:	e029      	b.n	800448c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	3304      	adds	r3, #4
 800443e:	623b      	str	r3, [r7, #32]
          break;
 8004440:	e024      	b.n	800448c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	3308      	adds	r3, #8
 8004448:	623b      	str	r3, [r7, #32]
          break;
 800444a:	e01f      	b.n	800448c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	330c      	adds	r3, #12
 8004452:	623b      	str	r3, [r7, #32]
          break;
 8004454:	e01a      	b.n	800448c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800445e:	2304      	movs	r3, #4
 8004460:	623b      	str	r3, [r7, #32]
          break;
 8004462:	e013      	b.n	800448c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d105      	bne.n	8004478 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800446c:	2308      	movs	r3, #8
 800446e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	611a      	str	r2, [r3, #16]
          break;
 8004476:	e009      	b.n	800448c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004478:	2308      	movs	r3, #8
 800447a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	615a      	str	r2, [r3, #20]
          break;
 8004482:	e003      	b.n	800448c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
          break;
 8004488:	e000      	b.n	800448c <HAL_GPIO_Init+0x130>
          break;
 800448a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2bff      	cmp	r3, #255	; 0xff
 8004490:	d801      	bhi.n	8004496 <HAL_GPIO_Init+0x13a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	e001      	b.n	800449a <HAL_GPIO_Init+0x13e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3304      	adds	r3, #4
 800449a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2bff      	cmp	r3, #255	; 0xff
 80044a0:	d802      	bhi.n	80044a8 <HAL_GPIO_Init+0x14c>
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	e002      	b.n	80044ae <HAL_GPIO_Init+0x152>
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	3b08      	subs	r3, #8
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	210f      	movs	r1, #15
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	6a39      	ldr	r1, [r7, #32]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	431a      	orrs	r2, r3
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80b1 	beq.w	800463e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044dc:	4b4d      	ldr	r3, [pc, #308]	; (8004614 <HAL_GPIO_Init+0x2b8>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	4a4c      	ldr	r2, [pc, #304]	; (8004614 <HAL_GPIO_Init+0x2b8>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6193      	str	r3, [r2, #24]
 80044e8:	4b4a      	ldr	r3, [pc, #296]	; (8004614 <HAL_GPIO_Init+0x2b8>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044f4:	4a48      	ldr	r2, [pc, #288]	; (8004618 <HAL_GPIO_Init+0x2bc>)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	3302      	adds	r3, #2
 80044fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004500:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	220f      	movs	r2, #15
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a40      	ldr	r2, [pc, #256]	; (800461c <HAL_GPIO_Init+0x2c0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_GPIO_Init+0x1ec>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a3f      	ldr	r2, [pc, #252]	; (8004620 <HAL_GPIO_Init+0x2c4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00d      	beq.n	8004544 <HAL_GPIO_Init+0x1e8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a3e      	ldr	r2, [pc, #248]	; (8004624 <HAL_GPIO_Init+0x2c8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <HAL_GPIO_Init+0x1e4>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3d      	ldr	r2, [pc, #244]	; (8004628 <HAL_GPIO_Init+0x2cc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_GPIO_Init+0x1e0>
 8004538:	2303      	movs	r3, #3
 800453a:	e006      	b.n	800454a <HAL_GPIO_Init+0x1ee>
 800453c:	2304      	movs	r3, #4
 800453e:	e004      	b.n	800454a <HAL_GPIO_Init+0x1ee>
 8004540:	2302      	movs	r3, #2
 8004542:	e002      	b.n	800454a <HAL_GPIO_Init+0x1ee>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_GPIO_Init+0x1ee>
 8004548:	2300      	movs	r3, #0
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	f002 0203 	and.w	r2, r2, #3
 8004550:	0092      	lsls	r2, r2, #2
 8004552:	4093      	lsls	r3, r2
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800455a:	492f      	ldr	r1, [pc, #188]	; (8004618 <HAL_GPIO_Init+0x2bc>)
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	3302      	adds	r3, #2
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004574:	4b2d      	ldr	r3, [pc, #180]	; (800462c <HAL_GPIO_Init+0x2d0>)
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	492c      	ldr	r1, [pc, #176]	; (800462c <HAL_GPIO_Init+0x2d0>)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]
 8004580:	e006      	b.n	8004590 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004582:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_GPIO_Init+0x2d0>)
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	43db      	mvns	r3, r3
 800458a:	4928      	ldr	r1, [pc, #160]	; (800462c <HAL_GPIO_Init+0x2d0>)
 800458c:	4013      	ands	r3, r2
 800458e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <HAL_GPIO_Init+0x2d0>)
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	4922      	ldr	r1, [pc, #136]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
 80045a8:	e006      	b.n	80045b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045aa:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	491e      	ldr	r1, [pc, #120]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d006      	beq.n	80045d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	4918      	ldr	r1, [pc, #96]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	e006      	b.n	80045e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	43db      	mvns	r3, r3
 80045da:	4914      	ldr	r1, [pc, #80]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045dc:	4013      	ands	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d021      	beq.n	8004630 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	490e      	ldr	r1, [pc, #56]	; (800462c <HAL_GPIO_Init+0x2d0>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]
 80045f8:	e021      	b.n	800463e <HAL_GPIO_Init+0x2e2>
 80045fa:	bf00      	nop
 80045fc:	10320000 	.word	0x10320000
 8004600:	10310000 	.word	0x10310000
 8004604:	10220000 	.word	0x10220000
 8004608:	10210000 	.word	0x10210000
 800460c:	10120000 	.word	0x10120000
 8004610:	10110000 	.word	0x10110000
 8004614:	40021000 	.word	0x40021000
 8004618:	40010000 	.word	0x40010000
 800461c:	40010800 	.word	0x40010800
 8004620:	40010c00 	.word	0x40010c00
 8004624:	40011000 	.word	0x40011000
 8004628:	40011400 	.word	0x40011400
 800462c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_GPIO_Init+0x304>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	43db      	mvns	r3, r3
 8004638:	4909      	ldr	r1, [pc, #36]	; (8004660 <HAL_GPIO_Init+0x304>)
 800463a:	4013      	ands	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	3301      	adds	r3, #1
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	f47f ae8e 	bne.w	8004370 <HAL_GPIO_Init+0x14>
  }
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	372c      	adds	r7, #44	; 0x2c
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	40010400 	.word	0x40010400

08004664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	e001      	b.n	8004686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	807b      	strh	r3, [r7, #2]
 800469e:	4613      	mov	r3, r2
 80046a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046a2:	787b      	ldrb	r3, [r7, #1]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a8:	887a      	ldrh	r2, [r7, #2]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046ae:	e003      	b.n	80046b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046b0:	887b      	ldrh	r3, [r7, #2]
 80046b2:	041a      	lsls	r2, r3, #16
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	611a      	str	r2, [r3, #16]
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4013      	ands	r3, r2
 80046da:	041a      	lsls	r2, r3, #16
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	43d9      	mvns	r1, r3
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	400b      	ands	r3, r1
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	611a      	str	r2, [r3, #16]
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d006      	beq.n	8004718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800470a:	4a05      	ldr	r2, [pc, #20]	; (8004720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe fc5c 	bl	8002fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40010400 	.word	0x40010400

08004724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e12b      	b.n	800498e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fe fff2 	bl	8003734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	; 0x24
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004788:	f002 fe12 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 800478c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4a81      	ldr	r2, [pc, #516]	; (8004998 <HAL_I2C_Init+0x274>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d807      	bhi.n	80047a8 <HAL_I2C_Init+0x84>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a80      	ldr	r2, [pc, #512]	; (800499c <HAL_I2C_Init+0x278>)
 800479c:	4293      	cmp	r3, r2
 800479e:	bf94      	ite	ls
 80047a0:	2301      	movls	r3, #1
 80047a2:	2300      	movhi	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e006      	b.n	80047b6 <HAL_I2C_Init+0x92>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a7d      	ldr	r2, [pc, #500]	; (80049a0 <HAL_I2C_Init+0x27c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	bf94      	ite	ls
 80047b0:	2301      	movls	r3, #1
 80047b2:	2300      	movhi	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0e7      	b.n	800498e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a78      	ldr	r2, [pc, #480]	; (80049a4 <HAL_I2C_Init+0x280>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0c9b      	lsrs	r3, r3, #18
 80047c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <HAL_I2C_Init+0x274>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d802      	bhi.n	80047f8 <HAL_I2C_Init+0xd4>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	3301      	adds	r3, #1
 80047f6:	e009      	b.n	800480c <HAL_I2C_Init+0xe8>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	4a69      	ldr	r2, [pc, #420]	; (80049a8 <HAL_I2C_Init+0x284>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	3301      	adds	r3, #1
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	430b      	orrs	r3, r1
 8004812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800481e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	495c      	ldr	r1, [pc, #368]	; (8004998 <HAL_I2C_Init+0x274>)
 8004828:	428b      	cmp	r3, r1
 800482a:	d819      	bhi.n	8004860 <HAL_I2C_Init+0x13c>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1e59      	subs	r1, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fbb1 f3f3 	udiv	r3, r1, r3
 800483a:	1c59      	adds	r1, r3, #1
 800483c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004840:	400b      	ands	r3, r1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_I2C_Init+0x138>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1e59      	subs	r1, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	fbb1 f3f3 	udiv	r3, r1, r3
 8004854:	3301      	adds	r3, #1
 8004856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485a:	e051      	b.n	8004900 <HAL_I2C_Init+0x1dc>
 800485c:	2304      	movs	r3, #4
 800485e:	e04f      	b.n	8004900 <HAL_I2C_Init+0x1dc>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d111      	bne.n	800488c <HAL_I2C_Init+0x168>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1e58      	subs	r0, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	440b      	add	r3, r1
 8004876:	fbb0 f3f3 	udiv	r3, r0, r3
 800487a:	3301      	adds	r3, #1
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e012      	b.n	80048b2 <HAL_I2C_Init+0x18e>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	1e58      	subs	r0, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	0099      	lsls	r1, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a2:	3301      	adds	r3, #1
 80048a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Init+0x196>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e022      	b.n	8004900 <HAL_I2C_Init+0x1dc>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10e      	bne.n	80048e0 <HAL_I2C_Init+0x1bc>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1e58      	subs	r0, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	440b      	add	r3, r1
 80048d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d4:	3301      	adds	r3, #1
 80048d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	e00f      	b.n	8004900 <HAL_I2C_Init+0x1dc>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1e58      	subs	r0, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	0099      	lsls	r1, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f6:	3301      	adds	r3, #1
 80048f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	6809      	ldr	r1, [r1, #0]
 8004904:	4313      	orrs	r3, r2
 8004906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800492e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6911      	ldr	r1, [r2, #16]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68d2      	ldr	r2, [r2, #12]
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	430b      	orrs	r3, r1
 8004942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	000186a0 	.word	0x000186a0
 800499c:	001e847f 	.word	0x001e847f
 80049a0:	003d08ff 	.word	0x003d08ff
 80049a4:	431bde83 	.word	0x431bde83
 80049a8:	10624dd3 	.word	0x10624dd3

080049ac <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b80      	cmp	r3, #128	; 0x80
 80049c0:	d103      	bne.n	80049ca <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
  }
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	461a      	mov	r2, r3
 80049e0:	460b      	mov	r3, r1
 80049e2:	817b      	strh	r3, [r7, #10]
 80049e4:	4613      	mov	r3, r2
 80049e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049e8:	f7ff f91a 	bl	8003c20 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	f040 80e0 	bne.w	8004bbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2319      	movs	r3, #25
 8004a02:	2201      	movs	r2, #1
 8004a04:	4970      	ldr	r1, [pc, #448]	; (8004bc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f001 fee6 	bl	80067d8 <I2C_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
 8004a14:	e0d3      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_I2C_Master_Transmit+0x50>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0cc      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d007      	beq.n	8004a4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2221      	movs	r2, #33	; 0x21
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2210      	movs	r2, #16
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	893a      	ldrh	r2, [r7, #8]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a50      	ldr	r2, [pc, #320]	; (8004bcc <HAL_I2C_Master_Transmit+0x1f8>)
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a8c:	8979      	ldrh	r1, [r7, #10]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f001 fd76 	bl	8006584 <I2C_MasterRequestWrite>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e08d      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ab8:	e066      	b.n	8004b88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	6a39      	ldr	r1, [r7, #32]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f001 ffa4 	bl	8006a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d107      	bne.n	8004ae2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06b      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d11b      	bne.n	8004b5c <HAL_I2C_Master_Transmit+0x188>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d017      	beq.n	8004b5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	781a      	ldrb	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	6a39      	ldr	r1, [r7, #32]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f001 ff9b 	bl	8006a9c <I2C_WaitOnBTFFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00d      	beq.n	8004b88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d107      	bne.n	8004b84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e01a      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d194      	bne.n	8004aba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	00100002 	.word	0x00100002
 8004bcc:	ffff0000 	.word	0xffff0000

08004bd0 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bec:	2b28      	cmp	r3, #40	; 0x28
 8004bee:	d15b      	bne.n	8004ca8 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e054      	b.n	8004caa <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e04d      	b.n	8004caa <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d007      	beq.n	8004c34 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2229      	movs	r2, #41	; 0x29
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004ca2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e000      	b.n	8004caa <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cd0:	2b28      	cmp	r3, #40	; 0x28
 8004cd2:	d15b      	bne.n	8004d8c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e054      	b.n	8004d8e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e04d      	b.n	8004d8e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d007      	beq.n	8004d18 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	222a      	movs	r2, #42	; 0x2a
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004d86:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e000      	b.n	8004d8e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004d8c:	2302      	movs	r3, #2
  }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d124      	bne.n	8004df6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2228      	movs	r2, #40	; 0x28
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d007      	beq.n	8004dd2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004de0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004df0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
  }
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b088      	sub	sp, #32
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d003      	beq.n	8004e3a <HAL_I2C_EV_IRQHandler+0x38>
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	f040 80c1 	bne.w	8004fbc <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10d      	bne.n	8004e70 <HAL_I2C_EV_IRQHandler+0x6e>
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e5a:	d003      	beq.n	8004e64 <HAL_I2C_EV_IRQHandler+0x62>
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e62:	d101      	bne.n	8004e68 <HAL_I2C_EV_IRQHandler+0x66>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_I2C_EV_IRQHandler+0x68>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	f000 8132 	beq.w	80050d4 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00c      	beq.n	8004e94 <HAL_I2C_EV_IRQHandler+0x92>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0a5b      	lsrs	r3, r3, #9
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d006      	beq.n	8004e94 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f001 feb0 	bl	8006bec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fd54 	bl	800593a <I2C_Master_SB>
 8004e92:	e092      	b.n	8004fba <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <HAL_I2C_EV_IRQHandler+0xb2>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	0a5b      	lsrs	r3, r3, #9
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fdc9 	bl	8005a44 <I2C_Master_ADD10>
 8004eb2:	e082      	b.n	8004fba <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d009      	beq.n	8004ed4 <HAL_I2C_EV_IRQHandler+0xd2>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	0a5b      	lsrs	r3, r3, #9
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fde2 	bl	8005a96 <I2C_Master_ADDR>
 8004ed2:	e072      	b.n	8004fba <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	089b      	lsrs	r3, r3, #2
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d03b      	beq.n	8004f58 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eee:	f000 80f3 	beq.w	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	09db      	lsrs	r3, r3, #7
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00f      	beq.n	8004f1e <HAL_I2C_EV_IRQHandler+0x11c>
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	0a9b      	lsrs	r3, r3, #10
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_I2C_EV_IRQHandler+0x11c>
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	089b      	lsrs	r3, r3, #2
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9c0 	bl	800529c <I2C_MasterTransmit_TXE>
 8004f1c:	e04d      	b.n	8004fba <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80d6 	beq.w	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	0a5b      	lsrs	r3, r3, #9
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80cf 	beq.w	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	2b21      	cmp	r3, #33	; 0x21
 8004f3e:	d103      	bne.n	8004f48 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fa47 	bl	80053d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f46:	e0c7      	b.n	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	f040 80c4 	bne.w	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fab5 	bl	80054c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f56:	e0bf      	b.n	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f66:	f000 80b7 	beq.w	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	099b      	lsrs	r3, r3, #6
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00f      	beq.n	8004f96 <HAL_I2C_EV_IRQHandler+0x194>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	0a9b      	lsrs	r3, r3, #10
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_I2C_EV_IRQHandler+0x194>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fb2e 	bl	80055f0 <I2C_MasterReceive_RXNE>
 8004f94:	e011      	b.n	8004fba <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	089b      	lsrs	r3, r3, #2
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 809a 	beq.w	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	0a5b      	lsrs	r3, r3, #9
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8093 	beq.w	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fbd7 	bl	8005766 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fb8:	e08e      	b.n	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004fba:	e08d      	b.n	80050d8 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e007      	b.n	8004fde <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d012      	beq.n	8005010 <HAL_I2C_EV_IRQHandler+0x20e>
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	0a5b      	lsrs	r3, r3, #9
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 ff9b 	bl	8005f44 <I2C_Slave_ADDR>
 800500e:	e066      	b.n	80050de <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <HAL_I2C_EV_IRQHandler+0x22e>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	0a5b      	lsrs	r3, r3, #9
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 ffd5 	bl	8005fd8 <I2C_Slave_STOPF>
 800502e:	e056      	b.n	80050de <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005030:	7bbb      	ldrb	r3, [r7, #14]
 8005032:	2b21      	cmp	r3, #33	; 0x21
 8005034:	d002      	beq.n	800503c <HAL_I2C_EV_IRQHandler+0x23a>
 8005036:	7bbb      	ldrb	r3, [r7, #14]
 8005038:	2b29      	cmp	r3, #41	; 0x29
 800503a:	d125      	bne.n	8005088 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	09db      	lsrs	r3, r3, #7
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00f      	beq.n	8005068 <HAL_I2C_EV_IRQHandler+0x266>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	0a9b      	lsrs	r3, r3, #10
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <HAL_I2C_EV_IRQHandler+0x266>
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	089b      	lsrs	r3, r3, #2
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 feb3 	bl	8005dcc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005066:	e039      	b.n	80050dc <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d033      	beq.n	80050dc <HAL_I2C_EV_IRQHandler+0x2da>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	0a5b      	lsrs	r3, r3, #9
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02d      	beq.n	80050dc <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fee0 	bl	8005e46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005086:	e029      	b.n	80050dc <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	099b      	lsrs	r3, r3, #6
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00f      	beq.n	80050b4 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	0a9b      	lsrs	r3, r3, #10
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d009      	beq.n	80050b4 <HAL_I2C_EV_IRQHandler+0x2b2>
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d103      	bne.n	80050b4 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 feea 	bl	8005e86 <I2C_SlaveReceive_RXNE>
 80050b2:	e014      	b.n	80050de <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00e      	beq.n	80050de <HAL_I2C_EV_IRQHandler+0x2dc>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	0a5b      	lsrs	r3, r3, #9
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 ff18 	bl	8005f02 <I2C_SlaveReceive_BTF>
 80050d2:	e004      	b.n	80050de <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050dc:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005106:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d016      	beq.n	8005142 <HAL_I2C_ER_IRQHandler+0x5e>
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d010      	beq.n	8005142 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005130:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005140:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	0a5b      	lsrs	r3, r3, #9
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00e      	beq.n	800516c <HAL_I2C_ER_IRQHandler+0x88>
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	0a1b      	lsrs	r3, r3, #8
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	f043 0302 	orr.w	r3, r3, #2
 8005160:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800516a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	0a9b      	lsrs	r3, r3, #10
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d03f      	beq.n	80051f8 <HAL_I2C_ER_IRQHandler+0x114>
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d039      	beq.n	80051f8 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005184:	7efb      	ldrb	r3, [r7, #27]
 8005186:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800519e:	7ebb      	ldrb	r3, [r7, #26]
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d112      	bne.n	80051ca <HAL_I2C_ER_IRQHandler+0xe6>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10f      	bne.n	80051ca <HAL_I2C_ER_IRQHandler+0xe6>
 80051aa:	7cfb      	ldrb	r3, [r7, #19]
 80051ac:	2b21      	cmp	r3, #33	; 0x21
 80051ae:	d008      	beq.n	80051c2 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	2b29      	cmp	r3, #41	; 0x29
 80051b4:	d005      	beq.n	80051c2 <HAL_I2C_ER_IRQHandler+0xde>
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	2b28      	cmp	r3, #40	; 0x28
 80051ba:	d106      	bne.n	80051ca <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b21      	cmp	r3, #33	; 0x21
 80051c0:	d103      	bne.n	80051ca <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 f838 	bl	8006238 <I2C_Slave_AF>
 80051c8:	e016      	b.n	80051f8 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051d2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	f043 0304 	orr.w	r3, r3, #4
 80051da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051dc:	7efb      	ldrb	r3, [r7, #27]
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d002      	beq.n	80051e8 <HAL_I2C_ER_IRQHandler+0x104>
 80051e2:	7efb      	ldrb	r3, [r7, #27]
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d107      	bne.n	80051f8 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	0adb      	lsrs	r3, r3, #11
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00e      	beq.n	8005222 <HAL_I2C_ER_IRQHandler+0x13e>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	f043 0308 	orr.w	r3, r3, #8
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005220:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f001 f873 	bl	8006320 <I2C_ITError>
  }
}
 800523a:	bf00      	nop
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr

0800528a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d150      	bne.n	8005364 <I2C_MasterTransmit_TXE+0xc8>
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b21      	cmp	r3, #33	; 0x21
 80052c6:	d14d      	bne.n	8005364 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d01d      	beq.n	800530a <I2C_MasterTransmit_TXE+0x6e>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d01a      	beq.n	800530a <I2C_MasterTransmit_TXE+0x6e>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052da:	d016      	beq.n	800530a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2211      	movs	r2, #17
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff ff9d 	bl	8005242 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005308:	e060      	b.n	80053cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005318:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005328:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d107      	bne.n	8005354 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff8a 	bl	8005266 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005352:	e03b      	b.n	80053cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ff70 	bl	8005242 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005362:	e033      	b.n	80053cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b21      	cmp	r3, #33	; 0x21
 8005368:	d005      	beq.n	8005376 <I2C_MasterTransmit_TXE+0xda>
 800536a:	7bbb      	ldrb	r3, [r7, #14]
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d12d      	bne.n	80053cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	2b22      	cmp	r3, #34	; 0x22
 8005374:	d12a      	bne.n	80053cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d108      	bne.n	8005392 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005390:	e01c      	b.n	80053cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d103      	bne.n	80053a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f88e 	bl	80054c0 <I2C_MemoryTransmit_TXE_BTF>
}
 80053a4:	e012      	b.n	80053cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	781a      	ldrb	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80053ca:	e7ff      	b.n	80053cc <I2C_MasterTransmit_TXE+0x130>
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b21      	cmp	r3, #33	; 0x21
 80053ec:	d164      	bne.n	80054b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800541c:	e04c      	b.n	80054b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d01d      	beq.n	8005460 <I2C_MasterTransmit_BTF+0x8c>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b20      	cmp	r3, #32
 8005428:	d01a      	beq.n	8005460 <I2C_MasterTransmit_BTF+0x8c>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005430:	d016      	beq.n	8005460 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005440:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2211      	movs	r2, #17
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff fef2 	bl	8005242 <HAL_I2C_MasterTxCpltCallback>
}
 800545e:	e02b      	b.n	80054b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800546e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d107      	bne.n	80054aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fedf 	bl	8005266 <HAL_I2C_MemTxCpltCallback>
}
 80054a8:	e006      	b.n	80054b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fec5 	bl	8005242 <HAL_I2C_MasterTxCpltCallback>
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11d      	bne.n	8005514 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10b      	bne.n	80054f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f0:	1c9a      	adds	r2, r3, #2
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80054f6:	e077      	b.n	80055e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	121b      	asrs	r3, r3, #8
 8005500:	b2da      	uxtb	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005512:	e069      	b.n	80055e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10b      	bne.n	8005534 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005520:	b2da      	uxtb	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005532:	e059      	b.n	80055e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	2b02      	cmp	r3, #2
 800553a:	d152      	bne.n	80055e2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b22      	cmp	r3, #34	; 0x22
 8005540:	d10d      	bne.n	800555e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005550:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800555c:	e044      	b.n	80055e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b21      	cmp	r3, #33	; 0x21
 800556c:	d112      	bne.n	8005594 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	781a      	ldrb	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005592:	e029      	b.n	80055e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d124      	bne.n	80055e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b21      	cmp	r3, #33	; 0x21
 80055a2:	d121      	bne.n	80055e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055b2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fe43 	bl	8005266 <HAL_I2C_MemTxCpltCallback>
}
 80055e0:	e002      	b.n	80055e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff f9e2 	bl	80049ac <I2C_Flush_DR>
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b22      	cmp	r3, #34	; 0x22
 8005602:	f040 80ac 	bne.w	800575e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b03      	cmp	r3, #3
 8005612:	d921      	bls.n	8005658 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b03      	cmp	r3, #3
 8005642:	f040 808c 	bne.w	800575e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005654:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005656:	e082      	b.n	800575e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	2b02      	cmp	r3, #2
 800565e:	d075      	beq.n	800574c <I2C_MasterReceive_RXNE+0x15c>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d002      	beq.n	800566c <I2C_MasterReceive_RXNE+0x7c>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d16f      	bne.n	800574c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fa5d 	bl	8006b2c <I2C_WaitOnSTOPRequestThroughIT>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d142      	bne.n	80056fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005686:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005696:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d10a      	bne.n	80056e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fdc9 	bl	8005278 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056e6:	e03a      	b.n	800575e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2212      	movs	r2, #18
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fdac 	bl	8005254 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056fc:	e02f      	b.n	800575e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800570c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fb fa7e 	bl	8000c46 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800574a:	e008      	b.n	800575e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575a:	605a      	str	r2, [r3, #4]
}
 800575c:	e7ff      	b.n	800575e <I2C_MasterReceive_RXNE+0x16e>
 800575e:	bf00      	nop
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b04      	cmp	r3, #4
 800577c:	d11b      	bne.n	80057b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80057b4:	e0bd      	b.n	8005932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d129      	bne.n	8005814 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d00a      	beq.n	80057ec <I2C_MasterReceive_BTF+0x86>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d007      	beq.n	80057ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005812:	e08e      	b.n	8005932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d176      	bne.n	800590c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d002      	beq.n	800582a <I2C_MasterReceive_BTF+0xc4>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b10      	cmp	r3, #16
 8005828:	d108      	bne.n	800583c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e019      	b.n	8005870 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b04      	cmp	r3, #4
 8005840:	d002      	beq.n	8005848 <I2C_MasterReceive_BTF+0xe2>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d108      	bne.n	800585a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e00a      	b.n	8005870 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b10      	cmp	r3, #16
 800585e:	d007      	beq.n	8005870 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80058ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d10a      	bne.n	80058f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff fcc2 	bl	8005278 <HAL_I2C_MemRxCpltCallback>
}
 80058f4:	e01d      	b.n	8005932 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2212      	movs	r2, #18
 8005902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fca5 	bl	8005254 <HAL_I2C_MasterRxCpltCallback>
}
 800590a:	e012      	b.n	8005932 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d117      	bne.n	800597e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005966:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005968:	e067      	b.n	8005a3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	b2da      	uxtb	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	611a      	str	r2, [r3, #16]
}
 800597c:	e05d      	b.n	8005a3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005986:	d133      	bne.n	80059f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b21      	cmp	r3, #33	; 0x21
 8005992:	d109      	bne.n	80059a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059a4:	611a      	str	r2, [r3, #16]
 80059a6:	e008      	b.n	80059ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <I2C_Master_SB+0x92>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d032      	beq.n	8005a3a <I2C_Master_SB+0x100>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d02d      	beq.n	8005a3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ec:	605a      	str	r2, [r3, #4]
}
 80059ee:	e024      	b.n	8005a3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10e      	bne.n	8005a16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	11db      	asrs	r3, r3, #7
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0306 	and.w	r3, r3, #6
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f063 030f 	orn	r3, r3, #15
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	611a      	str	r2, [r3, #16]
}
 8005a14:	e011      	b.n	8005a3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d10d      	bne.n	8005a3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	11db      	asrs	r3, r3, #7
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	f003 0306 	and.w	r3, r3, #6
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f063 030e 	orn	r3, r3, #14
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	611a      	str	r2, [r3, #16]
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <I2C_Master_ADD10+0x26>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d108      	bne.n	8005a7c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <I2C_Master_ADD10+0x48>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8a:	605a      	str	r2, [r3, #4]
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b091      	sub	sp, #68	; 0x44
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b22      	cmp	r3, #34	; 0x22
 8005abe:	f040 8174 	bne.w	8005daa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10f      	bne.n	8005aea <I2C_Master_ADDR+0x54>
 8005aca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d10b      	bne.n	8005aea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	e16b      	b.n	8005dc2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d11d      	bne.n	8005b2e <I2C_Master_ADDR+0x98>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005afa:	d118      	bne.n	8005b2e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005afc:	2300      	movs	r3, #0
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b20:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	651a      	str	r2, [r3, #80]	; 0x50
 8005b2c:	e149      	b.n	8005dc2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d113      	bne.n	8005b60 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e120      	b.n	8005da2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	f040 808a 	bne.w	8005c80 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b72:	d137      	bne.n	8005be4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b82:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b92:	d113      	bne.n	8005bbc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	e0f2      	b.n	8005da2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	623b      	str	r3, [r7, #32]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e0de      	b.n	8005da2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d02e      	beq.n	8005c48 <I2C_Master_ADDR+0x1b2>
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d02b      	beq.n	8005c48 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	2b12      	cmp	r3, #18
 8005bf4:	d102      	bne.n	8005bfc <I2C_Master_ADDR+0x166>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d125      	bne.n	8005c48 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d00e      	beq.n	8005c20 <I2C_Master_ADDR+0x18a>
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d00b      	beq.n	8005c20 <I2C_Master_ADDR+0x18a>
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	2b10      	cmp	r3, #16
 8005c0c:	d008      	beq.n	8005c20 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e007      	b.n	8005c30 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c2e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	e0ac      	b.n	8005da2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e090      	b.n	8005da2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d158      	bne.n	8005d3c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d021      	beq.n	8005cd4 <I2C_Master_ADDR+0x23e>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d01e      	beq.n	8005cd4 <I2C_Master_ADDR+0x23e>
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d01b      	beq.n	8005cd4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005caa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e012      	b.n	8005cfa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ce2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d08:	d14b      	bne.n	8005da2 <I2C_Master_ADDR+0x30c>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d10:	d00b      	beq.n	8005d2a <I2C_Master_ADDR+0x294>
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d008      	beq.n	8005d2a <I2C_Master_ADDR+0x294>
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d005      	beq.n	8005d2a <I2C_Master_ADDR+0x294>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d002      	beq.n	8005d2a <I2C_Master_ADDR+0x294>
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d13b      	bne.n	8005da2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	e032      	b.n	8005da2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d4a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5a:	d117      	bne.n	8005d8c <I2C_Master_ADDR+0x2f6>
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d62:	d00b      	beq.n	8005d7c <I2C_Master_ADDR+0x2e6>
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d008      	beq.n	8005d7c <I2C_Master_ADDR+0x2e6>
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d005      	beq.n	8005d7c <I2C_Master_ADDR+0x2e6>
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	2b10      	cmp	r3, #16
 8005d74:	d002      	beq.n	8005d7c <I2C_Master_ADDR+0x2e6>
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d107      	bne.n	8005d8c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005da8:	e00b      	b.n	8005dc2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	60bb      	str	r3, [r7, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
}
 8005dc0:	e7ff      	b.n	8005dc2 <I2C_Master_ADDR+0x32c>
 8005dc2:	bf00      	nop
 8005dc4:	3744      	adds	r7, #68	; 0x44
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02b      	beq.n	8005e3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d114      	bne.n	8005e3e <I2C_SlaveTransmit_TXE+0x72>
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b29      	cmp	r3, #41	; 0x29
 8005e18:	d111      	bne.n	8005e3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2221      	movs	r2, #33	; 0x21
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2228      	movs	r2, #40	; 0x28
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7fa fefb 	bl	8000c34 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d011      	beq.n	8005e7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr

08005e86 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02c      	beq.n	8005efa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d114      	bne.n	8005efa <I2C_SlaveReceive_RXNE+0x74>
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed4:	d111      	bne.n	8005efa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2222      	movs	r2, #34	; 0x22
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2228      	movs	r2, #40	; 0x28
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7fa fe89 	bl	8000c0c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f5e:	2b28      	cmp	r3, #40	; 0x28
 8005f60:	d127      	bne.n	8005fb2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f70:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	089b      	lsrs	r3, r3, #2
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	09db      	lsrs	r3, r3, #7
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d103      	bne.n	8005f96 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	81bb      	strh	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005fa4:	89ba      	ldrh	r2, [r7, #12]
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fa fe0e 	bl	8000bcc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005fb0:	e00e      	b.n	8005fd0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	60bb      	str	r3, [r7, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	60bb      	str	r3, [r7, #8]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ff6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006024:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006034:	d172      	bne.n	800611c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b22      	cmp	r3, #34	; 0x22
 800603a:	d002      	beq.n	8006042 <I2C_Slave_STOPF+0x6a>
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b2a      	cmp	r3, #42	; 0x2a
 8006040:	d135      	bne.n	80060ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	f043 0204 	orr.w	r2, r3, #4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006074:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd ff56 	bl	8003f2c <HAL_DMA_GetState>
 8006080:	4603      	mov	r3, r0
 8006082:	2b01      	cmp	r3, #1
 8006084:	d049      	beq.n	800611a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	4a69      	ldr	r2, [pc, #420]	; (8006230 <I2C_Slave_STOPF+0x258>)
 800608c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	4618      	mov	r0, r3
 8006094:	f7fd fed2 	bl	8003e3c <HAL_DMA_Abort_IT>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d03d      	beq.n	800611a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060ac:	e035      	b.n	800611a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f043 0204 	orr.w	r2, r3, #4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fd ff20 	bl	8003f2c <HAL_DMA_GetState>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d014      	beq.n	800611c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	4a4e      	ldr	r2, [pc, #312]	; (8006230 <I2C_Slave_STOPF+0x258>)
 80060f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fd fe9c 	bl	8003e3c <HAL_DMA_Abort_IT>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006114:	4610      	mov	r0, r2
 8006116:	4798      	blx	r3
 8006118:	e000      	b.n	800611c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800611a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d03e      	beq.n	80061a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b04      	cmp	r3, #4
 8006132:	d112      	bne.n	800615a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d112      	bne.n	800618e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f043 0204 	orr.w	r2, r3, #4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f8b7 	bl	8006320 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80061b2:	e039      	b.n	8006228 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b2a      	cmp	r3, #42	; 0x2a
 80061b8:	d109      	bne.n	80061ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2228      	movs	r2, #40	; 0x28
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fa fd1f 	bl	8000c0c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b28      	cmp	r3, #40	; 0x28
 80061d8:	d111      	bne.n	80061fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <I2C_Slave_STOPF+0x25c>)
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fa fcdd 	bl	8000bb6 <HAL_I2C_ListenCpltCallback>
}
 80061fc:	e014      	b.n	8006228 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	2b22      	cmp	r3, #34	; 0x22
 8006204:	d002      	beq.n	800620c <I2C_Slave_STOPF+0x234>
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	2b22      	cmp	r3, #34	; 0x22
 800620a:	d10d      	bne.n	8006228 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fa fcf2 	bl	8000c0c <HAL_I2C_SlaveRxCpltCallback>
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	08006689 	.word	0x08006689
 8006234:	ffff0000 	.word	0xffff0000

08006238 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006246:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d002      	beq.n	800625a <I2C_Slave_AF+0x22>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b20      	cmp	r3, #32
 8006258:	d129      	bne.n	80062ae <I2C_Slave_AF+0x76>
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	2b28      	cmp	r3, #40	; 0x28
 800625e:	d126      	bne.n	80062ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a2e      	ldr	r2, [pc, #184]	; (800631c <I2C_Slave_AF+0xe4>)
 8006264:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006274:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800627e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fa fc85 	bl	8000bb6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80062ac:	e031      	b.n	8006312 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	2b21      	cmp	r3, #33	; 0x21
 80062b2:	d129      	bne.n	8006308 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a19      	ldr	r2, [pc, #100]	; (800631c <I2C_Slave_AF+0xe4>)
 80062b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2221      	movs	r2, #33	; 0x21
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fe fb56 	bl	80049ac <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fa fc97 	bl	8000c34 <HAL_I2C_SlaveTxCpltCallback>
}
 8006306:	e004      	b.n	8006312 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006310:	615a      	str	r2, [r3, #20]
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	ffff0000 	.word	0xffff0000

08006320 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006336:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b10      	cmp	r3, #16
 800633c:	d002      	beq.n	8006344 <I2C_ITError+0x24>
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d10a      	bne.n	800635a <I2C_ITError+0x3a>
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	2b22      	cmp	r3, #34	; 0x22
 8006348:	d107      	bne.n	800635a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006358:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006360:	2b28      	cmp	r3, #40	; 0x28
 8006362:	d107      	bne.n	8006374 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2228      	movs	r2, #40	; 0x28
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006372:	e015      	b.n	80063a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800637e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006382:	d00a      	beq.n	800639a <I2C_ITError+0x7a>
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b60      	cmp	r3, #96	; 0x60
 8006388:	d007      	beq.n	800639a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ae:	d162      	bne.n	8006476 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d020      	beq.n	8006410 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d2:	4a6a      	ldr	r2, [pc, #424]	; (800657c <I2C_ITError+0x25c>)
 80063d4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fd fd2e 	bl	8003e3c <HAL_DMA_Abort_IT>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 8089 	beq.w	80064fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800640a:	4610      	mov	r0, r2
 800640c:	4798      	blx	r3
 800640e:	e074      	b.n	80064fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	4a59      	ldr	r2, [pc, #356]	; (800657c <I2C_ITError+0x25c>)
 8006416:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	4618      	mov	r0, r3
 800641e:	f7fd fd0d 	bl	8003e3c <HAL_DMA_Abort_IT>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d068      	beq.n	80064fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d10b      	bne.n	800644e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3
 8006474:	e041      	b.n	80064fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b60      	cmp	r3, #96	; 0x60
 8006480:	d125      	bne.n	80064ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d10b      	bne.n	80064b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fe fedf 	bl	800528a <HAL_I2C_AbortCpltCallback>
 80064cc:	e015      	b.n	80064fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d10b      	bne.n	80064f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7fa fba6 	bl	8000c46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10e      	bne.n	8006528 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b04      	cmp	r3, #4
 800654a:	d113      	bne.n	8006574 <I2C_ITError+0x254>
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b28      	cmp	r3, #40	; 0x28
 8006550:	d110      	bne.n	8006574 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a0a      	ldr	r2, [pc, #40]	; (8006580 <I2C_ITError+0x260>)
 8006556:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fa fb21 	bl	8000bb6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	08006689 	.word	0x08006689
 8006580:	ffff0000 	.word	0xffff0000

08006584 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	460b      	mov	r3, r1
 8006592:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d006      	beq.n	80065ae <I2C_MasterRequestWrite+0x2a>
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d003      	beq.n	80065ae <I2C_MasterRequestWrite+0x2a>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065ac:	d108      	bne.n	80065c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e00b      	b.n	80065d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	2b12      	cmp	r3, #18
 80065c6:	d107      	bne.n	80065d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f8f7 	bl	80067d8 <I2C_WaitOnFlagUntilTimeout>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00d      	beq.n	800660c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fe:	d103      	bne.n	8006608 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e035      	b.n	8006678 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006614:	d108      	bne.n	8006628 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006616:	897b      	ldrh	r3, [r7, #10]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006624:	611a      	str	r2, [r3, #16]
 8006626:	e01b      	b.n	8006660 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006628:	897b      	ldrh	r3, [r7, #10]
 800662a:	11db      	asrs	r3, r3, #7
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f003 0306 	and.w	r3, r3, #6
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f063 030f 	orn	r3, r3, #15
 8006638:	b2da      	uxtb	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	490e      	ldr	r1, [pc, #56]	; (8006680 <I2C_MasterRequestWrite+0xfc>)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f940 	bl	80068cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e010      	b.n	8006678 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006656:	897b      	ldrh	r3, [r7, #10]
 8006658:	b2da      	uxtb	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	4907      	ldr	r1, [pc, #28]	; (8006684 <I2C_MasterRequestWrite+0x100>)
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f930 	bl	80068cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	00010008 	.word	0x00010008
 8006684:	00010002 	.word	0x00010002

08006688 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80066a2:	4b4b      	ldr	r3, [pc, #300]	; (80067d0 <I2C_DMAAbort+0x148>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	4a4a      	ldr	r2, [pc, #296]	; (80067d4 <I2C_DMAAbort+0x14c>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	0a1a      	lsrs	r2, r3, #8
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	00da      	lsls	r2, r3, #3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80066ce:	e00a      	b.n	80066e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e4:	d0ea      	beq.n	80066bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f2:	2200      	movs	r2, #0
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	2200      	movs	r2, #0
 8006704:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006714:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006728:	2200      	movs	r2, #0
 800672a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	2200      	movs	r2, #0
 800673a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0201 	bic.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b60      	cmp	r3, #96	; 0x60
 8006756:	d10e      	bne.n	8006776 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2200      	movs	r2, #0
 800676c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800676e:	6978      	ldr	r0, [r7, #20]
 8006770:	f7fe fd8b 	bl	800528a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006774:	e027      	b.n	80067c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006776:	7cfb      	ldrb	r3, [r7, #19]
 8006778:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800677c:	2b28      	cmp	r3, #40	; 0x28
 800677e:	d117      	bne.n	80067b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800679e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2228      	movs	r2, #40	; 0x28
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067ae:	e007      	b.n	80067c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80067c0:	6978      	ldr	r0, [r7, #20]
 80067c2:	f7fa fa40 	bl	8000c46 <HAL_I2C_ErrorCallback>
}
 80067c6:	bf00      	nop
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000010 	.word	0x20000010
 80067d4:	14f8b589 	.word	0x14f8b589

080067d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	4613      	mov	r3, r2
 80067e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067e8:	e048      	b.n	800687c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d044      	beq.n	800687c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f2:	f7fd fa15 	bl	8003c20 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d302      	bcc.n	8006808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d139      	bne.n	800687c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	0c1b      	lsrs	r3, r3, #16
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b01      	cmp	r3, #1
 8006810:	d10d      	bne.n	800682e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	43da      	mvns	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	4013      	ands	r3, r2
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf0c      	ite	eq
 8006824:	2301      	moveq	r3, #1
 8006826:	2300      	movne	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	e00c      	b.n	8006848 <I2C_WaitOnFlagUntilTimeout+0x70>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	43da      	mvns	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4013      	ands	r3, r2
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	bf0c      	ite	eq
 8006840:	2301      	moveq	r3, #1
 8006842:	2300      	movne	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	429a      	cmp	r2, r3
 800684c:	d116      	bne.n	800687c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	f043 0220 	orr.w	r2, r3, #32
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e023      	b.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	d10d      	bne.n	80068a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	43da      	mvns	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	e00c      	b.n	80068bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	43da      	mvns	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4013      	ands	r3, r2
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d093      	beq.n	80067ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068da:	e071      	b.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ea:	d123      	bne.n	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	f043 0204 	orr.w	r2, r3, #4
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e067      	b.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d041      	beq.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693c:	f7fd f970 	bl	8003c20 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d302      	bcc.n	8006952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d136      	bne.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b01      	cmp	r3, #1
 800695a:	d10c      	bne.n	8006976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	43da      	mvns	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf14      	ite	ne
 800696e:	2301      	movne	r3, #1
 8006970:	2300      	moveq	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	e00b      	b.n	800698e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	43da      	mvns	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	bf14      	ite	ne
 8006988:	2301      	movne	r3, #1
 800698a:	2300      	moveq	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d016      	beq.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	f043 0220 	orr.w	r2, r3, #32
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e021      	b.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	0c1b      	lsrs	r3, r3, #16
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10c      	bne.n	80069e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	43da      	mvns	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4013      	ands	r3, r2
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e00b      	b.n	80069fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	43da      	mvns	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4013      	ands	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bf14      	ite	ne
 80069f6:	2301      	movne	r3, #1
 80069f8:	2300      	moveq	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f47f af6d 	bne.w	80068dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a18:	e034      	b.n	8006a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f8b8 	bl	8006b90 <I2C_IsAcknowledgeFailed>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e034      	b.n	8006a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d028      	beq.n	8006a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fd f8f5 	bl	8003c20 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11d      	bne.n	8006a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d016      	beq.n	8006a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	f043 0220 	orr.w	r2, r3, #32
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e007      	b.n	8006a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d1c3      	bne.n	8006a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aa8:	e034      	b.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f870 	bl	8006b90 <I2C_IsAcknowledgeFailed>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e034      	b.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d028      	beq.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac2:	f7fd f8ad 	bl	8003c20 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d302      	bcc.n	8006ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d11d      	bne.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d016      	beq.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	f043 0220 	orr.w	r2, r3, #32
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e007      	b.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d1c3      	bne.n	8006aaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b38:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	08db      	lsrs	r3, r3, #3
 8006b3e:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b40:	fba2 2303 	umull	r2, r3, r2, r3
 8006b44:	0a1a      	lsrs	r2, r3, #8
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f043 0220 	orr.w	r2, r3, #32
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e008      	b.n	8006b7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b78:	d0e9      	beq.n	8006b4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	20000010 	.word	0x20000010
 8006b8c:	14f8b589 	.word	0x14f8b589

08006b90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba6:	d11b      	bne.n	8006be0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	f043 0204 	orr.w	r2, r3, #4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006bfc:	d103      	bne.n	8006c06 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c04:	e007      	b.n	8006c16 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c0e:	d102      	bne.n	8006c16 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2208      	movs	r2, #8
 8006c14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr

08006c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e26c      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 8087 	beq.w	8006d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c40:	4b92      	ldr	r3, [pc, #584]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 030c 	and.w	r3, r3, #12
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d00c      	beq.n	8006c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c4c:	4b8f      	ldr	r3, [pc, #572]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 030c 	and.w	r3, r3, #12
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d112      	bne.n	8006c7e <HAL_RCC_OscConfig+0x5e>
 8006c58:	4b8c      	ldr	r3, [pc, #560]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d10b      	bne.n	8006c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c66:	4b89      	ldr	r3, [pc, #548]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d06c      	beq.n	8006d4c <HAL_RCC_OscConfig+0x12c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d168      	bne.n	8006d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e246      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c86:	d106      	bne.n	8006c96 <HAL_RCC_OscConfig+0x76>
 8006c88:	4b80      	ldr	r3, [pc, #512]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a7f      	ldr	r2, [pc, #508]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	e02e      	b.n	8006cf4 <HAL_RCC_OscConfig+0xd4>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10c      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x98>
 8006c9e:	4b7b      	ldr	r3, [pc, #492]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a7a      	ldr	r2, [pc, #488]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	4b78      	ldr	r3, [pc, #480]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a77      	ldr	r2, [pc, #476]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e01d      	b.n	8006cf4 <HAL_RCC_OscConfig+0xd4>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cc0:	d10c      	bne.n	8006cdc <HAL_RCC_OscConfig+0xbc>
 8006cc2:	4b72      	ldr	r3, [pc, #456]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a71      	ldr	r2, [pc, #452]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b6f      	ldr	r3, [pc, #444]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a6e      	ldr	r2, [pc, #440]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	e00b      	b.n	8006cf4 <HAL_RCC_OscConfig+0xd4>
 8006cdc:	4b6b      	ldr	r3, [pc, #428]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a6a      	ldr	r2, [pc, #424]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4b68      	ldr	r3, [pc, #416]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a67      	ldr	r2, [pc, #412]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d013      	beq.n	8006d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfc:	f7fc ff90 	bl	8003c20 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d04:	f7fc ff8c 	bl	8003c20 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b64      	cmp	r3, #100	; 0x64
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e1fa      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d16:	4b5d      	ldr	r3, [pc, #372]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <HAL_RCC_OscConfig+0xe4>
 8006d22:	e014      	b.n	8006d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d24:	f7fc ff7c 	bl	8003c20 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d2c:	f7fc ff78 	bl	8003c20 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b64      	cmp	r3, #100	; 0x64
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e1e6      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d3e:	4b53      	ldr	r3, [pc, #332]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0x10c>
 8006d4a:	e000      	b.n	8006d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d063      	beq.n	8006e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d5a:	4b4c      	ldr	r3, [pc, #304]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d66:	4b49      	ldr	r3, [pc, #292]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f003 030c 	and.w	r3, r3, #12
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d11c      	bne.n	8006dac <HAL_RCC_OscConfig+0x18c>
 8006d72:	4b46      	ldr	r3, [pc, #280]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d116      	bne.n	8006dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d7e:	4b43      	ldr	r3, [pc, #268]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <HAL_RCC_OscConfig+0x176>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d001      	beq.n	8006d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e1ba      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d96:	4b3d      	ldr	r3, [pc, #244]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	4939      	ldr	r1, [pc, #228]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006daa:	e03a      	b.n	8006e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d020      	beq.n	8006df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006db4:	4b36      	ldr	r3, [pc, #216]	; (8006e90 <HAL_RCC_OscConfig+0x270>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dba:	f7fc ff31 	bl	8003c20 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dc2:	f7fc ff2d 	bl	8003c20 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e19b      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd4:	4b2d      	ldr	r3, [pc, #180]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0f0      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de0:	4b2a      	ldr	r3, [pc, #168]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	4927      	ldr	r1, [pc, #156]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	600b      	str	r3, [r1, #0]
 8006df4:	e015      	b.n	8006e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006df6:	4b26      	ldr	r3, [pc, #152]	; (8006e90 <HAL_RCC_OscConfig+0x270>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfc:	f7fc ff10 	bl	8003c20 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e04:	f7fc ff0c 	bl	8003c20 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e17a      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e16:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d03a      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d019      	beq.n	8006e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e36:	4b17      	ldr	r3, [pc, #92]	; (8006e94 <HAL_RCC_OscConfig+0x274>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e3c:	f7fc fef0 	bl	8003c20 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e44:	f7fc feec 	bl	8003c20 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e15a      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e56:	4b0d      	ldr	r3, [pc, #52]	; (8006e8c <HAL_RCC_OscConfig+0x26c>)
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0f0      	beq.n	8006e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e62:	2001      	movs	r0, #1
 8006e64:	f000 fafc 	bl	8007460 <RCC_Delay>
 8006e68:	e01c      	b.n	8006ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e6a:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <HAL_RCC_OscConfig+0x274>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e70:	f7fc fed6 	bl	8003c20 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e76:	e00f      	b.n	8006e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e78:	f7fc fed2 	bl	8003c20 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d908      	bls.n	8006e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e140      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
 8006e8a:	bf00      	nop
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	42420000 	.word	0x42420000
 8006e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e98:	4b9e      	ldr	r3, [pc, #632]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e9      	bne.n	8006e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80a6 	beq.w	8006ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eb6:	4b97      	ldr	r3, [pc, #604]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10d      	bne.n	8006ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ec2:	4b94      	ldr	r3, [pc, #592]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	4a93      	ldr	r2, [pc, #588]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ecc:	61d3      	str	r3, [r2, #28]
 8006ece:	4b91      	ldr	r3, [pc, #580]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eda:	2301      	movs	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ede:	4b8e      	ldr	r3, [pc, #568]	; (8007118 <HAL_RCC_OscConfig+0x4f8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d118      	bne.n	8006f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eea:	4b8b      	ldr	r3, [pc, #556]	; (8007118 <HAL_RCC_OscConfig+0x4f8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a8a      	ldr	r2, [pc, #552]	; (8007118 <HAL_RCC_OscConfig+0x4f8>)
 8006ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ef6:	f7fc fe93 	bl	8003c20 <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efe:	f7fc fe8f 	bl	8003c20 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b64      	cmp	r3, #100	; 0x64
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e0fd      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f10:	4b81      	ldr	r3, [pc, #516]	; (8007118 <HAL_RCC_OscConfig+0x4f8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f0      	beq.n	8006efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d106      	bne.n	8006f32 <HAL_RCC_OscConfig+0x312>
 8006f24:	4b7b      	ldr	r3, [pc, #492]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	4a7a      	ldr	r2, [pc, #488]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	6213      	str	r3, [r2, #32]
 8006f30:	e02d      	b.n	8006f8e <HAL_RCC_OscConfig+0x36e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10c      	bne.n	8006f54 <HAL_RCC_OscConfig+0x334>
 8006f3a:	4b76      	ldr	r3, [pc, #472]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	4a75      	ldr	r2, [pc, #468]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	6213      	str	r3, [r2, #32]
 8006f46:	4b73      	ldr	r3, [pc, #460]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	4a72      	ldr	r2, [pc, #456]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f4c:	f023 0304 	bic.w	r3, r3, #4
 8006f50:	6213      	str	r3, [r2, #32]
 8006f52:	e01c      	b.n	8006f8e <HAL_RCC_OscConfig+0x36e>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2b05      	cmp	r3, #5
 8006f5a:	d10c      	bne.n	8006f76 <HAL_RCC_OscConfig+0x356>
 8006f5c:	4b6d      	ldr	r3, [pc, #436]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	4a6c      	ldr	r2, [pc, #432]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f62:	f043 0304 	orr.w	r3, r3, #4
 8006f66:	6213      	str	r3, [r2, #32]
 8006f68:	4b6a      	ldr	r3, [pc, #424]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	4a69      	ldr	r2, [pc, #420]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	6213      	str	r3, [r2, #32]
 8006f74:	e00b      	b.n	8006f8e <HAL_RCC_OscConfig+0x36e>
 8006f76:	4b67      	ldr	r3, [pc, #412]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	4a66      	ldr	r2, [pc, #408]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f7c:	f023 0301 	bic.w	r3, r3, #1
 8006f80:	6213      	str	r3, [r2, #32]
 8006f82:	4b64      	ldr	r3, [pc, #400]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	4a63      	ldr	r2, [pc, #396]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006f88:	f023 0304 	bic.w	r3, r3, #4
 8006f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d015      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f96:	f7fc fe43 	bl	8003c20 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f9c:	e00a      	b.n	8006fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9e:	f7fc fe3f 	bl	8003c20 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e0ab      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb4:	4b57      	ldr	r3, [pc, #348]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0ee      	beq.n	8006f9e <HAL_RCC_OscConfig+0x37e>
 8006fc0:	e014      	b.n	8006fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fc2:	f7fc fe2d 	bl	8003c20 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fc8:	e00a      	b.n	8006fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fca:	f7fc fe29 	bl	8003c20 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e095      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fe0:	4b4c      	ldr	r3, [pc, #304]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1ee      	bne.n	8006fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d105      	bne.n	8006ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ff2:	4b48      	ldr	r3, [pc, #288]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4a47      	ldr	r2, [pc, #284]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8006ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8081 	beq.w	800710a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007008:	4b42      	ldr	r3, [pc, #264]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 030c 	and.w	r3, r3, #12
 8007010:	2b08      	cmp	r3, #8
 8007012:	d061      	beq.n	80070d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d146      	bne.n	80070aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800701c:	4b3f      	ldr	r3, [pc, #252]	; (800711c <HAL_RCC_OscConfig+0x4fc>)
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007022:	f7fc fdfd 	bl	8003c20 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007028:	e008      	b.n	800703c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800702a:	f7fc fdf9 	bl	8003c20 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d901      	bls.n	800703c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e067      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800703c:	4b35      	ldr	r3, [pc, #212]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1f0      	bne.n	800702a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007050:	d108      	bne.n	8007064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007052:	4b30      	ldr	r3, [pc, #192]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	492d      	ldr	r1, [pc, #180]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8007060:	4313      	orrs	r3, r2
 8007062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007064:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a19      	ldr	r1, [r3, #32]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	430b      	orrs	r3, r1
 8007076:	4927      	ldr	r1, [pc, #156]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800707c:	4b27      	ldr	r3, [pc, #156]	; (800711c <HAL_RCC_OscConfig+0x4fc>)
 800707e:	2201      	movs	r2, #1
 8007080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007082:	f7fc fdcd 	bl	8003c20 <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007088:	e008      	b.n	800709c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800708a:	f7fc fdc9 	bl	8003c20 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e037      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800709c:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0f0      	beq.n	800708a <HAL_RCC_OscConfig+0x46a>
 80070a8:	e02f      	b.n	800710a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070aa:	4b1c      	ldr	r3, [pc, #112]	; (800711c <HAL_RCC_OscConfig+0x4fc>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b0:	f7fc fdb6 	bl	8003c20 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b8:	f7fc fdb2 	bl	8003c20 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e020      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0x498>
 80070d6:	e018      	b.n	800710a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e013      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <HAL_RCC_OscConfig+0x4f4>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d106      	bne.n	8007106 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007102:	429a      	cmp	r2, r3
 8007104:	d001      	beq.n	800710a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40021000 	.word	0x40021000
 8007118:	40007000 	.word	0x40007000
 800711c:	42420060 	.word	0x42420060

08007120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0d0      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007134:	4b6a      	ldr	r3, [pc, #424]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d910      	bls.n	8007164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007142:	4b67      	ldr	r3, [pc, #412]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f023 0207 	bic.w	r2, r3, #7
 800714a:	4965      	ldr	r1, [pc, #404]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	4313      	orrs	r3, r2
 8007150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007152:	4b63      	ldr	r3, [pc, #396]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d001      	beq.n	8007164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0b8      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d020      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800717c:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	4a58      	ldr	r2, [pc, #352]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007194:	4b53      	ldr	r3, [pc, #332]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4a52      	ldr	r2, [pc, #328]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 800719a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800719e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a0:	4b50      	ldr	r3, [pc, #320]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	494d      	ldr	r1, [pc, #308]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d040      	beq.n	8007240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d107      	bne.n	80071d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c6:	4b47      	ldr	r3, [pc, #284]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d115      	bne.n	80071fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e07f      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d107      	bne.n	80071ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071de:	4b41      	ldr	r3, [pc, #260]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e073      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071ee:	4b3d      	ldr	r3, [pc, #244]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e06b      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071fe:	4b39      	ldr	r3, [pc, #228]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f023 0203 	bic.w	r2, r3, #3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	4936      	ldr	r1, [pc, #216]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 800720c:	4313      	orrs	r3, r2
 800720e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007210:	f7fc fd06 	bl	8003c20 <HAL_GetTick>
 8007214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007216:	e00a      	b.n	800722e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007218:	f7fc fd02 	bl	8003c20 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	f241 3288 	movw	r2, #5000	; 0x1388
 8007226:	4293      	cmp	r3, r2
 8007228:	d901      	bls.n	800722e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e053      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800722e:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f003 020c 	and.w	r2, r3, #12
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	429a      	cmp	r2, r3
 800723e:	d1eb      	bne.n	8007218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007240:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d210      	bcs.n	8007270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724e:	4b24      	ldr	r3, [pc, #144]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f023 0207 	bic.w	r2, r3, #7
 8007256:	4922      	ldr	r1, [pc, #136]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	4313      	orrs	r3, r2
 800725c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800725e:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e032      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800727c:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4916      	ldr	r1, [pc, #88]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 800728a:	4313      	orrs	r3, r2
 800728c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	490e      	ldr	r1, [pc, #56]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072ae:	f000 f821 	bl	80072f4 <HAL_RCC_GetSysClockFreq>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <HAL_RCC_ClockConfig+0x1c4>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	490a      	ldr	r1, [pc, #40]	; (80072e8 <HAL_RCC_ClockConfig+0x1c8>)
 80072c0:	5ccb      	ldrb	r3, [r1, r3]
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	4a09      	ldr	r2, [pc, #36]	; (80072ec <HAL_RCC_ClockConfig+0x1cc>)
 80072c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_ClockConfig+0x1d0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fc fae0 	bl	8003894 <HAL_InitTick>

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	40022000 	.word	0x40022000
 80072e4:	40021000 	.word	0x40021000
 80072e8:	0800d020 	.word	0x0800d020
 80072ec:	20000010 	.word	0x20000010
 80072f0:	20000014 	.word	0x20000014

080072f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	2300      	movs	r3, #0
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	2300      	movs	r3, #0
 8007308:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800730e:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <HAL_RCC_GetSysClockFreq+0x94>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 030c 	and.w	r3, r3, #12
 800731a:	2b04      	cmp	r3, #4
 800731c:	d002      	beq.n	8007324 <HAL_RCC_GetSysClockFreq+0x30>
 800731e:	2b08      	cmp	r3, #8
 8007320:	d003      	beq.n	800732a <HAL_RCC_GetSysClockFreq+0x36>
 8007322:	e027      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007324:	4b19      	ldr	r3, [pc, #100]	; (800738c <HAL_RCC_GetSysClockFreq+0x98>)
 8007326:	613b      	str	r3, [r7, #16]
      break;
 8007328:	e027      	b.n	800737a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	0c9b      	lsrs	r3, r3, #18
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	4a17      	ldr	r2, [pc, #92]	; (8007390 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007334:	5cd3      	ldrb	r3, [r2, r3]
 8007336:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d010      	beq.n	8007364 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007342:	4b11      	ldr	r3, [pc, #68]	; (8007388 <HAL_RCC_GetSysClockFreq+0x94>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	0c5b      	lsrs	r3, r3, #17
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	4a11      	ldr	r2, [pc, #68]	; (8007394 <HAL_RCC_GetSysClockFreq+0xa0>)
 800734e:	5cd3      	ldrb	r3, [r2, r3]
 8007350:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a0d      	ldr	r2, [pc, #52]	; (800738c <HAL_RCC_GetSysClockFreq+0x98>)
 8007356:	fb02 f203 	mul.w	r2, r2, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	e004      	b.n	800736e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a0c      	ldr	r2, [pc, #48]	; (8007398 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007368:	fb02 f303 	mul.w	r3, r2, r3
 800736c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	613b      	str	r3, [r7, #16]
      break;
 8007372:	e002      	b.n	800737a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_RCC_GetSysClockFreq+0x98>)
 8007376:	613b      	str	r3, [r7, #16]
      break;
 8007378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800737a:	693b      	ldr	r3, [r7, #16]
}
 800737c:	4618      	mov	r0, r3
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	40021000 	.word	0x40021000
 800738c:	007a1200 	.word	0x007a1200
 8007390:	0800d038 	.word	0x0800d038
 8007394:	0800d048 	.word	0x0800d048
 8007398:	003d0900 	.word	0x003d0900

0800739c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <HAL_RCC_GetHCLKFreq+0x10>)
 80073a2:	681b      	ldr	r3, [r3, #0]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr
 80073ac:	20000010 	.word	0x20000010

080073b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073b4:	f7ff fff2 	bl	800739c <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	0a1b      	lsrs	r3, r3, #8
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	4903      	ldr	r1, [pc, #12]	; (80073d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40021000 	.word	0x40021000
 80073d4:	0800d030 	.word	0x0800d030

080073d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073dc:	f7ff ffde 	bl	800739c <HAL_RCC_GetHCLKFreq>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	0adb      	lsrs	r3, r3, #11
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	4903      	ldr	r1, [pc, #12]	; (80073fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073ee:	5ccb      	ldrb	r3, [r1, r3]
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40021000 	.word	0x40021000
 80073fc:	0800d030 	.word	0x0800d030

08007400 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	220f      	movs	r2, #15
 800740e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007410:	4b11      	ldr	r3, [pc, #68]	; (8007458 <HAL_RCC_GetClockConfig+0x58>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f003 0203 	and.w	r2, r3, #3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <HAL_RCC_GetClockConfig+0x58>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <HAL_RCC_GetClockConfig+0x58>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007434:	4b08      	ldr	r3, [pc, #32]	; (8007458 <HAL_RCC_GetClockConfig+0x58>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	08db      	lsrs	r3, r3, #3
 800743a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <HAL_RCC_GetClockConfig+0x5c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0207 	and.w	r2, r3, #7
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr
 8007458:	40021000 	.word	0x40021000
 800745c:	40022000 	.word	0x40022000

08007460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <RCC_Delay+0x34>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a0a      	ldr	r2, [pc, #40]	; (8007498 <RCC_Delay+0x38>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	0a5b      	lsrs	r3, r3, #9
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	fb02 f303 	mul.w	r3, r2, r3
 800747a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800747c:	bf00      	nop
  }
  while (Delay --);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	1e5a      	subs	r2, r3, #1
 8007482:	60fa      	str	r2, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f9      	bne.n	800747c <RCC_Delay+0x1c>
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr
 8007494:	20000010 	.word	0x20000010
 8007498:	10624dd3 	.word	0x10624dd3

0800749c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e041      	b.n	8007532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fc f9c2 	bl	800384c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f000 fa74 	bl	80079c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d001      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e03a      	b.n	80075ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a18      	ldr	r2, [pc, #96]	; (80075d4 <HAL_TIM_Base_Start_IT+0x98>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00e      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x58>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757e:	d009      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x58>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a14      	ldr	r2, [pc, #80]	; (80075d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d004      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x58>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a13      	ldr	r2, [pc, #76]	; (80075dc <HAL_TIM_Base_Start_IT+0xa0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d111      	bne.n	80075b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b06      	cmp	r3, #6
 80075a4:	d010      	beq.n	80075c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0201 	orr.w	r2, r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b6:	e007      	b.n	80075c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0201 	orr.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr
 80075d4:	40012c00 	.word	0x40012c00
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800

080075e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d122      	bne.n	800763c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b02      	cmp	r3, #2
 8007602:	d11b      	bne.n	800763c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0202 	mvn.w	r2, #2
 800760c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f9b4 	bl	8007990 <HAL_TIM_IC_CaptureCallback>
 8007628:	e005      	b.n	8007636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f9a7 	bl	800797e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f9b6 	bl	80079a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b04      	cmp	r3, #4
 8007648:	d122      	bne.n	8007690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b04      	cmp	r3, #4
 8007656:	d11b      	bne.n	8007690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0204 	mvn.w	r2, #4
 8007660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2202      	movs	r2, #2
 8007666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f98a 	bl	8007990 <HAL_TIM_IC_CaptureCallback>
 800767c:	e005      	b.n	800768a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f97d 	bl	800797e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f98c 	bl	80079a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b08      	cmp	r3, #8
 800769c:	d122      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d11b      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0208 	mvn.w	r2, #8
 80076b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2204      	movs	r2, #4
 80076ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f960 	bl	8007990 <HAL_TIM_IC_CaptureCallback>
 80076d0:	e005      	b.n	80076de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f953 	bl	800797e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f962 	bl	80079a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d122      	bne.n	8007738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b10      	cmp	r3, #16
 80076fe:	d11b      	bne.n	8007738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0210 	mvn.w	r2, #16
 8007708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2208      	movs	r2, #8
 800770e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f936 	bl	8007990 <HAL_TIM_IC_CaptureCallback>
 8007724:	e005      	b.n	8007732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f929 	bl	800797e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f938 	bl	80079a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b01      	cmp	r3, #1
 8007744:	d10e      	bne.n	8007764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d107      	bne.n	8007764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0201 	mvn.w	r2, #1
 800775c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fb ff9e 	bl	80036a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776e:	2b80      	cmp	r3, #128	; 0x80
 8007770:	d10e      	bne.n	8007790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	2b80      	cmp	r3, #128	; 0x80
 800777e:	d107      	bne.n	8007790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa7b 	bl	8007c86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d10e      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d107      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f8fc 	bl	80079b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d10e      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d107      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0220 	mvn.w	r2, #32
 80077e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa46 	bl	8007c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_TIM_ConfigClockSource+0x1c>
 8007808:	2302      	movs	r3, #2
 800780a:	e0b4      	b.n	8007976 <HAL_TIM_ConfigClockSource+0x186>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800782a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007844:	d03e      	beq.n	80078c4 <HAL_TIM_ConfigClockSource+0xd4>
 8007846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784a:	f200 8087 	bhi.w	800795c <HAL_TIM_ConfigClockSource+0x16c>
 800784e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007852:	f000 8086 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x172>
 8007856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785a:	d87f      	bhi.n	800795c <HAL_TIM_ConfigClockSource+0x16c>
 800785c:	2b70      	cmp	r3, #112	; 0x70
 800785e:	d01a      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0xa6>
 8007860:	2b70      	cmp	r3, #112	; 0x70
 8007862:	d87b      	bhi.n	800795c <HAL_TIM_ConfigClockSource+0x16c>
 8007864:	2b60      	cmp	r3, #96	; 0x60
 8007866:	d050      	beq.n	800790a <HAL_TIM_ConfigClockSource+0x11a>
 8007868:	2b60      	cmp	r3, #96	; 0x60
 800786a:	d877      	bhi.n	800795c <HAL_TIM_ConfigClockSource+0x16c>
 800786c:	2b50      	cmp	r3, #80	; 0x50
 800786e:	d03c      	beq.n	80078ea <HAL_TIM_ConfigClockSource+0xfa>
 8007870:	2b50      	cmp	r3, #80	; 0x50
 8007872:	d873      	bhi.n	800795c <HAL_TIM_ConfigClockSource+0x16c>
 8007874:	2b40      	cmp	r3, #64	; 0x40
 8007876:	d058      	beq.n	800792a <HAL_TIM_ConfigClockSource+0x13a>
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	d86f      	bhi.n	800795c <HAL_TIM_ConfigClockSource+0x16c>
 800787c:	2b30      	cmp	r3, #48	; 0x30
 800787e:	d064      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x15a>
 8007880:	2b30      	cmp	r3, #48	; 0x30
 8007882:	d86b      	bhi.n	800795c <HAL_TIM_ConfigClockSource+0x16c>
 8007884:	2b20      	cmp	r3, #32
 8007886:	d060      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x15a>
 8007888:	2b20      	cmp	r3, #32
 800788a:	d867      	bhi.n	800795c <HAL_TIM_ConfigClockSource+0x16c>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d05c      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x15a>
 8007890:	2b10      	cmp	r3, #16
 8007892:	d05a      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x15a>
 8007894:	e062      	b.n	800795c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6899      	ldr	r1, [r3, #8]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f000 f968 	bl	8007b7a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	609a      	str	r2, [r3, #8]
      break;
 80078c2:	e04f      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	6899      	ldr	r1, [r3, #8]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f000 f951 	bl	8007b7a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078e6:	609a      	str	r2, [r3, #8]
      break;
 80078e8:	e03c      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	6859      	ldr	r1, [r3, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f000 f8c8 	bl	8007a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2150      	movs	r1, #80	; 0x50
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f91f 	bl	8007b46 <TIM_ITRx_SetConfig>
      break;
 8007908:	e02c      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	6859      	ldr	r1, [r3, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	461a      	mov	r2, r3
 8007918:	f000 f8e6 	bl	8007ae8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2160      	movs	r1, #96	; 0x60
 8007922:	4618      	mov	r0, r3
 8007924:	f000 f90f 	bl	8007b46 <TIM_ITRx_SetConfig>
      break;
 8007928:	e01c      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6859      	ldr	r1, [r3, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	461a      	mov	r2, r3
 8007938:	f000 f8a8 	bl	8007a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2140      	movs	r1, #64	; 0x40
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f8ff 	bl	8007b46 <TIM_ITRx_SetConfig>
      break;
 8007948:	e00c      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f000 f8f6 	bl	8007b46 <TIM_ITRx_SetConfig>
      break;
 800795a:	e003      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	73fb      	strb	r3, [r7, #15]
      break;
 8007960:	e000      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	bc80      	pop	{r7}
 800798e:	4770      	bx	lr

08007990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr
	...

080079c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a29      	ldr	r2, [pc, #164]	; (8007a80 <TIM_Base_SetConfig+0xb8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00b      	beq.n	80079f8 <TIM_Base_SetConfig+0x30>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e6:	d007      	beq.n	80079f8 <TIM_Base_SetConfig+0x30>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a26      	ldr	r2, [pc, #152]	; (8007a84 <TIM_Base_SetConfig+0xbc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d003      	beq.n	80079f8 <TIM_Base_SetConfig+0x30>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a25      	ldr	r2, [pc, #148]	; (8007a88 <TIM_Base_SetConfig+0xc0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d108      	bne.n	8007a0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a1c      	ldr	r2, [pc, #112]	; (8007a80 <TIM_Base_SetConfig+0xb8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00b      	beq.n	8007a2a <TIM_Base_SetConfig+0x62>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a18:	d007      	beq.n	8007a2a <TIM_Base_SetConfig+0x62>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a19      	ldr	r2, [pc, #100]	; (8007a84 <TIM_Base_SetConfig+0xbc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d003      	beq.n	8007a2a <TIM_Base_SetConfig+0x62>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a18      	ldr	r2, [pc, #96]	; (8007a88 <TIM_Base_SetConfig+0xc0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d108      	bne.n	8007a3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a07      	ldr	r2, [pc, #28]	; (8007a80 <TIM_Base_SetConfig+0xb8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d103      	bne.n	8007a70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	615a      	str	r2, [r3, #20]
}
 8007a76:	bf00      	nop
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr
 8007a80:	40012c00 	.word	0x40012c00
 8007a84:	40000400 	.word	0x40000400
 8007a88:	40000800 	.word	0x40000800

08007a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f023 0201 	bic.w	r2, r3, #1
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f023 030a 	bic.w	r3, r3, #10
 8007ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f023 0210 	bic.w	r2, r3, #16
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	031b      	lsls	r3, r3, #12
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	621a      	str	r2, [r3, #32]
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr

08007b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b085      	sub	sp, #20
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f043 0307 	orr.w	r3, r3, #7
 8007b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	609a      	str	r2, [r3, #8]
}
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr

08007b7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b087      	sub	sp, #28
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	607a      	str	r2, [r7, #4]
 8007b86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	021a      	lsls	r2, r3, #8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	609a      	str	r2, [r3, #8]
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e046      	b.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00e      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c1c:	d009      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a12      	ldr	r2, [pc, #72]	; (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d004      	beq.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a10      	ldr	r2, [pc, #64]	; (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d10c      	bne.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800

08007c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr

08007c86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr

08007c98 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d05d      	beq.n	8007d88 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d059      	beq.n	8007d88 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	2100      	movs	r1, #0
 8007cde:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d000      	beq.n	8007ce8 <xQueueGenericReset+0x50>
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d14c      	bne.n	8007d88 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8007cee:	f002 fbdf 	bl	800a4b0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfa:	6939      	ldr	r1, [r7, #16]
 8007cfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cfe:	fb01 f303 	mul.w	r3, r1, r3
 8007d02:	441a      	add	r2, r3
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	6939      	ldr	r1, [r7, #16]
 8007d22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d24:	fb01 f303 	mul.w	r3, r1, r3
 8007d28:	441a      	add	r2, r3
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	22ff      	movs	r2, #255	; 0xff
 8007d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	22ff      	movs	r2, #255	; 0xff
 8007d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d114      	bne.n	8007d6e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01a      	beq.n	8007d82 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	3310      	adds	r3, #16
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 fb9d 	bl	8009490 <xTaskRemoveFromEventList>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d012      	beq.n	8007d82 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007d5c:	4b15      	ldr	r3, [pc, #84]	; (8007db4 <xQueueGenericReset+0x11c>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	e009      	b.n	8007d82 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3310      	adds	r3, #16
 8007d72:	4618      	mov	r0, r3
 8007d74:	f002 f9f6 	bl	800a164 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3324      	adds	r3, #36	; 0x24
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f002 f9f1 	bl	800a164 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007d82:	f002 fbc5 	bl	800a510 <vPortExitCritical>
 8007d86:	e001      	b.n	8007d8c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <xQueueGenericReset+0x110>
        __asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	60bb      	str	r3, [r7, #8]
    }
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007da8:	697b      	ldr	r3, [r7, #20]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d02e      	beq.n	8007e2e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d000      	beq.n	8007de0 <xQueueGenericCreate+0x28>
 8007dde:	2101      	movs	r1, #1
 8007de0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d123      	bne.n	8007e2e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007dee:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8007df2:	d81c      	bhi.n	8007e2e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	fb02 f303 	mul.w	r3, r2, r3
 8007dfc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	3350      	adds	r3, #80	; 0x50
 8007e02:	4618      	mov	r0, r3
 8007e04:	f002 f98a 	bl	800a11c <pvPortMalloc>
 8007e08:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01c      	beq.n	8007e4a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	3350      	adds	r3, #80	; 0x50
 8007e18:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e1a:	79fa      	ldrb	r2, [r7, #7]
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	4613      	mov	r3, r2
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f814 	bl	8007e54 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8007e2c:	e00d      	b.n	8007e4a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <xQueueGenericCreate+0x92>
        __asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	613b      	str	r3, [r7, #16]
    }
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
    }
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e82:	2101      	movs	r1, #1
 8007e84:	69b8      	ldr	r0, [r7, #24]
 8007e86:	f7ff ff07 	bl	8007c98 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007e92:	bf00      	nop
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08e      	sub	sp, #56	; 0x38
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <xQueueGenericSend+0x32>
        __asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d103      	bne.n	8007edc <xQueueGenericSend+0x40>
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <xQueueGenericSend+0x44>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <xQueueGenericSend+0x46>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <xQueueGenericSend+0x60>
        __asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d103      	bne.n	8007f0a <xQueueGenericSend+0x6e>
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <xQueueGenericSend+0x72>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <xQueueGenericSend+0x74>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <xQueueGenericSend+0x8e>
        __asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	623b      	str	r3, [r7, #32]
    }
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f2a:	f001 fd53 	bl	80099d4 <xTaskGetSchedulerState>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d102      	bne.n	8007f3a <xQueueGenericSend+0x9e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <xQueueGenericSend+0xa2>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <xQueueGenericSend+0xa4>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <xQueueGenericSend+0xbe>
        __asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	61fb      	str	r3, [r7, #28]
    }
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007f5a:	f002 faa9 	bl	800a4b0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d302      	bcc.n	8007f70 <xQueueGenericSend+0xd4>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d129      	bne.n	8007fc4 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f76:	f000 fa3f 	bl	80083f8 <prvCopyDataToQueue>
 8007f7a:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d010      	beq.n	8007fa6 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	3324      	adds	r3, #36	; 0x24
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 fa81 	bl	8009490 <xTaskRemoveFromEventList>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d013      	beq.n	8007fbc <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007f94:	4b3f      	ldr	r3, [pc, #252]	; (8008094 <xQueueGenericSend+0x1f8>)
 8007f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	e00a      	b.n	8007fbc <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8007fac:	4b39      	ldr	r3, [pc, #228]	; (8008094 <xQueueGenericSend+0x1f8>)
 8007fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007fbc:	f002 faa8 	bl	800a510 <vPortExitCritical>
                return pdPASS;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e063      	b.n	800808c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d103      	bne.n	8007fd2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007fca:	f002 faa1 	bl	800a510 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e05c      	b.n	800808c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 fb2f 	bl	8009640 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007fe6:	f002 fa93 	bl	800a510 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007fea:	f000 fec1 	bl	8008d70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007fee:	f002 fa5f 	bl	800a4b0 <vPortEnterCritical>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ff8:	b25b      	sxtb	r3, r3
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d103      	bne.n	8008008 <xQueueGenericSend+0x16c>
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800800e:	b25b      	sxtb	r3, r3
 8008010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008014:	d103      	bne.n	800801e <xQueueGenericSend+0x182>
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800801e:	f002 fa77 	bl	800a510 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008022:	1d3a      	adds	r2, r7, #4
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	4611      	mov	r1, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fb1e 	bl	800966c <xTaskCheckForTimeOut>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d124      	bne.n	8008080 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008038:	f000 fad6 	bl	80085e8 <prvIsQueueFull>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d018      	beq.n	8008074 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	3310      	adds	r3, #16
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	4611      	mov	r1, r2
 800804a:	4618      	mov	r0, r3
 800804c:	f001 f9b6 	bl	80093bc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008052:	f000 fa61 	bl	8008518 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008056:	f000 fecf 	bl	8008df8 <xTaskResumeAll>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	f47f af7c 	bne.w	8007f5a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8008062:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <xQueueGenericSend+0x1f8>)
 8008064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	e772      	b.n	8007f5a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008076:	f000 fa4f 	bl	8008518 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800807a:	f000 febd 	bl	8008df8 <xTaskResumeAll>
 800807e:	e76c      	b.n	8007f5a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008082:	f000 fa49 	bl	8008518 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008086:	f000 feb7 	bl	8008df8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800808a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800808c:	4618      	mov	r0, r3
 800808e:	3738      	adds	r7, #56	; 0x38
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b092      	sub	sp, #72	; 0x48
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 80080aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d103      	bne.n	80080d4 <xQueueGenericSendFromISR+0x3c>
 80080cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <xQueueGenericSendFromISR+0x40>
 80080d4:	2301      	movs	r3, #1
 80080d6:	e000      	b.n	80080da <xQueueGenericSendFromISR+0x42>
 80080d8:	2300      	movs	r3, #0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d103      	bne.n	8008102 <xQueueGenericSendFromISR+0x6a>
 80080fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <xQueueGenericSendFromISR+0x6e>
 8008102:	2301      	movs	r3, #1
 8008104:	e000      	b.n	8008108 <xQueueGenericSendFromISR+0x70>
 8008106:	2300      	movs	r3, #0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008122:	f002 fb69 	bl	800a7f8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8008126:	f3ef 8211 	mrs	r2, BASEPRI
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	623a      	str	r2, [r7, #32]
 800813c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800813e:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <xQueueGenericSendFromISR+0xbc>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d146      	bne.n	80081e2 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8008154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800815a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800815e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800816a:	f000 f945 	bl	80083f8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800816e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d112      	bne.n	800819e <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	d02d      	beq.n	80081dc <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008182:	3324      	adds	r3, #36	; 0x24
 8008184:	4618      	mov	r0, r3
 8008186:	f001 f983 	bl	8009490 <xTaskRemoveFromEventList>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d025      	beq.n	80081dc <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d022      	beq.n	80081dc <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	e01e      	b.n	80081dc <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800819e:	f000 ff35 	bl	800900c <uxTaskGetNumberOfTasks>
 80081a2:	6338      	str	r0, [r7, #48]	; 0x30
 80081a4:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80081a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d916      	bls.n	80081dc <xQueueGenericSendFromISR+0x144>
 80081ae:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80081b2:	2b7f      	cmp	r3, #127	; 0x7f
 80081b4:	d10a      	bne.n	80081cc <xQueueGenericSendFromISR+0x134>
        __asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	61bb      	str	r3, [r7, #24]
    }
 80081c8:	bf00      	nop
 80081ca:	e7fe      	b.n	80081ca <xQueueGenericSendFromISR+0x132>
 80081cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80081d0:	3301      	adds	r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	b25a      	sxtb	r2, r3
 80081d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80081dc:	2301      	movs	r3, #1
 80081de:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80081e0:	e001      	b.n	80081e6 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	647b      	str	r3, [r7, #68]	; 0x44
 80081e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e8:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80081f0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80081f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3748      	adds	r7, #72	; 0x48
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08c      	sub	sp, #48	; 0x30
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008208:	2300      	movs	r3, #0
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <xQueueReceive+0x30>
        __asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	623b      	str	r3, [r7, #32]
    }
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d103      	bne.n	800823a <xQueueReceive+0x3e>
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <xQueueReceive+0x42>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <xQueueReceive+0x44>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <xQueueReceive+0x5e>
        __asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	61fb      	str	r3, [r7, #28]
    }
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800825a:	f001 fbbb 	bl	80099d4 <xTaskGetSchedulerState>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <xQueueReceive+0x6e>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <xQueueReceive+0x72>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <xQueueReceive+0x74>
 800826e:	2300      	movs	r3, #0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <xQueueReceive+0x8e>
        __asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	61bb      	str	r3, [r7, #24]
    }
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800828a:	f002 f911 	bl	800a4b0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01f      	beq.n	80082da <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800829e:	f000 f915 	bl	80084cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	1e5a      	subs	r2, r3, #1
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00f      	beq.n	80082d2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	3310      	adds	r3, #16
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 f8ea 	bl	8009490 <xTaskRemoveFromEventList>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80082c2:	4b3d      	ldr	r3, [pc, #244]	; (80083b8 <xQueueReceive+0x1bc>)
 80082c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80082d2:	f002 f91d 	bl	800a510 <vPortExitCritical>
                return pdPASS;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e069      	b.n	80083ae <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80082e0:	f002 f916 	bl	800a510 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80082e4:	2300      	movs	r3, #0
 80082e6:	e062      	b.n	80083ae <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80082e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80082ee:	f107 0310 	add.w	r3, r7, #16
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 f9a4 	bl	8009640 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80082f8:	2301      	movs	r3, #1
 80082fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80082fc:	f002 f908 	bl	800a510 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008300:	f000 fd36 	bl	8008d70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008304:	f002 f8d4 	bl	800a4b0 <vPortEnterCritical>
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800830e:	b25b      	sxtb	r3, r3
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008314:	d103      	bne.n	800831e <xQueueReceive+0x122>
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008324:	b25b      	sxtb	r3, r3
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d103      	bne.n	8008334 <xQueueReceive+0x138>
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008334:	f002 f8ec 	bl	800a510 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008338:	1d3a      	adds	r2, r7, #4
 800833a:	f107 0310 	add.w	r3, r7, #16
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f001 f993 	bl	800966c <xTaskCheckForTimeOut>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d123      	bne.n	8008394 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800834c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834e:	f000 f935 	bl	80085bc <prvIsQueueEmpty>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d017      	beq.n	8008388 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	3324      	adds	r3, #36	; 0x24
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f001 f82b 	bl	80093bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008368:	f000 f8d6 	bl	8008518 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800836c:	f000 fd44 	bl	8008df8 <xTaskResumeAll>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d189      	bne.n	800828a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8008376:	4b10      	ldr	r3, [pc, #64]	; (80083b8 <xQueueReceive+0x1bc>)
 8008378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	e780      	b.n	800828a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838a:	f000 f8c5 	bl	8008518 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800838e:	f000 fd33 	bl	8008df8 <xTaskResumeAll>
 8008392:	e77a      	b.n	800828a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008396:	f000 f8bf 	bl	8008518 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800839a:	f000 fd2d 	bl	8008df8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800839e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083a0:	f000 f90c 	bl	80085bc <prvIsQueueEmpty>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f43f af6f 	beq.w	800828a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80083ac:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3730      	adds	r7, #48	; 0x30
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	60bb      	str	r3, [r7, #8]
    }
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80083e0:	f002 f866 	bl	800a4b0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80083ea:	f002 f891 	bl	800a510 <vPortExitCritical>

    return uxReturn;
 80083ee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10d      	bne.n	8008432 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d14d      	bne.n	80084ba <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f001 faf4 	bl	8009a10 <xTaskPriorityDisinherit>
 8008428:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	609a      	str	r2, [r3, #8]
 8008430:	e043      	b.n	80084ba <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d119      	bne.n	800846c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6858      	ldr	r0, [r3, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	461a      	mov	r2, r3
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	f002 fa54 	bl	800a8f0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	441a      	add	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	429a      	cmp	r2, r3
 8008460:	d32b      	bcc.n	80084ba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	605a      	str	r2, [r3, #4]
 800846a:	e026      	b.n	80084ba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	68d8      	ldr	r0, [r3, #12]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	461a      	mov	r2, r3
 8008476:	68b9      	ldr	r1, [r7, #8]
 8008478:	f002 fa3a 	bl	800a8f0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008484:	425b      	negs	r3, r3
 8008486:	441a      	add	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d207      	bcs.n	80084a8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	425b      	negs	r3, r3
 80084a2:	441a      	add	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d105      	bne.n	80084ba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80084c2:	697b      	ldr	r3, [r7, #20]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d018      	beq.n	8008510 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	441a      	add	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68da      	ldr	r2, [r3, #12]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d303      	bcc.n	8008500 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68d9      	ldr	r1, [r3, #12]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	461a      	mov	r2, r3
 800850a:	6838      	ldr	r0, [r7, #0]
 800850c:	f002 f9f0 	bl	800a8f0 <memcpy>
    }
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008520:	f001 ffc6 	bl	800a4b0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800852a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800852c:	e011      	b.n	8008552 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d012      	beq.n	800855c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3324      	adds	r3, #36	; 0x24
 800853a:	4618      	mov	r0, r3
 800853c:	f000 ffa8 	bl	8009490 <xTaskRemoveFromEventList>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008546:	f001 f8f7 	bl	8009738 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	3b01      	subs	r3, #1
 800854e:	b2db      	uxtb	r3, r3
 8008550:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008556:	2b00      	cmp	r3, #0
 8008558:	dce9      	bgt.n	800852e <prvUnlockQueue+0x16>
 800855a:	e000      	b.n	800855e <prvUnlockQueue+0x46>
                    break;
 800855c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	22ff      	movs	r2, #255	; 0xff
 8008562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8008566:	f001 ffd3 	bl	800a510 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800856a:	f001 ffa1 	bl	800a4b0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008574:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008576:	e011      	b.n	800859c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d012      	beq.n	80085a6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3310      	adds	r3, #16
 8008584:	4618      	mov	r0, r3
 8008586:	f000 ff83 	bl	8009490 <xTaskRemoveFromEventList>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008590:	f001 f8d2 	bl	8009738 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	3b01      	subs	r3, #1
 8008598:	b2db      	uxtb	r3, r3
 800859a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800859c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dce9      	bgt.n	8008578 <prvUnlockQueue+0x60>
 80085a4:	e000      	b.n	80085a8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80085a6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	22ff      	movs	r2, #255	; 0xff
 80085ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80085b0:	f001 ffae 	bl	800a510 <vPortExitCritical>
}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80085c4:	f001 ff74 	bl	800a4b0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e001      	b.n	80085da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80085da:	f001 ff99 	bl	800a510 <vPortExitCritical>

    return xReturn;
 80085de:	68fb      	ldr	r3, [r7, #12]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80085f0:	f001 ff5e 	bl	800a4b0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d102      	bne.n	8008606 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8008600:	2301      	movs	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e001      	b.n	800860a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800860a:	f001 ff81 	bl	800a510 <vPortExitCritical>

    return xReturn;
 800860e:	68fb      	ldr	r3, [r7, #12]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	60fb      	str	r3, [r7, #12]
    }
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d024      	beq.n	8008692 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
 800864c:	e01e      	b.n	800868c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800864e:	4a18      	ldr	r2, [pc, #96]	; (80086b0 <vQueueAddToRegistry+0x98>)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	4413      	add	r3, r2
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	429a      	cmp	r2, r3
 800865c:	d105      	bne.n	800866a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	4a13      	ldr	r2, [pc, #76]	; (80086b0 <vQueueAddToRegistry+0x98>)
 8008664:	4413      	add	r3, r2
 8008666:	613b      	str	r3, [r7, #16]
                    break;
 8008668:	e013      	b.n	8008692 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <vQueueAddToRegistry+0x6e>
 8008670:	4a0f      	ldr	r2, [pc, #60]	; (80086b0 <vQueueAddToRegistry+0x98>)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	4a0b      	ldr	r2, [pc, #44]	; (80086b0 <vQueueAddToRegistry+0x98>)
 8008682:	4413      	add	r3, r2
 8008684:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	3301      	adds	r3, #1
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2b07      	cmp	r3, #7
 8008690:	d9dd      	bls.n	800864e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80086a4:	bf00      	nop
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	20000408 	.word	0x20000408

080086b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80086c4:	f001 fef4 	bl	800a4b0 <vPortEnterCritical>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ce:	b25b      	sxtb	r3, r3
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d4:	d103      	bne.n	80086de <vQueueWaitForMessageRestricted+0x2a>
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086e4:	b25b      	sxtb	r3, r3
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ea:	d103      	bne.n	80086f4 <vQueueWaitForMessageRestricted+0x40>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086f4:	f001 ff0c 	bl	800a510 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d106      	bne.n	800870e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	3324      	adds	r3, #36	; 0x24
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fe7b 	bl	8009404 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800870e:	6978      	ldr	r0, [r7, #20]
 8008710:	f7ff ff02 	bl	8008518 <prvUnlockQueue>
    }
 8008714:	bf00      	nop
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800871c:	b580      	push	{r7, lr}
 800871e:	b08c      	sub	sp, #48	; 0x30
 8008720:	af04      	add	r7, sp, #16
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fcf4 	bl	800a11c <pvPortMalloc>
 8008734:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d013      	beq.n	8008764 <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800873c:	207c      	movs	r0, #124	; 0x7c
 800873e:	f001 fced 	bl	800a11c <pvPortMalloc>
 8008742:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d008      	beq.n	800875c <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800874a:	227c      	movs	r2, #124	; 0x7c
 800874c:	2100      	movs	r1, #0
 800874e:	69f8      	ldr	r0, [r7, #28]
 8008750:	f002 f8dc 	bl	800a90c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	631a      	str	r2, [r3, #48]	; 0x30
 800875a:	e005      	b.n	8008768 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800875c:	6978      	ldr	r0, [r7, #20]
 800875e:	f001 fcef 	bl	800a140 <vPortFree>
 8008762:	e001      	b.n	8008768 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8008764:	2300      	movs	r3, #0
 8008766:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d013      	beq.n	8008796 <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800876e:	2300      	movs	r3, #0
 8008770:	9303      	str	r3, [sp, #12]
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	9302      	str	r3, [sp, #8]
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 f80e 	bl	80087a6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800878a:	69f8      	ldr	r0, [r7, #28]
 800878c:	f000 f89a 	bl	80088c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008790:	2301      	movs	r3, #1
 8008792:	61bb      	str	r3, [r7, #24]
 8008794:	e002      	b.n	800879c <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008796:	f04f 33ff 	mov.w	r3, #4294967295
 800879a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800879c:	69bb      	ldr	r3, [r7, #24]
    }
 800879e:	4618      	mov	r0, r3
 80087a0:	3720      	adds	r7, #32
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b088      	sub	sp, #32
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
 80087b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	461a      	mov	r2, r3
 80087be:	21a5      	movs	r1, #165	; 0xa5
 80087c0:	f002 f8a4 	bl	800a90c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087ce:	3b01      	subs	r3, #1
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	f023 0307 	bic.w	r3, r3, #7
 80087dc:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00a      	beq.n	80087fe <prvInitialiseNewTask+0x58>
        __asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	617b      	str	r3, [r7, #20]
    }
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01e      	beq.n	8008842 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008804:	2300      	movs	r3, #0
 8008806:	61fb      	str	r3, [r7, #28]
 8008808:	e012      	b.n	8008830 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	7819      	ldrb	r1, [r3, #0]
 8008812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	3334      	adds	r3, #52	; 0x34
 800881a:	460a      	mov	r2, r1
 800881c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	4413      	add	r3, r2
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d006      	beq.n	8008838 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	3301      	adds	r3, #1
 800882e:	61fb      	str	r3, [r7, #28]
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	2b13      	cmp	r3, #19
 8008834:	d9e9      	bls.n	800880a <prvInitialiseNewTask+0x64>
 8008836:	e000      	b.n	800883a <prvInitialiseNewTask+0x94>
            {
                break;
 8008838:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	2b04      	cmp	r3, #4
 8008846:	d90a      	bls.n	800885e <prvInitialiseNewTask+0xb8>
        __asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	613b      	str	r3, [r7, #16]
    }
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	2b04      	cmp	r3, #4
 8008862:	d901      	bls.n	8008868 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008864:	2304      	movs	r3, #4
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800886c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008872:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	3304      	adds	r3, #4
 8008878:	4618      	mov	r0, r3
 800887a:	f001 fc92 	bl	800a1a2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	3318      	adds	r3, #24
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fc8d 	bl	800a1a2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	f1c3 0205 	rsb	r2, r3, #5
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889c:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	68f9      	ldr	r1, [r7, #12]
 80088a2:	69b8      	ldr	r0, [r7, #24]
 80088a4:	f001 fd0e 	bl	800a2c4 <pxPortInitialiseStack>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80088ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80088ba:	bf00      	nop
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80088cc:	f001 fdf0 	bl	800a4b0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80088d0:	4b41      	ldr	r3, [pc, #260]	; (80089d8 <prvAddNewTaskToReadyList+0x114>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3301      	adds	r3, #1
 80088d6:	4a40      	ldr	r2, [pc, #256]	; (80089d8 <prvAddNewTaskToReadyList+0x114>)
 80088d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80088da:	4b40      	ldr	r3, [pc, #256]	; (80089dc <prvAddNewTaskToReadyList+0x118>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80088e2:	4a3e      	ldr	r2, [pc, #248]	; (80089dc <prvAddNewTaskToReadyList+0x118>)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088e8:	4b3b      	ldr	r3, [pc, #236]	; (80089d8 <prvAddNewTaskToReadyList+0x114>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d110      	bne.n	8008912 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80088f0:	f000 ffa4 	bl	800983c <prvInitialiseTaskLists>
 80088f4:	e00d      	b.n	8008912 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80088f6:	4b3a      	ldr	r3, [pc, #232]	; (80089e0 <prvAddNewTaskToReadyList+0x11c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d109      	bne.n	8008912 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088fe:	4b37      	ldr	r3, [pc, #220]	; (80089dc <prvAddNewTaskToReadyList+0x118>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	429a      	cmp	r2, r3
 800890a:	d802      	bhi.n	8008912 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800890c:	4a33      	ldr	r2, [pc, #204]	; (80089dc <prvAddNewTaskToReadyList+0x118>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8008912:	4b34      	ldr	r3, [pc, #208]	; (80089e4 <prvAddNewTaskToReadyList+0x120>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	4a32      	ldr	r2, [pc, #200]	; (80089e4 <prvAddNewTaskToReadyList+0x120>)
 800891a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800891c:	4b31      	ldr	r3, [pc, #196]	; (80089e4 <prvAddNewTaskToReadyList+0x120>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008928:	4b2f      	ldr	r3, [pc, #188]	; (80089e8 <prvAddNewTaskToReadyList+0x124>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	429a      	cmp	r2, r3
 800892e:	d903      	bls.n	8008938 <prvAddNewTaskToReadyList+0x74>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	4a2c      	ldr	r2, [pc, #176]	; (80089e8 <prvAddNewTaskToReadyList+0x124>)
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893c:	492b      	ldr	r1, [pc, #172]	; (80089ec <prvAddNewTaskToReadyList+0x128>)
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	3304      	adds	r3, #4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	609a      	str	r2, [r3, #8]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60da      	str	r2, [r3, #12]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	3204      	adds	r2, #4
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	1d1a      	adds	r2, r3, #4
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	609a      	str	r2, [r3, #8]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4a1c      	ldr	r2, [pc, #112]	; (80089ec <prvAddNewTaskToReadyList+0x128>)
 800897c:	441a      	add	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	615a      	str	r2, [r3, #20]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008986:	4919      	ldr	r1, [pc, #100]	; (80089ec <prvAddNewTaskToReadyList+0x128>)
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	440b      	add	r3, r1
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	1c59      	adds	r1, r3, #1
 8008996:	4815      	ldr	r0, [pc, #84]	; (80089ec <prvAddNewTaskToReadyList+0x128>)
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4403      	add	r3, r0
 80089a2:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80089a4:	f001 fdb4 	bl	800a510 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80089a8:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <prvAddNewTaskToReadyList+0x11c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00e      	beq.n	80089ce <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089b0:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <prvAddNewTaskToReadyList+0x118>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d207      	bcs.n	80089ce <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <prvAddNewTaskToReadyList+0x12c>)
 80089c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80089ce:	bf00      	nop
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200001f0 	.word	0x200001f0
 80089dc:	20000118 	.word	0x20000118
 80089e0:	200001fc 	.word	0x200001fc
 80089e4:	2000020c 	.word	0x2000020c
 80089e8:	200001f8 	.word	0x200001f8
 80089ec:	2000011c 	.word	0x2000011c
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d017      	beq.n	8008a36 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8008a06:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <vTaskDelay+0x60>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <vTaskDelay+0x30>
        __asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	60bb      	str	r3, [r7, #8]
    }
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8008a24:	f000 f9a4 	bl	8008d70 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a28:	2100      	movs	r1, #0
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 f886 	bl	8009b3c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8008a30:	f000 f9e2 	bl	8008df8 <xTaskResumeAll>
 8008a34:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d107      	bne.n	8008a4c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <vTaskDelay+0x64>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008a4c:	bf00      	nop
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	20000218 	.word	0x20000218
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8008a64:	f001 fd24 	bl	800a4b0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <vTaskSuspend+0x18>
 8008a6e:	4b36      	ldr	r3, [pc, #216]	; (8008b48 <vTaskSuspend+0xec>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	e000      	b.n	8008a76 <vTaskSuspend+0x1a>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 fbf7 	bl	800a270 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d004      	beq.n	8008a94 <vTaskSuspend+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	3318      	adds	r3, #24
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 fbee 	bl	800a270 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	482c      	ldr	r0, [pc, #176]	; (8008b4c <vTaskSuspend+0xf0>)
 8008a9c:	f001 fb8d 	bl	800a1ba <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	e010      	b.n	8008ac8 <vTaskSuspend+0x6c>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	4413      	add	r3, r2
 8008aac:	3378      	adds	r3, #120	; 0x78
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d105      	bne.n	8008ac2 <vTaskSuspend+0x66>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	4413      	add	r3, r2
 8008abc:	3378      	adds	r3, #120	; 0x78
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	ddeb      	ble.n	8008aa6 <vTaskSuspend+0x4a>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8008ace:	f001 fd1f 	bl	800a510 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8008ad2:	4b1f      	ldr	r3, [pc, #124]	; (8008b50 <vTaskSuspend+0xf4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <vTaskSuspend+0x8a>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8008ada:	f001 fce9 	bl	800a4b0 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8008ade:	f000 ff5f 	bl	80099a0 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8008ae2:	f001 fd15 	bl	800a510 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8008ae6:	4b18      	ldr	r3, [pc, #96]	; (8008b48 <vTaskSuspend+0xec>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d127      	bne.n	8008b40 <vTaskSuspend+0xe4>
        {
            if( xSchedulerRunning != pdFALSE )
 8008af0:	4b17      	ldr	r3, [pc, #92]	; (8008b50 <vTaskSuspend+0xf4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d017      	beq.n	8008b28 <vTaskSuspend+0xcc>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8008af8:	4b16      	ldr	r3, [pc, #88]	; (8008b54 <vTaskSuspend+0xf8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <vTaskSuspend+0xba>
        __asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60fb      	str	r3, [r7, #12]
    }
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <vTaskSuspend+0xb8>
                portYIELD_WITHIN_API();
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <vTaskSuspend+0xfc>)
 8008b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008b26:	e00b      	b.n	8008b40 <vTaskSuspend+0xe4>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008b28:	4b08      	ldr	r3, [pc, #32]	; (8008b4c <vTaskSuspend+0xf0>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	4b0b      	ldr	r3, [pc, #44]	; (8008b5c <vTaskSuspend+0x100>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d103      	bne.n	8008b3c <vTaskSuspend+0xe0>
                    pxCurrentTCB = NULL;
 8008b34:	4b04      	ldr	r3, [pc, #16]	; (8008b48 <vTaskSuspend+0xec>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]
    }
 8008b3a:	e001      	b.n	8008b40 <vTaskSuspend+0xe4>
                    vTaskSwitchContext();
 8008b3c:	f000 fbe2 	bl	8009304 <vTaskSwitchContext>
    }
 8008b40:	bf00      	nop
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000118 	.word	0x20000118
 8008b4c:	200001dc 	.word	0x200001dc
 8008b50:	200001fc 	.word	0x200001fc
 8008b54:	20000218 	.word	0x20000218
 8008b58:	e000ed04 	.word	0xe000ed04
 8008b5c:	200001f0 	.word	0x200001f0

08008b60 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10a      	bne.n	8008b8c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	60fb      	str	r3, [r7, #12]
    }
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	4a09      	ldr	r2, [pc, #36]	; (8008bb8 <prvTaskIsTaskSuspended+0x58>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d10a      	bne.n	8008bac <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	4a08      	ldr	r2, [pc, #32]	; (8008bbc <prvTaskIsTaskSuspended+0x5c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d005      	beq.n	8008bac <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008bac:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008bae:	4618      	mov	r0, r3
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bc80      	pop	{r7}
 8008bb6:	4770      	bx	lr
 8008bb8:	200001dc 	.word	0x200001dc
 8008bbc:	200001b0 	.word	0x200001b0

08008bc0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <vTaskResume+0x28>
        __asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60fb      	str	r3, [r7, #12]
    }
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008be8:	4b34      	ldr	r3, [pc, #208]	; (8008cbc <vTaskResume+0xfc>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d060      	beq.n	8008cb4 <vTaskResume+0xf4>
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d05d      	beq.n	8008cb4 <vTaskResume+0xf4>
        {
            taskENTER_CRITICAL();
 8008bf8:	f001 fc5a 	bl	800a4b0 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008bfc:	6978      	ldr	r0, [r7, #20]
 8008bfe:	f7ff ffaf 	bl	8008b60 <prvTaskIsTaskSuspended>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d053      	beq.n	8008cb0 <vTaskResume+0xf0>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 fb2f 	bl	800a270 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c16:	4b2a      	ldr	r3, [pc, #168]	; (8008cc0 <vTaskResume+0x100>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d903      	bls.n	8008c26 <vTaskResume+0x66>
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	4a27      	ldr	r2, [pc, #156]	; (8008cc0 <vTaskResume+0x100>)
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2a:	4926      	ldr	r1, [pc, #152]	; (8008cc4 <vTaskResume+0x104>)
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	3304      	adds	r3, #4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	613b      	str	r3, [r7, #16]
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	609a      	str	r2, [r3, #8]
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	3204      	adds	r2, #4
 8008c52:	605a      	str	r2, [r3, #4]
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	1d1a      	adds	r2, r3, #4
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	609a      	str	r2, [r3, #8]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c60:	4613      	mov	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4a16      	ldr	r2, [pc, #88]	; (8008cc4 <vTaskResume+0x104>)
 8008c6a:	441a      	add	r2, r3
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	615a      	str	r2, [r3, #20]
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c74:	4913      	ldr	r1, [pc, #76]	; (8008cc4 <vTaskResume+0x104>)
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	1c59      	adds	r1, r3, #1
 8008c84:	480f      	ldr	r0, [pc, #60]	; (8008cc4 <vTaskResume+0x104>)
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4403      	add	r3, r0
 8008c90:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c96:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <vTaskResume+0xfc>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d307      	bcc.n	8008cb0 <vTaskResume+0xf0>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8008ca0:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <vTaskResume+0x108>)
 8008ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8008cb0:	f001 fc2e 	bl	800a510 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008cb4:	bf00      	nop
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20000118 	.word	0x20000118
 8008cc0:	200001f8 	.word	0x200001f8
 8008cc4:	2000011c 	.word	0x2000011c
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8008cd2:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <vTaskStartScheduler+0x88>)
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2280      	movs	r2, #128	; 0x80
 8008cde:	491e      	ldr	r1, [pc, #120]	; (8008d58 <vTaskStartScheduler+0x8c>)
 8008ce0:	481e      	ldr	r0, [pc, #120]	; (8008d5c <vTaskStartScheduler+0x90>)
 8008ce2:	f7ff fd1b 	bl	800871c <xTaskCreate>
 8008ce6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d102      	bne.n	8008cf4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8008cee:	f000 ff93 	bl	8009c18 <xTimerCreateTimerTask>
 8008cf2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d116      	bne.n	8008d28 <vTaskStartScheduler+0x5c>
        __asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	60bb      	str	r3, [r7, #8]
    }
 8008d0c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8008d0e:	4b14      	ldr	r3, [pc, #80]	; (8008d60 <vTaskStartScheduler+0x94>)
 8008d10:	f04f 32ff 	mov.w	r2, #4294967295
 8008d14:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008d16:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <vTaskStartScheduler+0x98>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d1c:	4b12      	ldr	r3, [pc, #72]	; (8008d68 <vTaskStartScheduler+0x9c>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8008d22:	f001 fb53 	bl	800a3cc <xPortStartScheduler>
 8008d26:	e00e      	b.n	8008d46 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2e:	d10a      	bne.n	8008d46 <vTaskStartScheduler+0x7a>
        __asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	607b      	str	r3, [r7, #4]
    }
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008d46:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <vTaskStartScheduler+0xa0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000214 	.word	0x20000214
 8008d58:	0800d008 	.word	0x0800d008
 8008d5c:	08009751 	.word	0x08009751
 8008d60:	20000210 	.word	0x20000210
 8008d64:	200001fc 	.word	0x200001fc
 8008d68:	200001f4 	.word	0x200001f4
 8008d6c:	2000001c 	.word	0x2000001c

08008d70 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008d74:	4b04      	ldr	r3, [pc, #16]	; (8008d88 <vTaskSuspendAll+0x18>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	4a03      	ldr	r2, [pc, #12]	; (8008d88 <vTaskSuspendAll+0x18>)
 8008d7c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008d7e:	bf00      	nop
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20000218 	.word	0x20000218

08008d8c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008d96:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <prvGetExpectedIdleTime+0x58>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008da2:	4b11      	ldr	r3, [pc, #68]	; (8008de8 <prvGetExpectedIdleTime+0x5c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	607b      	str	r3, [r7, #4]
 8008db0:	e012      	b.n	8008dd8 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008db2:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <prvGetExpectedIdleTime+0x60>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d902      	bls.n	8008dc0 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	607b      	str	r3, [r7, #4]
 8008dbe:	e00b      	b.n	8008dd8 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	607b      	str	r3, [r7, #4]
 8008dca:	e005      	b.n	8008dd8 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8008dcc:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <prvGetExpectedIdleTime+0x64>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <prvGetExpectedIdleTime+0x68>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 8008dd8:	687b      	ldr	r3, [r7, #4]
    }
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bc80      	pop	{r7}
 8008de2:	4770      	bx	lr
 8008de4:	200001f8 	.word	0x200001f8
 8008de8:	20000118 	.word	0x20000118
 8008dec:	2000011c 	.word	0x2000011c
 8008df0:	20000210 	.word	0x20000210
 8008df4:	200001f4 	.word	0x200001f4

08008df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8008e06:	4b71      	ldr	r3, [pc, #452]	; (8008fcc <xTaskResumeAll+0x1d4>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <xTaskResumeAll+0x2c>
        __asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
    }
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8008e24:	f001 fb44 	bl	800a4b0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008e28:	4b68      	ldr	r3, [pc, #416]	; (8008fcc <xTaskResumeAll+0x1d4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	4a67      	ldr	r2, [pc, #412]	; (8008fcc <xTaskResumeAll+0x1d4>)
 8008e30:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e32:	4b66      	ldr	r3, [pc, #408]	; (8008fcc <xTaskResumeAll+0x1d4>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f040 80c1 	bne.w	8008fbe <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e3c:	4b64      	ldr	r3, [pc, #400]	; (8008fd0 <xTaskResumeAll+0x1d8>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 80bc 	beq.w	8008fbe <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e46:	e08b      	b.n	8008f60 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e48:	4b62      	ldr	r3, [pc, #392]	; (8008fd4 <xTaskResumeAll+0x1dc>)
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	613b      	str	r3, [r7, #16]
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	6a12      	ldr	r2, [r2, #32]
 8008e5e:	609a      	str	r2, [r3, #8]
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	69fa      	ldr	r2, [r7, #28]
 8008e66:	69d2      	ldr	r2, [r2, #28]
 8008e68:	605a      	str	r2, [r3, #4]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	3318      	adds	r3, #24
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d103      	bne.n	8008e7e <xTaskResumeAll+0x86>
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	6a1a      	ldr	r2, [r3, #32]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	605a      	str	r2, [r3, #4]
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	2200      	movs	r2, #0
 8008e82:	629a      	str	r2, [r3, #40]	; 0x28
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	1e5a      	subs	r2, r3, #1
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	69fa      	ldr	r2, [r7, #28]
 8008e9a:	68d2      	ldr	r2, [r2, #12]
 8008e9c:	609a      	str	r2, [r3, #8]
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	6892      	ldr	r2, [r2, #8]
 8008ea6:	605a      	str	r2, [r3, #4]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d103      	bne.n	8008ebc <xTaskResumeAll+0xc4>
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	605a      	str	r2, [r3, #4]
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	615a      	str	r2, [r3, #20]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	1e5a      	subs	r2, r3, #1
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed0:	4b41      	ldr	r3, [pc, #260]	; (8008fd8 <xTaskResumeAll+0x1e0>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d903      	bls.n	8008ee0 <xTaskResumeAll+0xe8>
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	4a3e      	ldr	r2, [pc, #248]	; (8008fd8 <xTaskResumeAll+0x1e0>)
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	493d      	ldr	r1, [pc, #244]	; (8008fdc <xTaskResumeAll+0x1e4>)
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	60bb      	str	r3, [r7, #8]
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	609a      	str	r2, [r3, #8]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	60da      	str	r2, [r3, #12]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	3204      	adds	r2, #4
 8008f0c:	605a      	str	r2, [r3, #4]
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	1d1a      	adds	r2, r3, #4
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	609a      	str	r2, [r3, #8]
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4a2e      	ldr	r2, [pc, #184]	; (8008fdc <xTaskResumeAll+0x1e4>)
 8008f24:	441a      	add	r2, r3
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	615a      	str	r2, [r3, #20]
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	492b      	ldr	r1, [pc, #172]	; (8008fdc <xTaskResumeAll+0x1e4>)
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	1c59      	adds	r1, r3, #1
 8008f3e:	4827      	ldr	r0, [pc, #156]	; (8008fdc <xTaskResumeAll+0x1e4>)
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4403      	add	r3, r0
 8008f4a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	4b23      	ldr	r3, [pc, #140]	; (8008fe0 <xTaskResumeAll+0x1e8>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d302      	bcc.n	8008f60 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8008f5a:	4b22      	ldr	r3, [pc, #136]	; (8008fe4 <xTaskResumeAll+0x1ec>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f60:	4b1c      	ldr	r3, [pc, #112]	; (8008fd4 <xTaskResumeAll+0x1dc>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f47f af6f 	bne.w	8008e48 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008f70:	f000 fd16 	bl	80099a0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f74:	4b1c      	ldr	r3, [pc, #112]	; (8008fe8 <xTaskResumeAll+0x1f0>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d010      	beq.n	8008fa2 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8008f80:	f000 f8a8 	bl	80090d4 <xTaskIncrementTick>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8008f8a:	4b16      	ldr	r3, [pc, #88]	; (8008fe4 <xTaskResumeAll+0x1ec>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1f1      	bne.n	8008f80 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8008f9c:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <xTaskResumeAll+0x1f0>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008fa2:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <xTaskResumeAll+0x1ec>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8008faa:	2301      	movs	r3, #1
 8008fac:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008fae:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <xTaskResumeAll+0x1f4>)
 8008fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008fbe:	f001 faa7 	bl	800a510 <vPortExitCritical>

    return xAlreadyYielded;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3720      	adds	r7, #32
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000218 	.word	0x20000218
 8008fd0:	200001f0 	.word	0x200001f0
 8008fd4:	200001b0 	.word	0x200001b0
 8008fd8:	200001f8 	.word	0x200001f8
 8008fdc:	2000011c 	.word	0x2000011c
 8008fe0:	20000118 	.word	0x20000118
 8008fe4:	20000204 	.word	0x20000204
 8008fe8:	20000200 	.word	0x20000200
 8008fec:	e000ed04 	.word	0xe000ed04

08008ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8008ff6:	4b04      	ldr	r3, [pc, #16]	; (8009008 <xTaskGetTickCount+0x18>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8008ffc:	687b      	ldr	r3, [r7, #4]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	bc80      	pop	{r7}
 8009006:	4770      	bx	lr
 8009008:	200001f4 	.word	0x200001f4

0800900c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8009010:	4b02      	ldr	r3, [pc, #8]	; (800901c <uxTaskGetNumberOfTasks+0x10>)
 8009012:	681b      	ldr	r3, [r3, #0]
}
 8009014:	4618      	mov	r0, r3
 8009016:	46bd      	mov	sp, r7
 8009018:	bc80      	pop	{r7}
 800901a:	4770      	bx	lr
 800901c:	200001f0 	.word	0x200001f0

08009020 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8009028:	4b26      	ldr	r3, [pc, #152]	; (80090c4 <vTaskStepTick+0xa4>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	441a      	add	r2, r3
 8009030:	4b25      	ldr	r3, [pc, #148]	; (80090c8 <vTaskStepTick+0xa8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d90a      	bls.n	800904e <vTaskStepTick+0x2e>
        __asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	617b      	str	r3, [r7, #20]
    }
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 800904e:	4b1d      	ldr	r3, [pc, #116]	; (80090c4 <vTaskStepTick+0xa4>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	441a      	add	r2, r3
 8009056:	4b1c      	ldr	r3, [pc, #112]	; (80090c8 <vTaskStepTick+0xa8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	429a      	cmp	r2, r3
 800905c:	d128      	bne.n	80090b0 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 800905e:	4b1b      	ldr	r3, [pc, #108]	; (80090cc <vTaskStepTick+0xac>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10a      	bne.n	800907c <vTaskStepTick+0x5c>
        __asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	613b      	str	r3, [r7, #16]
    }
 8009078:	bf00      	nop
 800907a:	e7fe      	b.n	800907a <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <vTaskStepTick+0x78>
        __asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	60fb      	str	r3, [r7, #12]
    }
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8009098:	f001 fa0a 	bl	800a4b0 <vPortEnterCritical>
            {
                xPendedTicks++;
 800909c:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <vTaskStepTick+0xb0>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	4a0b      	ldr	r2, [pc, #44]	; (80090d0 <vTaskStepTick+0xb0>)
 80090a4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80090a6:	f001 fa33 	bl	800a510 <vPortExitCritical>
            xTicksToJump--;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <vTaskStepTick+0xa4>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4413      	add	r3, r2
 80090b8:	4a02      	ldr	r2, [pc, #8]	; (80090c4 <vTaskStepTick+0xa4>)
 80090ba:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 80090bc:	bf00      	nop
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200001f4 	.word	0x200001f4
 80090c8:	20000210 	.word	0x20000210
 80090cc:	20000218 	.word	0x20000218
 80090d0:	20000200 	.word	0x20000200

080090d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08a      	sub	sp, #40	; 0x28
 80090d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80090da:	2300      	movs	r3, #0
 80090dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090de:	4b7e      	ldr	r3, [pc, #504]	; (80092d8 <xTaskIncrementTick+0x204>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f040 80ed 	bne.w	80092c2 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090e8:	4b7c      	ldr	r3, [pc, #496]	; (80092dc <xTaskIncrementTick+0x208>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80090f0:	4a7a      	ldr	r2, [pc, #488]	; (80092dc <xTaskIncrementTick+0x208>)
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d120      	bne.n	800913e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80090fc:	4b78      	ldr	r3, [pc, #480]	; (80092e0 <xTaskIncrementTick+0x20c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <xTaskIncrementTick+0x48>
        __asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	607b      	str	r3, [r7, #4]
    }
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <xTaskIncrementTick+0x46>
 800911c:	4b70      	ldr	r3, [pc, #448]	; (80092e0 <xTaskIncrementTick+0x20c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	61fb      	str	r3, [r7, #28]
 8009122:	4b70      	ldr	r3, [pc, #448]	; (80092e4 <xTaskIncrementTick+0x210>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a6e      	ldr	r2, [pc, #440]	; (80092e0 <xTaskIncrementTick+0x20c>)
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	4a6e      	ldr	r2, [pc, #440]	; (80092e4 <xTaskIncrementTick+0x210>)
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	4b6d      	ldr	r3, [pc, #436]	; (80092e8 <xTaskIncrementTick+0x214>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3301      	adds	r3, #1
 8009136:	4a6c      	ldr	r2, [pc, #432]	; (80092e8 <xTaskIncrementTick+0x214>)
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	f000 fc31 	bl	80099a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800913e:	4b6b      	ldr	r3, [pc, #428]	; (80092ec <xTaskIncrementTick+0x218>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6a3a      	ldr	r2, [r7, #32]
 8009144:	429a      	cmp	r2, r3
 8009146:	f0c0 80a7 	bcc.w	8009298 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914a:	4b65      	ldr	r3, [pc, #404]	; (80092e0 <xTaskIncrementTick+0x20c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d104      	bne.n	800915e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009154:	4b65      	ldr	r3, [pc, #404]	; (80092ec <xTaskIncrementTick+0x218>)
 8009156:	f04f 32ff 	mov.w	r2, #4294967295
 800915a:	601a      	str	r2, [r3, #0]
                    break;
 800915c:	e09c      	b.n	8009298 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915e:	4b60      	ldr	r3, [pc, #384]	; (80092e0 <xTaskIncrementTick+0x20c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800916e:	6a3a      	ldr	r2, [r7, #32]
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	429a      	cmp	r2, r3
 8009174:	d203      	bcs.n	800917e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009176:	4a5d      	ldr	r2, [pc, #372]	; (80092ec <xTaskIncrementTick+0x218>)
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800917c:	e08c      	b.n	8009298 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	68d2      	ldr	r2, [r2, #12]
 800918c:	609a      	str	r2, [r3, #8]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	69ba      	ldr	r2, [r7, #24]
 8009194:	6892      	ldr	r2, [r2, #8]
 8009196:	605a      	str	r2, [r3, #4]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	3304      	adds	r3, #4
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d103      	bne.n	80091ac <xTaskIncrementTick+0xd8>
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	605a      	str	r2, [r3, #4]
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	2200      	movs	r2, #0
 80091b0:	615a      	str	r2, [r3, #20]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	1e5a      	subs	r2, r3, #1
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01e      	beq.n	8009202 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	6a12      	ldr	r2, [r2, #32]
 80091d2:	609a      	str	r2, [r3, #8]
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	69d2      	ldr	r2, [r2, #28]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	3318      	adds	r3, #24
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d103      	bne.n	80091f2 <xTaskIncrementTick+0x11e>
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	6a1a      	ldr	r2, [r3, #32]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	605a      	str	r2, [r3, #4]
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	2200      	movs	r2, #0
 80091f6:	629a      	str	r2, [r3, #40]	; 0x28
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	1e5a      	subs	r2, r3, #1
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009206:	4b3a      	ldr	r3, [pc, #232]	; (80092f0 <xTaskIncrementTick+0x21c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d903      	bls.n	8009216 <xTaskIncrementTick+0x142>
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	4a37      	ldr	r2, [pc, #220]	; (80092f0 <xTaskIncrementTick+0x21c>)
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921a:	4936      	ldr	r1, [pc, #216]	; (80092f4 <xTaskIncrementTick+0x220>)
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	3304      	adds	r3, #4
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60bb      	str	r3, [r7, #8]
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	609a      	str	r2, [r3, #8]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	60da      	str	r2, [r3, #12]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	3204      	adds	r2, #4
 8009242:	605a      	str	r2, [r3, #4]
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	1d1a      	adds	r2, r3, #4
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	609a      	str	r2, [r3, #8]
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <xTaskIncrementTick+0x220>)
 800925a:	441a      	add	r2, r3
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	615a      	str	r2, [r3, #20]
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009264:	4923      	ldr	r1, [pc, #140]	; (80092f4 <xTaskIncrementTick+0x220>)
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	1c59      	adds	r1, r3, #1
 8009274:	481f      	ldr	r0, [pc, #124]	; (80092f4 <xTaskIncrementTick+0x220>)
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4403      	add	r3, r0
 8009280:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009286:	4b1c      	ldr	r3, [pc, #112]	; (80092f8 <xTaskIncrementTick+0x224>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	429a      	cmp	r2, r3
 800928e:	f67f af5c 	bls.w	800914a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8009292:	2301      	movs	r3, #1
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009296:	e758      	b.n	800914a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009298:	4b17      	ldr	r3, [pc, #92]	; (80092f8 <xTaskIncrementTick+0x224>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929e:	4915      	ldr	r1, [pc, #84]	; (80092f4 <xTaskIncrementTick+0x220>)
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d901      	bls.n	80092b4 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80092b0:	2301      	movs	r3, #1
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80092b4:	4b11      	ldr	r3, [pc, #68]	; (80092fc <xTaskIncrementTick+0x228>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80092bc:	2301      	movs	r3, #1
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
 80092c0:	e004      	b.n	80092cc <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80092c2:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <xTaskIncrementTick+0x22c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3301      	adds	r3, #1
 80092c8:	4a0d      	ldr	r2, [pc, #52]	; (8009300 <xTaskIncrementTick+0x22c>)
 80092ca:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3728      	adds	r7, #40	; 0x28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000218 	.word	0x20000218
 80092dc:	200001f4 	.word	0x200001f4
 80092e0:	200001a8 	.word	0x200001a8
 80092e4:	200001ac 	.word	0x200001ac
 80092e8:	20000208 	.word	0x20000208
 80092ec:	20000210 	.word	0x20000210
 80092f0:	200001f8 	.word	0x200001f8
 80092f4:	2000011c 	.word	0x2000011c
 80092f8:	20000118 	.word	0x20000118
 80092fc:	20000204 	.word	0x20000204
 8009300:	20000200 	.word	0x20000200

08009304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800930a:	4b27      	ldr	r3, [pc, #156]	; (80093a8 <vTaskSwitchContext+0xa4>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8009312:	4b26      	ldr	r3, [pc, #152]	; (80093ac <vTaskSwitchContext+0xa8>)
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8009318:	e041      	b.n	800939e <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 800931a:	4b24      	ldr	r3, [pc, #144]	; (80093ac <vTaskSwitchContext+0xa8>)
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009320:	4b23      	ldr	r3, [pc, #140]	; (80093b0 <vTaskSwitchContext+0xac>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	e010      	b.n	800934a <vTaskSwitchContext+0x46>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <vTaskSwitchContext+0x40>
        __asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	607b      	str	r3, [r7, #4]
    }
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <vTaskSwitchContext+0x3e>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3b01      	subs	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	491a      	ldr	r1, [pc, #104]	; (80093b4 <vTaskSwitchContext+0xb0>)
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	440b      	add	r3, r1
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0e4      	beq.n	8009328 <vTaskSwitchContext+0x24>
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4a12      	ldr	r2, [pc, #72]	; (80093b4 <vTaskSwitchContext+0xb0>)
 800936a:	4413      	add	r3, r2
 800936c:	60bb      	str	r3, [r7, #8]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	605a      	str	r2, [r3, #4]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3308      	adds	r3, #8
 8009380:	429a      	cmp	r2, r3
 8009382:	d104      	bne.n	800938e <vTaskSwitchContext+0x8a>
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	605a      	str	r2, [r3, #4]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	4a08      	ldr	r2, [pc, #32]	; (80093b8 <vTaskSwitchContext+0xb4>)
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	4a05      	ldr	r2, [pc, #20]	; (80093b0 <vTaskSwitchContext+0xac>)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6013      	str	r3, [r2, #0]
}
 800939e:	bf00      	nop
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr
 80093a8:	20000218 	.word	0x20000218
 80093ac:	20000204 	.word	0x20000204
 80093b0:	200001f8 	.word	0x200001f8
 80093b4:	2000011c 	.word	0x2000011c
 80093b8:	20000118 	.word	0x20000118

080093bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	60fb      	str	r3, [r7, #12]
    }
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093e2:	4b07      	ldr	r3, [pc, #28]	; (8009400 <vTaskPlaceOnEventList+0x44>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3318      	adds	r3, #24
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 ff08 	bl	800a200 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093f0:	2101      	movs	r1, #1
 80093f2:	6838      	ldr	r0, [r7, #0]
 80093f4:	f000 fba2 	bl	8009b3c <prvAddCurrentTaskToDelayedList>
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20000118 	.word	0x20000118

08009404 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	613b      	str	r3, [r7, #16]
    }
 8009428:	bf00      	nop
 800942a:	e7fe      	b.n	800942a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	4b16      	ldr	r3, [pc, #88]	; (800948c <vTaskPlaceOnEventListRestricted+0x88>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	61da      	str	r2, [r3, #28]
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <vTaskPlaceOnEventListRestricted+0x88>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	6892      	ldr	r2, [r2, #8]
 8009442:	621a      	str	r2, [r3, #32]
 8009444:	4b11      	ldr	r3, [pc, #68]	; (800948c <vTaskPlaceOnEventListRestricted+0x88>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	3218      	adds	r2, #24
 800944e:	605a      	str	r2, [r3, #4]
 8009450:	4b0e      	ldr	r3, [pc, #56]	; (800948c <vTaskPlaceOnEventListRestricted+0x88>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f103 0218 	add.w	r2, r3, #24
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	609a      	str	r2, [r3, #8]
 800945c:	4b0b      	ldr	r3, [pc, #44]	; (800948c <vTaskPlaceOnEventListRestricted+0x88>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	629a      	str	r2, [r3, #40]	; 0x28
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8009474:	f04f 33ff 	mov.w	r3, #4294967295
 8009478:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	68b8      	ldr	r0, [r7, #8]
 800947e:	f000 fb5d 	bl	8009b3c <prvAddCurrentTaskToDelayedList>
    }
 8009482:	bf00      	nop
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20000118 	.word	0x20000118

08009490 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08a      	sub	sp, #40	; 0x28
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60fb      	str	r3, [r7, #12]
    }
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	61fb      	str	r3, [r7, #28]
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	6a3a      	ldr	r2, [r7, #32]
 80094c8:	6a12      	ldr	r2, [r2, #32]
 80094ca:	609a      	str	r2, [r3, #8]
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	6a3a      	ldr	r2, [r7, #32]
 80094d2:	69d2      	ldr	r2, [r2, #28]
 80094d4:	605a      	str	r2, [r3, #4]
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	3318      	adds	r3, #24
 80094de:	429a      	cmp	r2, r3
 80094e0:	d103      	bne.n	80094ea <xTaskRemoveFromEventList+0x5a>
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	6a1a      	ldr	r2, [r3, #32]
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	2200      	movs	r2, #0
 80094ee:	629a      	str	r2, [r3, #40]	; 0x28
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	1e5a      	subs	r2, r3, #1
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094fa:	4b4b      	ldr	r3, [pc, #300]	; (8009628 <xTaskRemoveFromEventList+0x198>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d161      	bne.n	80095c6 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	617b      	str	r3, [r7, #20]
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	6a3a      	ldr	r2, [r7, #32]
 800950e:	68d2      	ldr	r2, [r2, #12]
 8009510:	609a      	str	r2, [r3, #8]
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	6a3a      	ldr	r2, [r7, #32]
 8009518:	6892      	ldr	r2, [r2, #8]
 800951a:	605a      	str	r2, [r3, #4]
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	3304      	adds	r3, #4
 8009524:	429a      	cmp	r2, r3
 8009526:	d103      	bne.n	8009530 <xTaskRemoveFromEventList+0xa0>
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	605a      	str	r2, [r3, #4]
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	2200      	movs	r2, #0
 8009534:	615a      	str	r2, [r3, #20]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	1e5a      	subs	r2, r3, #1
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009544:	4b39      	ldr	r3, [pc, #228]	; (800962c <xTaskRemoveFromEventList+0x19c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d903      	bls.n	8009554 <xTaskRemoveFromEventList+0xc4>
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a36      	ldr	r2, [pc, #216]	; (800962c <xTaskRemoveFromEventList+0x19c>)
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009558:	4935      	ldr	r1, [pc, #212]	; (8009630 <xTaskRemoveFromEventList+0x1a0>)
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	3304      	adds	r3, #4
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	613b      	str	r3, [r7, #16]
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	609a      	str	r2, [r3, #8]
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	60da      	str	r2, [r3, #12]
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	6a3a      	ldr	r2, [r7, #32]
 800957e:	3204      	adds	r2, #4
 8009580:	605a      	str	r2, [r3, #4]
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	1d1a      	adds	r2, r3, #4
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	609a      	str	r2, [r3, #8]
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958e:	4613      	mov	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4a26      	ldr	r2, [pc, #152]	; (8009630 <xTaskRemoveFromEventList+0x1a0>)
 8009598:	441a      	add	r2, r3
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	615a      	str	r2, [r3, #20]
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a2:	4923      	ldr	r1, [pc, #140]	; (8009630 <xTaskRemoveFromEventList+0x1a0>)
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	1c59      	adds	r1, r3, #1
 80095b2:	481f      	ldr	r0, [pc, #124]	; (8009630 <xTaskRemoveFromEventList+0x1a0>)
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4403      	add	r3, r0
 80095be:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 80095c0:	f000 f9ee 	bl	80099a0 <prvResetNextTaskUnblockTime>
 80095c4:	e01b      	b.n	80095fe <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095c6:	4b1b      	ldr	r3, [pc, #108]	; (8009634 <xTaskRemoveFromEventList+0x1a4>)
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	61bb      	str	r3, [r7, #24]
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	61da      	str	r2, [r3, #28]
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	689a      	ldr	r2, [r3, #8]
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	621a      	str	r2, [r3, #32]
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	6a3a      	ldr	r2, [r7, #32]
 80095e0:	3218      	adds	r2, #24
 80095e2:	605a      	str	r2, [r3, #4]
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	f103 0218 	add.w	r2, r3, #24
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	609a      	str	r2, [r3, #8]
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	4a10      	ldr	r2, [pc, #64]	; (8009634 <xTaskRemoveFromEventList+0x1a4>)
 80095f2:	629a      	str	r2, [r3, #40]	; 0x28
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <xTaskRemoveFromEventList+0x1a4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3301      	adds	r3, #1
 80095fa:	4a0e      	ldr	r2, [pc, #56]	; (8009634 <xTaskRemoveFromEventList+0x1a4>)
 80095fc:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009602:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <xTaskRemoveFromEventList+0x1a8>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	429a      	cmp	r2, r3
 800960a:	d905      	bls.n	8009618 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009610:	4b0a      	ldr	r3, [pc, #40]	; (800963c <xTaskRemoveFromEventList+0x1ac>)
 8009612:	2201      	movs	r2, #1
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e001      	b.n	800961c <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8009618:	2300      	movs	r3, #0
 800961a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800961e:	4618      	mov	r0, r3
 8009620:	3728      	adds	r7, #40	; 0x28
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000218 	.word	0x20000218
 800962c:	200001f8 	.word	0x200001f8
 8009630:	2000011c 	.word	0x2000011c
 8009634:	200001b0 	.word	0x200001b0
 8009638:	20000118 	.word	0x20000118
 800963c:	20000204 	.word	0x20000204

08009640 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009648:	4b06      	ldr	r3, [pc, #24]	; (8009664 <vTaskInternalSetTimeOutState+0x24>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <vTaskInternalSetTimeOutState+0x28>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	605a      	str	r2, [r3, #4]
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bc80      	pop	{r7}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20000208 	.word	0x20000208
 8009668:	200001f4 	.word	0x200001f4

0800966c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10a      	bne.n	8009692 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	613b      	str	r3, [r7, #16]
    }
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	60fb      	str	r3, [r7, #12]
    }
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80096ae:	f000 feff 	bl	800a4b0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80096b2:	4b1f      	ldr	r3, [pc, #124]	; (8009730 <xTaskCheckForTimeOut+0xc4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d102      	bne.n	80096d2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61fb      	str	r3, [r7, #28]
 80096d0:	e026      	b.n	8009720 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	4b17      	ldr	r3, [pc, #92]	; (8009734 <xTaskCheckForTimeOut+0xc8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d00a      	beq.n	80096f4 <xTaskCheckForTimeOut+0x88>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d305      	bcc.n	80096f4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80096e8:	2301      	movs	r3, #1
 80096ea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2200      	movs	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	e015      	b.n	8009720 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d20b      	bcs.n	8009716 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	1ad2      	subs	r2, r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff ff98 	bl	8009640 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009710:	2300      	movs	r3, #0
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	e004      	b.n	8009720 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800971c:	2301      	movs	r3, #1
 800971e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009720:	f000 fef6 	bl	800a510 <vPortExitCritical>

    return xReturn;
 8009724:	69fb      	ldr	r3, [r7, #28]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3720      	adds	r7, #32
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	200001f4 	.word	0x200001f4
 8009734:	20000208 	.word	0x20000208

08009738 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800973c:	4b03      	ldr	r3, [pc, #12]	; (800974c <vTaskMissedYield+0x14>)
 800973e:	2201      	movs	r2, #1
 8009740:	601a      	str	r2, [r3, #0]
}
 8009742:	bf00      	nop
 8009744:	46bd      	mov	sp, r7
 8009746:	bc80      	pop	{r7}
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	20000204 	.word	0x20000204

08009750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009758:	f000 f8b0 	bl	80098bc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800975c:	4b18      	ldr	r3, [pc, #96]	; (80097c0 <prvIdleTask+0x70>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d907      	bls.n	8009774 <prvIdleTask+0x24>
            {
                taskYIELD();
 8009764:	4b17      	ldr	r3, [pc, #92]	; (80097c4 <prvIdleTask+0x74>)
 8009766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8009774:	f7ff fb0a 	bl	8008d8c <prvGetExpectedIdleTime>
 8009778:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d9eb      	bls.n	8009758 <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 8009780:	f7ff faf6 	bl	8008d70 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009784:	4b10      	ldr	r3, [pc, #64]	; (80097c8 <prvIdleTask+0x78>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	4b10      	ldr	r3, [pc, #64]	; (80097cc <prvIdleTask+0x7c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d20a      	bcs.n	80097a6 <prvIdleTask+0x56>
        __asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	60bb      	str	r3, [r7, #8]
    }
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 80097a6:	f7ff faf1 	bl	8008d8c <prvGetExpectedIdleTime>
 80097aa:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d902      	bls.n	80097b8 <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 ff1a 	bl	800a5ec <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 80097b8:	f7ff fb1e 	bl	8008df8 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 80097bc:	e7cc      	b.n	8009758 <prvIdleTask+0x8>
 80097be:	bf00      	nop
 80097c0:	2000011c 	.word	0x2000011c
 80097c4:	e000ed04 	.word	0xe000ed04
 80097c8:	20000210 	.word	0x20000210
 80097cc:	200001f4 	.word	0x200001f4

080097d0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 80097d6:	2301      	movs	r3, #1
 80097d8:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 80097da:	2301      	movs	r3, #1
 80097dc:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80097de:	4b12      	ldr	r3, [pc, #72]	; (8009828 <eTaskConfirmSleepModeStatus+0x58>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80097e6:	2300      	movs	r3, #0
 80097e8:	71fb      	strb	r3, [r7, #7]
 80097ea:	e017      	b.n	800981c <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 80097ec:	4b0f      	ldr	r3, [pc, #60]	; (800982c <eTaskConfirmSleepModeStatus+0x5c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80097f4:	2300      	movs	r3, #0
 80097f6:	71fb      	strb	r3, [r7, #7]
 80097f8:	e010      	b.n	800981c <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 80097fa:	4b0d      	ldr	r3, [pc, #52]	; (8009830 <eTaskConfirmSleepModeStatus+0x60>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 8009802:	2300      	movs	r3, #0
 8009804:	71fb      	strb	r3, [r7, #7]
 8009806:	e009      	b.n	800981c <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <eTaskConfirmSleepModeStatus+0x64>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <eTaskConfirmSleepModeStatus+0x68>)
 800980e:	6819      	ldr	r1, [r3, #0]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	1acb      	subs	r3, r1, r3
 8009814:	429a      	cmp	r2, r3
 8009816:	d101      	bne.n	800981c <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 8009818:	2302      	movs	r3, #2
 800981a:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 800981c:	79fb      	ldrb	r3, [r7, #7]
    }
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr
 8009828:	200001b0 	.word	0x200001b0
 800982c:	20000204 	.word	0x20000204
 8009830:	20000200 	.word	0x20000200
 8009834:	200001dc 	.word	0x200001dc
 8009838:	200001f0 	.word	0x200001f0

0800983c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009842:	2300      	movs	r3, #0
 8009844:	607b      	str	r3, [r7, #4]
 8009846:	e00c      	b.n	8009862 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4a12      	ldr	r2, [pc, #72]	; (800989c <prvInitialiseTaskLists+0x60>)
 8009854:	4413      	add	r3, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fc84 	bl	800a164 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3301      	adds	r3, #1
 8009860:	607b      	str	r3, [r7, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b04      	cmp	r3, #4
 8009866:	d9ef      	bls.n	8009848 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009868:	480d      	ldr	r0, [pc, #52]	; (80098a0 <prvInitialiseTaskLists+0x64>)
 800986a:	f000 fc7b 	bl	800a164 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800986e:	480d      	ldr	r0, [pc, #52]	; (80098a4 <prvInitialiseTaskLists+0x68>)
 8009870:	f000 fc78 	bl	800a164 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009874:	480c      	ldr	r0, [pc, #48]	; (80098a8 <prvInitialiseTaskLists+0x6c>)
 8009876:	f000 fc75 	bl	800a164 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800987a:	480c      	ldr	r0, [pc, #48]	; (80098ac <prvInitialiseTaskLists+0x70>)
 800987c:	f000 fc72 	bl	800a164 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8009880:	480b      	ldr	r0, [pc, #44]	; (80098b0 <prvInitialiseTaskLists+0x74>)
 8009882:	f000 fc6f 	bl	800a164 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009886:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <prvInitialiseTaskLists+0x78>)
 8009888:	4a05      	ldr	r2, [pc, #20]	; (80098a0 <prvInitialiseTaskLists+0x64>)
 800988a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800988c:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <prvInitialiseTaskLists+0x7c>)
 800988e:	4a05      	ldr	r2, [pc, #20]	; (80098a4 <prvInitialiseTaskLists+0x68>)
 8009890:	601a      	str	r2, [r3, #0]
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	2000011c 	.word	0x2000011c
 80098a0:	20000180 	.word	0x20000180
 80098a4:	20000194 	.word	0x20000194
 80098a8:	200001b0 	.word	0x200001b0
 80098ac:	200001c4 	.word	0x200001c4
 80098b0:	200001dc 	.word	0x200001dc
 80098b4:	200001a8 	.word	0x200001a8
 80098b8:	200001ac 	.word	0x200001ac

080098bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098c2:	e019      	b.n	80098f8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80098c4:	f000 fdf4 	bl	800a4b0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c8:	4b10      	ldr	r3, [pc, #64]	; (800990c <prvCheckTasksWaitingTermination+0x50>)
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fccb 	bl	800a270 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80098da:	4b0d      	ldr	r3, [pc, #52]	; (8009910 <prvCheckTasksWaitingTermination+0x54>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3b01      	subs	r3, #1
 80098e0:	4a0b      	ldr	r2, [pc, #44]	; (8009910 <prvCheckTasksWaitingTermination+0x54>)
 80098e2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80098e4:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <prvCheckTasksWaitingTermination+0x58>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	4a0a      	ldr	r2, [pc, #40]	; (8009914 <prvCheckTasksWaitingTermination+0x58>)
 80098ec:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80098ee:	f000 fe0f 	bl	800a510 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f844 	bl	8009980 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098f8:	4b06      	ldr	r3, [pc, #24]	; (8009914 <prvCheckTasksWaitingTermination+0x58>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e1      	bne.n	80098c4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8009900:	bf00      	nop
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	200001c4 	.word	0x200001c4
 8009910:	200001f0 	.word	0x200001f0
 8009914:	200001d8 	.word	0x200001d8

08009918 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8009920:	2300      	movs	r3, #0
 8009922:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009924:	e005      	b.n	8009932 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3301      	adds	r3, #1
 800992a:	607b      	str	r3, [r7, #4]
            ulCount++;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2ba5      	cmp	r3, #165	; 0xa5
 8009938:	d0f5      	beq.n	8009926 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	089b      	lsrs	r3, r3, #2
 800993e:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009940:	68fb      	ldr	r3, [r7, #12]
    }
 8009942:	4618      	mov	r0, r3
 8009944:	3714      	adds	r7, #20
 8009946:	46bd      	mov	sp, r7
 8009948:	bc80      	pop	{r7}
 800994a:	4770      	bx	lr

0800994c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d102      	bne.n	8009960 <uxTaskGetStackHighWaterMark+0x14>
 800995a:	4b08      	ldr	r3, [pc, #32]	; (800997c <uxTaskGetStackHighWaterMark+0x30>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	e000      	b.n	8009962 <uxTaskGetStackHighWaterMark+0x16>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009968:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800996a:	6938      	ldr	r0, [r7, #16]
 800996c:	f7ff ffd4 	bl	8009918 <prvTaskCheckFreeStackSpace>
 8009970:	60f8      	str	r0, [r7, #12]

        return uxReturn;
 8009972:	68fb      	ldr	r3, [r7, #12]
    }
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000118 	.word	0x20000118

08009980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998c:	4618      	mov	r0, r3
 800998e:	f000 fbd7 	bl	800a140 <vPortFree>
            vPortFree( pxTCB );
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fbd4 	bl	800a140 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099a0:	b480      	push	{r7}
 80099a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099a4:	4b09      	ldr	r3, [pc, #36]	; (80099cc <prvResetNextTaskUnblockTime+0x2c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d104      	bne.n	80099b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80099ae:	4b08      	ldr	r3, [pc, #32]	; (80099d0 <prvResetNextTaskUnblockTime+0x30>)
 80099b0:	f04f 32ff 	mov.w	r2, #4294967295
 80099b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80099b6:	e005      	b.n	80099c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80099b8:	4b04      	ldr	r3, [pc, #16]	; (80099cc <prvResetNextTaskUnblockTime+0x2c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a03      	ldr	r2, [pc, #12]	; (80099d0 <prvResetNextTaskUnblockTime+0x30>)
 80099c2:	6013      	str	r3, [r2, #0]
}
 80099c4:	bf00      	nop
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bc80      	pop	{r7}
 80099ca:	4770      	bx	lr
 80099cc:	200001a8 	.word	0x200001a8
 80099d0:	20000210 	.word	0x20000210

080099d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <xTaskGetSchedulerState+0x34>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d102      	bne.n	80099e8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80099e2:	2301      	movs	r3, #1
 80099e4:	607b      	str	r3, [r7, #4]
 80099e6:	e008      	b.n	80099fa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099e8:	4b08      	ldr	r3, [pc, #32]	; (8009a0c <xTaskGetSchedulerState+0x38>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d102      	bne.n	80099f6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80099f0:	2302      	movs	r3, #2
 80099f2:	607b      	str	r3, [r7, #4]
 80099f4:	e001      	b.n	80099fa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80099f6:	2300      	movs	r3, #0
 80099f8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80099fa:	687b      	ldr	r3, [r7, #4]
    }
 80099fc:	4618      	mov	r0, r3
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bc80      	pop	{r7}
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	200001fc 	.word	0x200001fc
 8009a0c:	20000218 	.word	0x20000218

08009a10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d07e      	beq.n	8009b24 <xTaskPriorityDisinherit+0x114>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009a26:	4b42      	ldr	r3, [pc, #264]	; (8009b30 <xTaskPriorityDisinherit+0x120>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d00a      	beq.n	8009a46 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	613b      	str	r3, [r7, #16]
    }
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	60fb      	str	r3, [r7, #12]
    }
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a68:	1e5a      	subs	r2, r3, #1
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d054      	beq.n	8009b24 <xTaskPriorityDisinherit+0x114>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d150      	bne.n	8009b24 <xTaskPriorityDisinherit+0x114>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	3304      	adds	r3, #4
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fbf2 	bl	800a270 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	f1c3 0205 	rsb	r2, r3, #5
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa4:	4b23      	ldr	r3, [pc, #140]	; (8009b34 <xTaskPriorityDisinherit+0x124>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d903      	bls.n	8009ab4 <xTaskPriorityDisinherit+0xa4>
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab0:	4a20      	ldr	r2, [pc, #128]	; (8009b34 <xTaskPriorityDisinherit+0x124>)
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab8:	491f      	ldr	r1, [pc, #124]	; (8009b38 <xTaskPriorityDisinherit+0x128>)
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	617b      	str	r3, [r7, #20]
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	609a      	str	r2, [r3, #8]
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	60da      	str	r2, [r3, #12]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	3204      	adds	r2, #4
 8009ae0:	605a      	str	r2, [r3, #4]
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	1d1a      	adds	r2, r3, #4
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	609a      	str	r2, [r3, #8]
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4a10      	ldr	r2, [pc, #64]	; (8009b38 <xTaskPriorityDisinherit+0x128>)
 8009af8:	441a      	add	r2, r3
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	615a      	str	r2, [r3, #20]
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b02:	490d      	ldr	r1, [pc, #52]	; (8009b38 <xTaskPriorityDisinherit+0x128>)
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	440b      	add	r3, r1
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	1c59      	adds	r1, r3, #1
 8009b12:	4809      	ldr	r0, [pc, #36]	; (8009b38 <xTaskPriorityDisinherit+0x128>)
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4403      	add	r3, r0
 8009b1e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009b20:	2301      	movs	r3, #1
 8009b22:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009b24:	69fb      	ldr	r3, [r7, #28]
    }
 8009b26:	4618      	mov	r0, r3
 8009b28:	3720      	adds	r7, #32
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000118 	.word	0x20000118
 8009b34:	200001f8 	.word	0x200001f8
 8009b38:	2000011c 	.word	0x2000011c

08009b3c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009b46:	4b2e      	ldr	r3, [pc, #184]	; (8009c00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b4c:	4b2d      	ldr	r3, [pc, #180]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	3304      	adds	r3, #4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fb8c 	bl	800a270 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5e:	d124      	bne.n	8009baa <prvAddCurrentTaskToDelayedList+0x6e>
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d021      	beq.n	8009baa <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b66:	4b28      	ldr	r3, [pc, #160]	; (8009c08 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	4b25      	ldr	r3, [pc, #148]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	609a      	str	r2, [r3, #8]
 8009b74:	4b23      	ldr	r3, [pc, #140]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	6892      	ldr	r2, [r2, #8]
 8009b7c:	60da      	str	r2, [r3, #12]
 8009b7e:	4b21      	ldr	r3, [pc, #132]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	3204      	adds	r2, #4
 8009b88:	605a      	str	r2, [r3, #4]
 8009b8a:	4b1e      	ldr	r3, [pc, #120]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	1d1a      	adds	r2, r3, #4
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	609a      	str	r2, [r3, #8]
 8009b94:	4b1b      	ldr	r3, [pc, #108]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1b      	ldr	r2, [pc, #108]	; (8009c08 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009b9a:	615a      	str	r2, [r3, #20]
 8009b9c:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	4a19      	ldr	r2, [pc, #100]	; (8009c08 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009ba8:	e026      	b.n	8009bf8 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4413      	add	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bb2:	4b14      	ldr	r3, [pc, #80]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d209      	bcs.n	8009bd6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc2:	4b12      	ldr	r3, [pc, #72]	; (8009c0c <prvAddCurrentTaskToDelayedList+0xd0>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f000 fb16 	bl	800a200 <vListInsert>
}
 8009bd4:	e010      	b.n	8009bf8 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bd6:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <prvAddCurrentTaskToDelayedList+0xd4>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f000 fb0c 	bl	800a200 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8009be8:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d202      	bcs.n	8009bf8 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8009bf2:	4a08      	ldr	r2, [pc, #32]	; (8009c14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6013      	str	r3, [r2, #0]
}
 8009bf8:	bf00      	nop
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	200001f4 	.word	0x200001f4
 8009c04:	20000118 	.word	0x20000118
 8009c08:	200001dc 	.word	0x200001dc
 8009c0c:	200001ac 	.word	0x200001ac
 8009c10:	200001a8 	.word	0x200001a8
 8009c14:	20000210 	.word	0x20000210

08009c18 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009c22:	f000 fa45 	bl	800a0b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <xTimerCreateTimerTask+0x54>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8009c2e:	4b10      	ldr	r3, [pc, #64]	; (8009c70 <xTimerCreateTimerTask+0x58>)
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	2303      	movs	r3, #3
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	2300      	movs	r3, #0
 8009c38:	2280      	movs	r2, #128	; 0x80
 8009c3a:	490e      	ldr	r1, [pc, #56]	; (8009c74 <xTimerCreateTimerTask+0x5c>)
 8009c3c:	480e      	ldr	r0, [pc, #56]	; (8009c78 <xTimerCreateTimerTask+0x60>)
 8009c3e:	f7fe fd6d 	bl	800871c <xTaskCreate>
 8009c42:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	603b      	str	r3, [r7, #0]
    }
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8009c60:	687b      	ldr	r3, [r7, #4]
    }
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	2000024c 	.word	0x2000024c
 8009c70:	20000250 	.word	0x20000250
 8009c74:	0800d010 	.word	0x0800d010
 8009c78:	08009d21 	.word	0x08009d21

08009c7c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009c88:	e008      	b.n	8009c9c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4413      	add	r3, r2
 8009c92:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	699a      	ldr	r2, [r3, #24]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	18d1      	adds	r1, r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f8db 	bl	8009e64 <prvInsertTimerInActiveList>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1ea      	bne.n	8009c8a <prvReloadTimer+0xe>
        }
    }
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cca:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <prvProcessExpiredTimer+0x5c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 fac9 	bl	800a270 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff ffc3 	bl	8009c7c <prvReloadTimer>
 8009cf6:	e008      	b.n	8009d0a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cfe:	f023 0301 	bic.w	r3, r3, #1
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	4798      	blx	r3
    }
 8009d12:	bf00      	nop
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20000244 	.word	0x20000244

08009d20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d28:	f107 0308 	add.w	r3, r7, #8
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 f857 	bl	8009de0 <prvGetNextExpireTime>
 8009d32:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4619      	mov	r1, r3
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f803 	bl	8009d44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8009d3e:	f000 f8d3 	bl	8009ee8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d42:	e7f1      	b.n	8009d28 <prvTimerTask+0x8>

08009d44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8009d4e:	f7ff f80f 	bl	8008d70 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d52:	f107 0308 	add.w	r3, r7, #8
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f864 	bl	8009e24 <prvSampleTimeNow>
 8009d5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d130      	bne.n	8009dc6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <prvProcessTimerOrBlockTask+0x3c>
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d806      	bhi.n	8009d80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009d72:	f7ff f841 	bl	8008df8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d76:	68f9      	ldr	r1, [r7, #12]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff ffa1 	bl	8009cc0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8009d7e:	e024      	b.n	8009dca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d86:	4b13      	ldr	r3, [pc, #76]	; (8009dd4 <prvProcessTimerOrBlockTask+0x90>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <prvProcessTimerOrBlockTask+0x50>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e000      	b.n	8009d96 <prvProcessTimerOrBlockTask+0x52>
 8009d94:	2300      	movs	r3, #0
 8009d96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d98:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <prvProcessTimerOrBlockTask+0x94>)
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	f7fe fc85 	bl	80086b4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8009daa:	f7ff f825 	bl	8008df8 <xTaskResumeAll>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8009db4:	4b09      	ldr	r3, [pc, #36]	; (8009ddc <prvProcessTimerOrBlockTask+0x98>)
 8009db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	f3bf 8f6f 	isb	sy
    }
 8009dc4:	e001      	b.n	8009dca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8009dc6:	f7ff f817 	bl	8008df8 <xTaskResumeAll>
    }
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20000248 	.word	0x20000248
 8009dd8:	2000024c 	.word	0x2000024c
 8009ddc:	e000ed04 	.word	0xe000ed04

08009de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009de8:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <prvGetNextExpireTime+0x40>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <prvGetNextExpireTime+0x16>
 8009df2:	2201      	movs	r2, #1
 8009df4:	e000      	b.n	8009df8 <prvGetNextExpireTime+0x18>
 8009df6:	2200      	movs	r2, #0
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d105      	bne.n	8009e10 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e04:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <prvGetNextExpireTime+0x40>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]
 8009e0e:	e001      	b.n	8009e14 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009e14:	68fb      	ldr	r3, [r7, #12]
    }
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bc80      	pop	{r7}
 8009e1e:	4770      	bx	lr
 8009e20:	20000244 	.word	0x20000244

08009e24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009e2c:	f7ff f8e0 	bl	8008ff0 <xTaskGetTickCount>
 8009e30:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009e32:	4b0b      	ldr	r3, [pc, #44]	; (8009e60 <prvSampleTimeNow+0x3c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d205      	bcs.n	8009e48 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009e3c:	f000 f912 	bl	800a064 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	e002      	b.n	8009e4e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8009e4e:	4a04      	ldr	r2, [pc, #16]	; (8009e60 <prvSampleTimeNow+0x3c>)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009e54:	68fb      	ldr	r3, [r7, #12]
    }
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000254 	.word	0x20000254

08009e64 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d812      	bhi.n	8009eb0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	1ad2      	subs	r2, r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d302      	bcc.n	8009e9e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	e01b      	b.n	8009ed6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e9e:	4b10      	ldr	r3, [pc, #64]	; (8009ee0 <prvInsertTimerInActiveList+0x7c>)
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f000 f9a9 	bl	800a200 <vListInsert>
 8009eae:	e012      	b.n	8009ed6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d206      	bcs.n	8009ec6 <prvInsertTimerInActiveList+0x62>
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d302      	bcc.n	8009ec6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	e007      	b.n	8009ed6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ec6:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <prvInsertTimerInActiveList+0x80>)
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	f000 f995 	bl	800a200 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8009ed6:	697b      	ldr	r3, [r7, #20]
    }
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20000248 	.word	0x20000248
 8009ee4:	20000244 	.word	0x20000244

08009ee8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eee:	e0a6      	b.n	800a03e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f2c0 80a2 	blt.w	800a03c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 f9b1 	bl	800a270 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f0e:	1d3b      	adds	r3, r7, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff ff87 	bl	8009e24 <prvSampleTimeNow>
 8009f16:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	2b08      	cmp	r3, #8
 8009f1e:	f200 808e 	bhi.w	800a03e <prvProcessReceivedCommands+0x156>
 8009f22:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <prvProcessReceivedCommands+0x40>)
 8009f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f28:	08009f4d 	.word	0x08009f4d
 8009f2c:	08009f4d 	.word	0x08009f4d
 8009f30:	08009fb5 	.word	0x08009fb5
 8009f34:	08009fc9 	.word	0x08009fc9
 8009f38:	0800a013 	.word	0x0800a013
 8009f3c:	08009f4d 	.word	0x08009f4d
 8009f40:	08009f4d 	.word	0x08009f4d
 8009f44:	08009fb5 	.word	0x08009fb5
 8009f48:	08009fc9 	.word	0x08009fc9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f52:	f043 0301 	orr.w	r3, r3, #1
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	18d1      	adds	r1, r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	69f8      	ldr	r0, [r7, #28]
 8009f6c:	f7ff ff7a 	bl	8009e64 <prvInsertTimerInActiveList>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d063      	beq.n	800a03e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d009      	beq.n	8009f98 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	69f8      	ldr	r0, [r7, #28]
 8009f92:	f7ff fe73 	bl	8009c7c <prvReloadTimer>
 8009f96:	e008      	b.n	8009faa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9e:	f023 0301 	bic.w	r3, r3, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	69f8      	ldr	r0, [r7, #28]
 8009fb0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8009fb2:	e044      	b.n	800a03e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fba:	f023 0301 	bic.w	r3, r3, #1
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8009fc6:	e03a      	b.n	800a03e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10a      	bne.n	8009ffe <prvProcessReceivedCommands+0x116>
        __asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	617b      	str	r3, [r7, #20]
    }
 8009ffa:	bf00      	nop
 8009ffc:	e7fe      	b.n	8009ffc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	18d1      	adds	r1, r2, r3
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	69ba      	ldr	r2, [r7, #24]
 800a00a:	69f8      	ldr	r0, [r7, #28]
 800a00c:	f7ff ff2a 	bl	8009e64 <prvInsertTimerInActiveList>
                        break;
 800a010:	e015      	b.n	800a03e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a018:	f003 0302 	and.w	r3, r3, #2
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d103      	bne.n	800a028 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800a020:	69f8      	ldr	r0, [r7, #28]
 800a022:	f000 f88d 	bl	800a140 <vPortFree>
 800a026:	e00a      	b.n	800a03e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a02e:	f023 0301 	bic.w	r3, r3, #1
 800a032:	b2da      	uxtb	r2, r3
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a03a:	e000      	b.n	800a03e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800a03c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a03e:	4b08      	ldr	r3, [pc, #32]	; (800a060 <prvProcessReceivedCommands+0x178>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f107 0108 	add.w	r1, r7, #8
 800a046:	2200      	movs	r2, #0
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fe f8d7 	bl	80081fc <xQueueReceive>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	f47f af4d 	bne.w	8009ef0 <prvProcessReceivedCommands+0x8>
        }
    }
 800a056:	bf00      	nop
 800a058:	bf00      	nop
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	2000024c 	.word	0x2000024c

0800a064 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a06a:	e009      	b.n	800a080 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a06c:	4b0e      	ldr	r3, [pc, #56]	; (800a0a8 <prvSwitchTimerLists+0x44>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a076:	f04f 31ff 	mov.w	r1, #4294967295
 800a07a:	6838      	ldr	r0, [r7, #0]
 800a07c:	f7ff fe20 	bl	8009cc0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a080:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <prvSwitchTimerLists+0x44>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1f0      	bne.n	800a06c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a08a:	4b07      	ldr	r3, [pc, #28]	; (800a0a8 <prvSwitchTimerLists+0x44>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a090:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <prvSwitchTimerLists+0x48>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a04      	ldr	r2, [pc, #16]	; (800a0a8 <prvSwitchTimerLists+0x44>)
 800a096:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a098:	4a04      	ldr	r2, [pc, #16]	; (800a0ac <prvSwitchTimerLists+0x48>)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6013      	str	r3, [r2, #0]
    }
 800a09e:	bf00      	nop
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20000244 	.word	0x20000244
 800a0ac:	20000248 	.word	0x20000248

0800a0b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a0b4:	f000 f9fc 	bl	800a4b0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a0b8:	4b12      	ldr	r3, [pc, #72]	; (800a104 <prvCheckForValidListAndQueue+0x54>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d11d      	bne.n	800a0fc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a0c0:	4811      	ldr	r0, [pc, #68]	; (800a108 <prvCheckForValidListAndQueue+0x58>)
 800a0c2:	f000 f84f 	bl	800a164 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a0c6:	4811      	ldr	r0, [pc, #68]	; (800a10c <prvCheckForValidListAndQueue+0x5c>)
 800a0c8:	f000 f84c 	bl	800a164 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a0cc:	4b10      	ldr	r3, [pc, #64]	; (800a110 <prvCheckForValidListAndQueue+0x60>)
 800a0ce:	4a0e      	ldr	r2, [pc, #56]	; (800a108 <prvCheckForValidListAndQueue+0x58>)
 800a0d0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a0d2:	4b10      	ldr	r3, [pc, #64]	; (800a114 <prvCheckForValidListAndQueue+0x64>)
 800a0d4:	4a0d      	ldr	r2, [pc, #52]	; (800a10c <prvCheckForValidListAndQueue+0x5c>)
 800a0d6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a0d8:	2200      	movs	r2, #0
 800a0da:	210c      	movs	r1, #12
 800a0dc:	200a      	movs	r0, #10
 800a0de:	f7fd fe6b 	bl	8007db8 <xQueueGenericCreate>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	4a07      	ldr	r2, [pc, #28]	; (800a104 <prvCheckForValidListAndQueue+0x54>)
 800a0e6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800a0e8:	4b06      	ldr	r3, [pc, #24]	; (800a104 <prvCheckForValidListAndQueue+0x54>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d005      	beq.n	800a0fc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0f0:	4b04      	ldr	r3, [pc, #16]	; (800a104 <prvCheckForValidListAndQueue+0x54>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4908      	ldr	r1, [pc, #32]	; (800a118 <prvCheckForValidListAndQueue+0x68>)
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe fa8e 	bl	8008618 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a0fc:	f000 fa08 	bl	800a510 <vPortExitCritical>
    }
 800a100:	bf00      	nop
 800a102:	bd80      	pop	{r7, pc}
 800a104:	2000024c 	.word	0x2000024c
 800a108:	2000021c 	.word	0x2000021c
 800a10c:	20000230 	.word	0x20000230
 800a110:	20000244 	.word	0x20000244
 800a114:	20000248 	.word	0x20000248
 800a118:	0800d018 	.word	0x0800d018

0800a11c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800a124:	f7fe fe24 	bl	8008d70 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fbd1 	bl	800a8d0 <malloc>
 800a12e:	4603      	mov	r3, r0
 800a130:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800a132:	f7fe fe61 	bl	8008df8 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800a136:	68fb      	ldr	r3, [r7, #12]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d006      	beq.n	800a15c <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800a14e:	f7fe fe0f 	bl	8008d70 <vTaskSuspendAll>
        {
            free( pv );
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fbc4 	bl	800a8e0 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 800a158:	f7fe fe4e 	bl	8008df8 <xTaskResumeAll>
    }
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f103 0208 	add.w	r2, r3, #8
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f04f 32ff 	mov.w	r2, #4294967295
 800a17c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f103 0208 	add.w	r2, r3, #8
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f103 0208 	add.w	r2, r3, #8
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr

0800a1a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b083      	sub	sp, #12
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bc80      	pop	{r7}
 800a1b8:	4770      	bx	lr

0800a1ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
}
 800a1f6:	bf00      	nop
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bc80      	pop	{r7}
 800a1fe:	4770      	bx	lr

0800a200 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a216:	d103      	bne.n	800a220 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	60fb      	str	r3, [r7, #12]
 800a21e:	e00c      	b.n	800a23a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3308      	adds	r3, #8
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	e002      	b.n	800a22e <vListInsert+0x2e>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	429a      	cmp	r2, r3
 800a238:	d2f6      	bcs.n	800a228 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
}
 800a266:	bf00      	nop
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bc80      	pop	{r7}
 800a26e:	4770      	bx	lr

0800a270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6892      	ldr	r2, [r2, #8]
 800a286:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	6852      	ldr	r2, [r2, #4]
 800a290:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d103      	bne.n	800a2a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	1e5a      	subs	r2, r3, #1
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bc80      	pop	{r7}
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3b04      	subs	r3, #4
 800a2d4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3b04      	subs	r3, #4
 800a2e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f023 0201 	bic.w	r2, r3, #1
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3b04      	subs	r3, #4
 800a2f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a2f4:	4a08      	ldr	r2, [pc, #32]	; (800a318 <pxPortInitialiseStack+0x54>)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3b14      	subs	r3, #20
 800a2fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b20      	subs	r3, #32
 800a30a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a30c:	68fb      	ldr	r3, [r7, #12]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	bc80      	pop	{r7}
 800a316:	4770      	bx	lr
 800a318:	0800a31d 	.word	0x0800a31d

0800a31c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800a322:	2300      	movs	r3, #0
 800a324:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a326:	4b12      	ldr	r3, [pc, #72]	; (800a370 <prvTaskExitError+0x54>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32e:	d00a      	beq.n	800a346 <prvTaskExitError+0x2a>
        __asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	60fb      	str	r3, [r7, #12]
    }
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <prvTaskExitError+0x28>
        __asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	60bb      	str	r3, [r7, #8]
    }
 800a358:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a35a:	bf00      	nop
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0fc      	beq.n	800a35c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	bc80      	pop	{r7}
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	20000020 	.word	0x20000020
	...

0800a380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a380:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <pxCurrentTCBConst2>)
 800a382:	6819      	ldr	r1, [r3, #0]
 800a384:	6808      	ldr	r0, [r1, #0]
 800a386:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a38a:	f380 8809 	msr	PSP, r0
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f380 8811 	msr	BASEPRI, r0
 800a39a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a39e:	4770      	bx	lr

0800a3a0 <pxCurrentTCBConst2>:
 800a3a0:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop

0800a3a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 800a3a8:	4806      	ldr	r0, [pc, #24]	; (800a3c4 <prvPortStartFirstTask+0x1c>)
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	6800      	ldr	r0, [r0, #0]
 800a3ae:	f380 8808 	msr	MSP, r0
 800a3b2:	b662      	cpsie	i
 800a3b4:	b661      	cpsie	f
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	df00      	svc	0
 800a3c0:	bf00      	nop
 800a3c2:	0000      	.short	0x0000
 800a3c4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop

0800a3cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3d2:	4b32      	ldr	r3, [pc, #200]	; (800a49c <xPortStartScheduler+0xd0>)
 800a3d4:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	22ff      	movs	r2, #255	; 0xff
 800a3e2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3ec:	78fb      	ldrb	r3, [r7, #3]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	4b2a      	ldr	r3, [pc, #168]	; (800a4a0 <xPortStartScheduler+0xd4>)
 800a3f8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3fa:	4b2a      	ldr	r3, [pc, #168]	; (800a4a4 <xPortStartScheduler+0xd8>)
 800a3fc:	2207      	movs	r2, #7
 800a3fe:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a400:	e009      	b.n	800a416 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 800a402:	4b28      	ldr	r3, [pc, #160]	; (800a4a4 <xPortStartScheduler+0xd8>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3b01      	subs	r3, #1
 800a408:	4a26      	ldr	r2, [pc, #152]	; (800a4a4 <xPortStartScheduler+0xd8>)
 800a40a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	b2db      	uxtb	r3, r3
 800a414:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a416:	78fb      	ldrb	r3, [r7, #3]
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41e:	2b80      	cmp	r3, #128	; 0x80
 800a420:	d0ef      	beq.n	800a402 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a422:	4b20      	ldr	r3, [pc, #128]	; (800a4a4 <xPortStartScheduler+0xd8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f1c3 0307 	rsb	r3, r3, #7
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	d00a      	beq.n	800a444 <xPortStartScheduler+0x78>
        __asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	60bb      	str	r3, [r7, #8]
    }
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a444:	4b17      	ldr	r3, [pc, #92]	; (800a4a4 <xPortStartScheduler+0xd8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	021b      	lsls	r3, r3, #8
 800a44a:	4a16      	ldr	r2, [pc, #88]	; (800a4a4 <xPortStartScheduler+0xd8>)
 800a44c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a44e:	4b15      	ldr	r3, [pc, #84]	; (800a4a4 <xPortStartScheduler+0xd8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a456:	4a13      	ldr	r2, [pc, #76]	; (800a4a4 <xPortStartScheduler+0xd8>)
 800a458:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a462:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <xPortStartScheduler+0xdc>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a10      	ldr	r2, [pc, #64]	; (800a4a8 <xPortStartScheduler+0xdc>)
 800a468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a46c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a46e:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <xPortStartScheduler+0xdc>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a0d      	ldr	r2, [pc, #52]	; (800a4a8 <xPortStartScheduler+0xdc>)
 800a474:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a478:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a47a:	f000 f981 	bl	800a780 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800a47e:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <xPortStartScheduler+0xe0>)
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800a484:	f7ff ff90 	bl	800a3a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a488:	f7fe ff3c 	bl	8009304 <vTaskSwitchContext>
    prvTaskExitError();
 800a48c:	f7ff ff46 	bl	800a31c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	e000e400 	.word	0xe000e400
 800a4a0:	20000264 	.word	0x20000264
 800a4a4:	20000268 	.word	0x20000268
 800a4a8:	e000ed20 	.word	0xe000ed20
 800a4ac:	20000020 	.word	0x20000020

0800a4b0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
        __asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	607b      	str	r3, [r7, #4]
    }
 800a4c8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <vPortEnterCritical+0x58>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	4a0d      	ldr	r2, [pc, #52]	; (800a508 <vPortEnterCritical+0x58>)
 800a4d2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800a4d4:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <vPortEnterCritical+0x58>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d10f      	bne.n	800a4fc <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4dc:	4b0b      	ldr	r3, [pc, #44]	; (800a50c <vPortEnterCritical+0x5c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <vPortEnterCritical+0x4c>
        __asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	603b      	str	r3, [r7, #0]
    }
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <vPortEnterCritical+0x4a>
    }
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	bc80      	pop	{r7}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	20000020 	.word	0x20000020
 800a50c:	e000ed04 	.word	0xe000ed04

0800a510 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800a516:	4b11      	ldr	r3, [pc, #68]	; (800a55c <vPortExitCritical+0x4c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <vPortExitCritical+0x24>
        __asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	607b      	str	r3, [r7, #4]
    }
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800a534:	4b09      	ldr	r3, [pc, #36]	; (800a55c <vPortExitCritical+0x4c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3b01      	subs	r3, #1
 800a53a:	4a08      	ldr	r2, [pc, #32]	; (800a55c <vPortExitCritical+0x4c>)
 800a53c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800a53e:	4b07      	ldr	r3, [pc, #28]	; (800a55c <vPortExitCritical+0x4c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d105      	bne.n	800a552 <vPortExitCritical+0x42>
 800a546:	2300      	movs	r3, #0
 800a548:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	f383 8811 	msr	BASEPRI, r3
    }
 800a550:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	bc80      	pop	{r7}
 800a55a:	4770      	bx	lr
 800a55c:	20000020 	.word	0x20000020

0800a560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800a560:	f3ef 8009 	mrs	r0, PSP
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	4b0d      	ldr	r3, [pc, #52]	; (800a5a0 <pxCurrentTCBConst>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a570:	6010      	str	r0, [r2, #0]
 800a572:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a576:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a57a:	f380 8811 	msr	BASEPRI, r0
 800a57e:	f7fe fec1 	bl	8009304 <vTaskSwitchContext>
 800a582:	f04f 0000 	mov.w	r0, #0
 800a586:	f380 8811 	msr	BASEPRI, r0
 800a58a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a58e:	6819      	ldr	r1, [r3, #0]
 800a590:	6808      	ldr	r0, [r1, #0]
 800a592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a596:	f380 8809 	msr	PSP, r0
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	4770      	bx	lr

0800a5a0 <pxCurrentTCBConst>:
 800a5a0:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
        __asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
    }
 800a5c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a5c2:	f7fe fd87 	bl	80090d4 <xTaskIncrementTick>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <SysTick_Handler+0x40>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f383 8811 	msr	BASEPRI, r3
    }
 800a5de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	e000ed04 	.word	0xe000ed04

0800a5ec <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800a5f4:	4b5b      	ldr	r3, [pc, #364]	; (800a764 <vPortSuppressTicksAndSleep+0x178>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d902      	bls.n	800a604 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800a5fe:	4b59      	ldr	r3, [pc, #356]	; (800a764 <vPortSuppressTicksAndSleep+0x178>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 800a604:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 800a606:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 800a60a:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800a60e:	f7ff f8df 	bl	80097d0 <eTaskConfirmSleepModeStatus>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 800a618:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 800a61a:	e09e      	b.n	800a75a <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 800a61c:	4b52      	ldr	r3, [pc, #328]	; (800a768 <vPortSuppressTicksAndSleep+0x17c>)
 800a61e:	2206      	movs	r2, #6
 800a620:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a622:	4b52      	ldr	r3, [pc, #328]	; (800a76c <vPortSuppressTicksAndSleep+0x180>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 800a62e:	4b50      	ldr	r3, [pc, #320]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3b01      	subs	r3, #1
 800a638:	4a4d      	ldr	r2, [pc, #308]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a63a:	6812      	ldr	r2, [r2, #0]
 800a63c:	fb02 f303 	mul.w	r3, r2, r3
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	4413      	add	r3, r2
 800a644:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 800a646:	4b4b      	ldr	r3, [pc, #300]	; (800a774 <vPortSuppressTicksAndSleep+0x188>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 800a652:	4b48      	ldr	r3, [pc, #288]	; (800a774 <vPortSuppressTicksAndSleep+0x188>)
 800a654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a658:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 800a65a:	4b45      	ldr	r3, [pc, #276]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 800a664:	4b44      	ldr	r3, [pc, #272]	; (800a778 <vPortSuppressTicksAndSleep+0x18c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d904      	bls.n	800a678 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 800a66e:	4b42      	ldr	r3, [pc, #264]	; (800a778 <vPortSuppressTicksAndSleep+0x18c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800a678:	4a40      	ldr	r2, [pc, #256]	; (800a77c <vPortSuppressTicksAndSleep+0x190>)
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a67e:	4b3b      	ldr	r3, [pc, #236]	; (800a76c <vPortSuppressTicksAndSleep+0x180>)
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a684:	4b38      	ldr	r3, [pc, #224]	; (800a768 <vPortSuppressTicksAndSleep+0x17c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a37      	ldr	r2, [pc, #220]	; (800a768 <vPortSuppressTicksAndSleep+0x17c>)
 800a68a:	f043 0301 	orr.w	r3, r3, #1
 800a68e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d004      	beq.n	800a6a4 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 800a69a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 800a69e:	bf30      	wfi
                __asm volatile ( "isb" );
 800a6a0:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 800a6a4:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 800a6a6:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800a6aa:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 800a6ae:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 800a6b0:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800a6b4:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 800a6b8:	4b2b      	ldr	r3, [pc, #172]	; (800a768 <vPortSuppressTicksAndSleep+0x17c>)
 800a6ba:	2206      	movs	r2, #6
 800a6bc:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800a6be:	4b2a      	ldr	r3, [pc, #168]	; (800a768 <vPortSuppressTicksAndSleep+0x17c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d01d      	beq.n	800a706 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800a6ca:	4b29      	ldr	r3, [pc, #164]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	4b27      	ldr	r3, [pc, #156]	; (800a76c <vPortSuppressTicksAndSleep+0x180>)
 800a6d0:	6819      	ldr	r1, [r3, #0]
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	1acb      	subs	r3, r1, r3
 800a6d6:	4413      	add	r3, r2
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800a6dc:	4b26      	ldr	r3, [pc, #152]	; (800a778 <vPortSuppressTicksAndSleep+0x18c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d904      	bls.n	800a6f0 <vPortSuppressTicksAndSleep+0x104>
 800a6e6:	4b22      	ldr	r3, [pc, #136]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d903      	bls.n	800a6f8 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800a6f0:	4b1f      	ldr	r3, [pc, #124]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800a6f8:	4a20      	ldr	r2, [pc, #128]	; (800a77c <vPortSuppressTicksAndSleep+0x190>)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3b01      	subs	r3, #1
 800a702:	61bb      	str	r3, [r7, #24]
 800a704:	e01a      	b.n	800a73c <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a706:	4b19      	ldr	r3, [pc, #100]	; (800a76c <vPortSuppressTicksAndSleep+0x180>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 800a70c:	4b18      	ldr	r3, [pc, #96]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	fb02 f203 	mul.w	r2, r2, r3
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800a71c:	4b14      	ldr	r3, [pc, #80]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	fbb2 f3f3 	udiv	r3, r2, r3
 800a726:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	3301      	adds	r3, #1
 800a72c:	4a10      	ldr	r2, [pc, #64]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a72e:	6812      	ldr	r2, [r2, #0]
 800a730:	fb02 f203 	mul.w	r2, r2, r3
 800a734:	4911      	ldr	r1, [pc, #68]	; (800a77c <vPortSuppressTicksAndSleep+0x190>)
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a73c:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <vPortSuppressTicksAndSleep+0x180>)
 800a73e:	2200      	movs	r2, #0
 800a740:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a742:	4b09      	ldr	r3, [pc, #36]	; (800a768 <vPortSuppressTicksAndSleep+0x17c>)
 800a744:	2207      	movs	r2, #7
 800a746:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a748:	4b09      	ldr	r3, [pc, #36]	; (800a770 <vPortSuppressTicksAndSleep+0x184>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a0b      	ldr	r2, [pc, #44]	; (800a77c <vPortSuppressTicksAndSleep+0x190>)
 800a74e:	3b01      	subs	r3, #1
 800a750:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 800a752:	69b8      	ldr	r0, [r7, #24]
 800a754:	f7fe fc64 	bl	8009020 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 800a758:	b662      	cpsie	i
    }
 800a75a:	bf00      	nop
 800a75c:	3720      	adds	r7, #32
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	2000025c 	.word	0x2000025c
 800a768:	e000e010 	.word	0xe000e010
 800a76c:	e000e018 	.word	0xe000e018
 800a770:	20000258 	.word	0x20000258
 800a774:	e000ed04 	.word	0xe000ed04
 800a778:	20000260 	.word	0x20000260
 800a77c:	e000e014 	.word	0xe000e014

0800a780 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800a784:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <vPortSetupTimerInterrupt+0x58>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a14      	ldr	r2, [pc, #80]	; (800a7dc <vPortSetupTimerInterrupt+0x5c>)
 800a78a:	fba2 2303 	umull	r2, r3, r2, r3
 800a78e:	099b      	lsrs	r3, r3, #6
 800a790:	4a13      	ldr	r2, [pc, #76]	; (800a7e0 <vPortSetupTimerInterrupt+0x60>)
 800a792:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800a794:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <vPortSetupTimerInterrupt+0x60>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800a79c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a0:	4a10      	ldr	r2, [pc, #64]	; (800a7e4 <vPortSetupTimerInterrupt+0x64>)
 800a7a2:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800a7a4:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <vPortSetupTimerInterrupt+0x68>)
 800a7a6:	225e      	movs	r2, #94	; 0x5e
 800a7a8:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7aa:	4b10      	ldr	r3, [pc, #64]	; (800a7ec <vPortSetupTimerInterrupt+0x6c>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7b0:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <vPortSetupTimerInterrupt+0x70>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7b6:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <vPortSetupTimerInterrupt+0x58>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <vPortSetupTimerInterrupt+0x5c>)
 800a7bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c0:	099b      	lsrs	r3, r3, #6
 800a7c2:	4a0c      	ldr	r2, [pc, #48]	; (800a7f4 <vPortSetupTimerInterrupt+0x74>)
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7c8:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <vPortSetupTimerInterrupt+0x6c>)
 800a7ca:	2207      	movs	r2, #7
 800a7cc:	601a      	str	r2, [r3, #0]
}
 800a7ce:	bf00      	nop
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bc80      	pop	{r7}
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	20000010 	.word	0x20000010
 800a7dc:	10624dd3 	.word	0x10624dd3
 800a7e0:	20000258 	.word	0x20000258
 800a7e4:	2000025c 	.word	0x2000025c
 800a7e8:	20000260 	.word	0x20000260
 800a7ec:	e000e010 	.word	0xe000e010
 800a7f0:	e000e018 	.word	0xe000e018
 800a7f4:	e000e014 	.word	0xe000e014

0800a7f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800a7fe:	f3ef 8305 	mrs	r3, IPSR
 800a802:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b0f      	cmp	r3, #15
 800a808:	d914      	bls.n	800a834 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a80a:	4a16      	ldr	r2, [pc, #88]	; (800a864 <vPortValidateInterruptPriority+0x6c>)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a814:	4b14      	ldr	r3, [pc, #80]	; (800a868 <vPortValidateInterruptPriority+0x70>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	7afa      	ldrb	r2, [r7, #11]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d20a      	bcs.n	800a834 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	607b      	str	r3, [r7, #4]
    }
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a834:	4b0d      	ldr	r3, [pc, #52]	; (800a86c <vPortValidateInterruptPriority+0x74>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a83c:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <vPortValidateInterruptPriority+0x78>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d90a      	bls.n	800a85a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	603b      	str	r3, [r7, #0]
    }
 800a856:	bf00      	nop
 800a858:	e7fe      	b.n	800a858 <vPortValidateInterruptPriority+0x60>
    }
 800a85a:	bf00      	nop
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr
 800a864:	e000e3f0 	.word	0xe000e3f0
 800a868:	20000264 	.word	0x20000264
 800a86c:	e000ed0c 	.word	0xe000ed0c
 800a870:	20000268 	.word	0x20000268

0800a874 <atoi>:
 800a874:	220a      	movs	r2, #10
 800a876:	2100      	movs	r1, #0
 800a878:	f000 ba58 	b.w	800ad2c <strtol>

0800a87c <__errno>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	; (800a884 <__errno+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20000024 	.word	0x20000024

0800a888 <__libc_init_array>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	2600      	movs	r6, #0
 800a88c:	4d0c      	ldr	r5, [pc, #48]	; (800a8c0 <__libc_init_array+0x38>)
 800a88e:	4c0d      	ldr	r4, [pc, #52]	; (800a8c4 <__libc_init_array+0x3c>)
 800a890:	1b64      	subs	r4, r4, r5
 800a892:	10a4      	asrs	r4, r4, #2
 800a894:	42a6      	cmp	r6, r4
 800a896:	d109      	bne.n	800a8ac <__libc_init_array+0x24>
 800a898:	f002 fa94 	bl	800cdc4 <_init>
 800a89c:	2600      	movs	r6, #0
 800a89e:	4d0a      	ldr	r5, [pc, #40]	; (800a8c8 <__libc_init_array+0x40>)
 800a8a0:	4c0a      	ldr	r4, [pc, #40]	; (800a8cc <__libc_init_array+0x44>)
 800a8a2:	1b64      	subs	r4, r4, r5
 800a8a4:	10a4      	asrs	r4, r4, #2
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	d105      	bne.n	800a8b6 <__libc_init_array+0x2e>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b0:	4798      	blx	r3
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7ee      	b.n	800a894 <__libc_init_array+0xc>
 800a8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ba:	4798      	blx	r3
 800a8bc:	3601      	adds	r6, #1
 800a8be:	e7f2      	b.n	800a8a6 <__libc_init_array+0x1e>
 800a8c0:	0800d2d8 	.word	0x0800d2d8
 800a8c4:	0800d2d8 	.word	0x0800d2d8
 800a8c8:	0800d2d8 	.word	0x0800d2d8
 800a8cc:	0800d2dc 	.word	0x0800d2dc

0800a8d0 <malloc>:
 800a8d0:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <malloc+0xc>)
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	f000 b86d 	b.w	800a9b4 <_malloc_r>
 800a8da:	bf00      	nop
 800a8dc:	20000024 	.word	0x20000024

0800a8e0 <free>:
 800a8e0:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <free+0xc>)
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f000 b819 	b.w	800a91c <_free_r>
 800a8ea:	bf00      	nop
 800a8ec:	20000024 	.word	0x20000024

0800a8f0 <memcpy>:
 800a8f0:	440a      	add	r2, r1
 800a8f2:	4291      	cmp	r1, r2
 800a8f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8f8:	d100      	bne.n	800a8fc <memcpy+0xc>
 800a8fa:	4770      	bx	lr
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a902:	4291      	cmp	r1, r2
 800a904:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a908:	d1f9      	bne.n	800a8fe <memcpy+0xe>
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <memset>:
 800a90c:	4603      	mov	r3, r0
 800a90e:	4402      	add	r2, r0
 800a910:	4293      	cmp	r3, r2
 800a912:	d100      	bne.n	800a916 <memset+0xa>
 800a914:	4770      	bx	lr
 800a916:	f803 1b01 	strb.w	r1, [r3], #1
 800a91a:	e7f9      	b.n	800a910 <memset+0x4>

0800a91c <_free_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4605      	mov	r5, r0
 800a920:	2900      	cmp	r1, #0
 800a922:	d043      	beq.n	800a9ac <_free_r+0x90>
 800a924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a928:	1f0c      	subs	r4, r1, #4
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bfb8      	it	lt
 800a92e:	18e4      	addlt	r4, r4, r3
 800a930:	f000 fa36 	bl	800ada0 <__malloc_lock>
 800a934:	4a1e      	ldr	r2, [pc, #120]	; (800a9b0 <_free_r+0x94>)
 800a936:	6813      	ldr	r3, [r2, #0]
 800a938:	4610      	mov	r0, r2
 800a93a:	b933      	cbnz	r3, 800a94a <_free_r+0x2e>
 800a93c:	6063      	str	r3, [r4, #4]
 800a93e:	6014      	str	r4, [r2, #0]
 800a940:	4628      	mov	r0, r5
 800a942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a946:	f000 ba31 	b.w	800adac <__malloc_unlock>
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	d90a      	bls.n	800a964 <_free_r+0x48>
 800a94e:	6821      	ldr	r1, [r4, #0]
 800a950:	1862      	adds	r2, r4, r1
 800a952:	4293      	cmp	r3, r2
 800a954:	bf01      	itttt	eq
 800a956:	681a      	ldreq	r2, [r3, #0]
 800a958:	685b      	ldreq	r3, [r3, #4]
 800a95a:	1852      	addeq	r2, r2, r1
 800a95c:	6022      	streq	r2, [r4, #0]
 800a95e:	6063      	str	r3, [r4, #4]
 800a960:	6004      	str	r4, [r0, #0]
 800a962:	e7ed      	b.n	800a940 <_free_r+0x24>
 800a964:	461a      	mov	r2, r3
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	b10b      	cbz	r3, 800a96e <_free_r+0x52>
 800a96a:	42a3      	cmp	r3, r4
 800a96c:	d9fa      	bls.n	800a964 <_free_r+0x48>
 800a96e:	6811      	ldr	r1, [r2, #0]
 800a970:	1850      	adds	r0, r2, r1
 800a972:	42a0      	cmp	r0, r4
 800a974:	d10b      	bne.n	800a98e <_free_r+0x72>
 800a976:	6820      	ldr	r0, [r4, #0]
 800a978:	4401      	add	r1, r0
 800a97a:	1850      	adds	r0, r2, r1
 800a97c:	4283      	cmp	r3, r0
 800a97e:	6011      	str	r1, [r2, #0]
 800a980:	d1de      	bne.n	800a940 <_free_r+0x24>
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	4401      	add	r1, r0
 800a988:	6011      	str	r1, [r2, #0]
 800a98a:	6053      	str	r3, [r2, #4]
 800a98c:	e7d8      	b.n	800a940 <_free_r+0x24>
 800a98e:	d902      	bls.n	800a996 <_free_r+0x7a>
 800a990:	230c      	movs	r3, #12
 800a992:	602b      	str	r3, [r5, #0]
 800a994:	e7d4      	b.n	800a940 <_free_r+0x24>
 800a996:	6820      	ldr	r0, [r4, #0]
 800a998:	1821      	adds	r1, r4, r0
 800a99a:	428b      	cmp	r3, r1
 800a99c:	bf01      	itttt	eq
 800a99e:	6819      	ldreq	r1, [r3, #0]
 800a9a0:	685b      	ldreq	r3, [r3, #4]
 800a9a2:	1809      	addeq	r1, r1, r0
 800a9a4:	6021      	streq	r1, [r4, #0]
 800a9a6:	6063      	str	r3, [r4, #4]
 800a9a8:	6054      	str	r4, [r2, #4]
 800a9aa:	e7c9      	b.n	800a940 <_free_r+0x24>
 800a9ac:	bd38      	pop	{r3, r4, r5, pc}
 800a9ae:	bf00      	nop
 800a9b0:	2000026c 	.word	0x2000026c

0800a9b4 <_malloc_r>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	1ccd      	adds	r5, r1, #3
 800a9b8:	f025 0503 	bic.w	r5, r5, #3
 800a9bc:	3508      	adds	r5, #8
 800a9be:	2d0c      	cmp	r5, #12
 800a9c0:	bf38      	it	cc
 800a9c2:	250c      	movcc	r5, #12
 800a9c4:	2d00      	cmp	r5, #0
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	db01      	blt.n	800a9ce <_malloc_r+0x1a>
 800a9ca:	42a9      	cmp	r1, r5
 800a9cc:	d903      	bls.n	800a9d6 <_malloc_r+0x22>
 800a9ce:	230c      	movs	r3, #12
 800a9d0:	6033      	str	r3, [r6, #0]
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d6:	f000 f9e3 	bl	800ada0 <__malloc_lock>
 800a9da:	4921      	ldr	r1, [pc, #132]	; (800aa60 <_malloc_r+0xac>)
 800a9dc:	680a      	ldr	r2, [r1, #0]
 800a9de:	4614      	mov	r4, r2
 800a9e0:	b99c      	cbnz	r4, 800aa0a <_malloc_r+0x56>
 800a9e2:	4f20      	ldr	r7, [pc, #128]	; (800aa64 <_malloc_r+0xb0>)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	b923      	cbnz	r3, 800a9f2 <_malloc_r+0x3e>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f000 f83c 	bl	800aa68 <_sbrk_r>
 800a9f0:	6038      	str	r0, [r7, #0]
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f000 f837 	bl	800aa68 <_sbrk_r>
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	d123      	bne.n	800aa46 <_malloc_r+0x92>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	4630      	mov	r0, r6
 800aa02:	6033      	str	r3, [r6, #0]
 800aa04:	f000 f9d2 	bl	800adac <__malloc_unlock>
 800aa08:	e7e3      	b.n	800a9d2 <_malloc_r+0x1e>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	1b5b      	subs	r3, r3, r5
 800aa0e:	d417      	bmi.n	800aa40 <_malloc_r+0x8c>
 800aa10:	2b0b      	cmp	r3, #11
 800aa12:	d903      	bls.n	800aa1c <_malloc_r+0x68>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	441c      	add	r4, r3
 800aa18:	6025      	str	r5, [r4, #0]
 800aa1a:	e004      	b.n	800aa26 <_malloc_r+0x72>
 800aa1c:	6863      	ldr	r3, [r4, #4]
 800aa1e:	42a2      	cmp	r2, r4
 800aa20:	bf0c      	ite	eq
 800aa22:	600b      	streq	r3, [r1, #0]
 800aa24:	6053      	strne	r3, [r2, #4]
 800aa26:	4630      	mov	r0, r6
 800aa28:	f000 f9c0 	bl	800adac <__malloc_unlock>
 800aa2c:	f104 000b 	add.w	r0, r4, #11
 800aa30:	1d23      	adds	r3, r4, #4
 800aa32:	f020 0007 	bic.w	r0, r0, #7
 800aa36:	1ac2      	subs	r2, r0, r3
 800aa38:	d0cc      	beq.n	800a9d4 <_malloc_r+0x20>
 800aa3a:	1a1b      	subs	r3, r3, r0
 800aa3c:	50a3      	str	r3, [r4, r2]
 800aa3e:	e7c9      	b.n	800a9d4 <_malloc_r+0x20>
 800aa40:	4622      	mov	r2, r4
 800aa42:	6864      	ldr	r4, [r4, #4]
 800aa44:	e7cc      	b.n	800a9e0 <_malloc_r+0x2c>
 800aa46:	1cc4      	adds	r4, r0, #3
 800aa48:	f024 0403 	bic.w	r4, r4, #3
 800aa4c:	42a0      	cmp	r0, r4
 800aa4e:	d0e3      	beq.n	800aa18 <_malloc_r+0x64>
 800aa50:	1a21      	subs	r1, r4, r0
 800aa52:	4630      	mov	r0, r6
 800aa54:	f000 f808 	bl	800aa68 <_sbrk_r>
 800aa58:	3001      	adds	r0, #1
 800aa5a:	d1dd      	bne.n	800aa18 <_malloc_r+0x64>
 800aa5c:	e7cf      	b.n	800a9fe <_malloc_r+0x4a>
 800aa5e:	bf00      	nop
 800aa60:	2000026c 	.word	0x2000026c
 800aa64:	20000270 	.word	0x20000270

0800aa68 <_sbrk_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	4d05      	ldr	r5, [pc, #20]	; (800aa84 <_sbrk_r+0x1c>)
 800aa6e:	4604      	mov	r4, r0
 800aa70:	4608      	mov	r0, r1
 800aa72:	602b      	str	r3, [r5, #0]
 800aa74:	f7f9 f84a 	bl	8003b0c <_sbrk>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	d102      	bne.n	800aa82 <_sbrk_r+0x1a>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	b103      	cbz	r3, 800aa82 <_sbrk_r+0x1a>
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	bd38      	pop	{r3, r4, r5, pc}
 800aa84:	20000448 	.word	0x20000448

0800aa88 <sniprintf>:
 800aa88:	b40c      	push	{r2, r3}
 800aa8a:	b530      	push	{r4, r5, lr}
 800aa8c:	4b17      	ldr	r3, [pc, #92]	; (800aaec <sniprintf+0x64>)
 800aa8e:	1e0c      	subs	r4, r1, #0
 800aa90:	681d      	ldr	r5, [r3, #0]
 800aa92:	b09d      	sub	sp, #116	; 0x74
 800aa94:	da08      	bge.n	800aaa8 <sniprintf+0x20>
 800aa96:	238b      	movs	r3, #139	; 0x8b
 800aa98:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9c:	602b      	str	r3, [r5, #0]
 800aa9e:	b01d      	add	sp, #116	; 0x74
 800aaa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaa4:	b002      	add	sp, #8
 800aaa6:	4770      	bx	lr
 800aaa8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aaac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aab0:	bf0c      	ite	eq
 800aab2:	4623      	moveq	r3, r4
 800aab4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aab8:	9304      	str	r3, [sp, #16]
 800aaba:	9307      	str	r3, [sp, #28]
 800aabc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aac0:	9002      	str	r0, [sp, #8]
 800aac2:	9006      	str	r0, [sp, #24]
 800aac4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aac8:	4628      	mov	r0, r5
 800aaca:	ab21      	add	r3, sp, #132	; 0x84
 800aacc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aace:	a902      	add	r1, sp, #8
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	f000 f9cd 	bl	800ae70 <_svfiprintf_r>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	bfbc      	itt	lt
 800aada:	238b      	movlt	r3, #139	; 0x8b
 800aadc:	602b      	strlt	r3, [r5, #0]
 800aade:	2c00      	cmp	r4, #0
 800aae0:	d0dd      	beq.n	800aa9e <sniprintf+0x16>
 800aae2:	2200      	movs	r2, #0
 800aae4:	9b02      	ldr	r3, [sp, #8]
 800aae6:	701a      	strb	r2, [r3, #0]
 800aae8:	e7d9      	b.n	800aa9e <sniprintf+0x16>
 800aaea:	bf00      	nop
 800aaec:	20000024 	.word	0x20000024

0800aaf0 <siprintf>:
 800aaf0:	b40e      	push	{r1, r2, r3}
 800aaf2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aaf6:	b500      	push	{lr}
 800aaf8:	b09c      	sub	sp, #112	; 0x70
 800aafa:	ab1d      	add	r3, sp, #116	; 0x74
 800aafc:	9002      	str	r0, [sp, #8]
 800aafe:	9006      	str	r0, [sp, #24]
 800ab00:	9107      	str	r1, [sp, #28]
 800ab02:	9104      	str	r1, [sp, #16]
 800ab04:	4808      	ldr	r0, [pc, #32]	; (800ab28 <siprintf+0x38>)
 800ab06:	4909      	ldr	r1, [pc, #36]	; (800ab2c <siprintf+0x3c>)
 800ab08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab0c:	9105      	str	r1, [sp, #20]
 800ab0e:	6800      	ldr	r0, [r0, #0]
 800ab10:	a902      	add	r1, sp, #8
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	f000 f9ac 	bl	800ae70 <_svfiprintf_r>
 800ab18:	2200      	movs	r2, #0
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	701a      	strb	r2, [r3, #0]
 800ab1e:	b01c      	add	sp, #112	; 0x70
 800ab20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab24:	b003      	add	sp, #12
 800ab26:	4770      	bx	lr
 800ab28:	20000024 	.word	0x20000024
 800ab2c:	ffff0208 	.word	0xffff0208

0800ab30 <strcpy>:
 800ab30:	4603      	mov	r3, r0
 800ab32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab36:	f803 2b01 	strb.w	r2, [r3], #1
 800ab3a:	2a00      	cmp	r2, #0
 800ab3c:	d1f9      	bne.n	800ab32 <strcpy+0x2>
 800ab3e:	4770      	bx	lr

0800ab40 <strncpy>:
 800ab40:	4603      	mov	r3, r0
 800ab42:	b510      	push	{r4, lr}
 800ab44:	3901      	subs	r1, #1
 800ab46:	b132      	cbz	r2, 800ab56 <strncpy+0x16>
 800ab48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab4c:	3a01      	subs	r2, #1
 800ab4e:	f803 4b01 	strb.w	r4, [r3], #1
 800ab52:	2c00      	cmp	r4, #0
 800ab54:	d1f7      	bne.n	800ab46 <strncpy+0x6>
 800ab56:	2100      	movs	r1, #0
 800ab58:	441a      	add	r2, r3
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d100      	bne.n	800ab60 <strncpy+0x20>
 800ab5e:	bd10      	pop	{r4, pc}
 800ab60:	f803 1b01 	strb.w	r1, [r3], #1
 800ab64:	e7f9      	b.n	800ab5a <strncpy+0x1a>
	...

0800ab68 <strtok>:
 800ab68:	4b16      	ldr	r3, [pc, #88]	; (800abc4 <strtok+0x5c>)
 800ab6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6e:	681f      	ldr	r7, [r3, #0]
 800ab70:	4605      	mov	r5, r0
 800ab72:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ab74:	460e      	mov	r6, r1
 800ab76:	b9ec      	cbnz	r4, 800abb4 <strtok+0x4c>
 800ab78:	2050      	movs	r0, #80	; 0x50
 800ab7a:	f7ff fea9 	bl	800a8d0 <malloc>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	65b8      	str	r0, [r7, #88]	; 0x58
 800ab82:	b920      	cbnz	r0, 800ab8e <strtok+0x26>
 800ab84:	2157      	movs	r1, #87	; 0x57
 800ab86:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <strtok+0x60>)
 800ab88:	4810      	ldr	r0, [pc, #64]	; (800abcc <strtok+0x64>)
 800ab8a:	f000 f8d9 	bl	800ad40 <__assert_func>
 800ab8e:	e9c0 4400 	strd	r4, r4, [r0]
 800ab92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ab96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ab9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ab9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aba2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aba6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800abaa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800abae:	6184      	str	r4, [r0, #24]
 800abb0:	7704      	strb	r4, [r0, #28]
 800abb2:	6244      	str	r4, [r0, #36]	; 0x24
 800abb4:	4631      	mov	r1, r6
 800abb6:	4628      	mov	r0, r5
 800abb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abba:	2301      	movs	r3, #1
 800abbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abc0:	f000 b806 	b.w	800abd0 <__strtok_r>
 800abc4:	20000024 	.word	0x20000024
 800abc8:	0800d050 	.word	0x0800d050
 800abcc:	0800d067 	.word	0x0800d067

0800abd0 <__strtok_r>:
 800abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd2:	b908      	cbnz	r0, 800abd8 <__strtok_r+0x8>
 800abd4:	6810      	ldr	r0, [r2, #0]
 800abd6:	b188      	cbz	r0, 800abfc <__strtok_r+0x2c>
 800abd8:	4604      	mov	r4, r0
 800abda:	460f      	mov	r7, r1
 800abdc:	4620      	mov	r0, r4
 800abde:	f814 5b01 	ldrb.w	r5, [r4], #1
 800abe2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800abe6:	b91e      	cbnz	r6, 800abf0 <__strtok_r+0x20>
 800abe8:	b965      	cbnz	r5, 800ac04 <__strtok_r+0x34>
 800abea:	4628      	mov	r0, r5
 800abec:	6015      	str	r5, [r2, #0]
 800abee:	e005      	b.n	800abfc <__strtok_r+0x2c>
 800abf0:	42b5      	cmp	r5, r6
 800abf2:	d1f6      	bne.n	800abe2 <__strtok_r+0x12>
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1f0      	bne.n	800abda <__strtok_r+0xa>
 800abf8:	6014      	str	r4, [r2, #0]
 800abfa:	7003      	strb	r3, [r0, #0]
 800abfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abfe:	461c      	mov	r4, r3
 800ac00:	e00c      	b.n	800ac1c <__strtok_r+0x4c>
 800ac02:	b915      	cbnz	r5, 800ac0a <__strtok_r+0x3a>
 800ac04:	460e      	mov	r6, r1
 800ac06:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ac0e:	42ab      	cmp	r3, r5
 800ac10:	d1f7      	bne.n	800ac02 <__strtok_r+0x32>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0f3      	beq.n	800abfe <__strtok_r+0x2e>
 800ac16:	2300      	movs	r3, #0
 800ac18:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ac1c:	6014      	str	r4, [r2, #0]
 800ac1e:	e7ed      	b.n	800abfc <__strtok_r+0x2c>

0800ac20 <_strtol_l.isra.0>:
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac26:	4686      	mov	lr, r0
 800ac28:	d001      	beq.n	800ac2e <_strtol_l.isra.0+0xe>
 800ac2a:	2b24      	cmp	r3, #36	; 0x24
 800ac2c:	d906      	bls.n	800ac3c <_strtol_l.isra.0+0x1c>
 800ac2e:	f7ff fe25 	bl	800a87c <__errno>
 800ac32:	2316      	movs	r3, #22
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	2000      	movs	r0, #0
 800ac38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3c:	468c      	mov	ip, r1
 800ac3e:	4e3a      	ldr	r6, [pc, #232]	; (800ad28 <_strtol_l.isra.0+0x108>)
 800ac40:	4660      	mov	r0, ip
 800ac42:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ac46:	5da5      	ldrb	r5, [r4, r6]
 800ac48:	f015 0508 	ands.w	r5, r5, #8
 800ac4c:	d1f8      	bne.n	800ac40 <_strtol_l.isra.0+0x20>
 800ac4e:	2c2d      	cmp	r4, #45	; 0x2d
 800ac50:	d133      	bne.n	800acba <_strtol_l.isra.0+0x9a>
 800ac52:	f04f 0801 	mov.w	r8, #1
 800ac56:	f89c 4000 	ldrb.w	r4, [ip]
 800ac5a:	f100 0c02 	add.w	ip, r0, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d05d      	beq.n	800ad1e <_strtol_l.isra.0+0xfe>
 800ac62:	2b10      	cmp	r3, #16
 800ac64:	d10c      	bne.n	800ac80 <_strtol_l.isra.0+0x60>
 800ac66:	2c30      	cmp	r4, #48	; 0x30
 800ac68:	d10a      	bne.n	800ac80 <_strtol_l.isra.0+0x60>
 800ac6a:	f89c 0000 	ldrb.w	r0, [ip]
 800ac6e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac72:	2858      	cmp	r0, #88	; 0x58
 800ac74:	d14e      	bne.n	800ad14 <_strtol_l.isra.0+0xf4>
 800ac76:	2310      	movs	r3, #16
 800ac78:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ac7c:	f10c 0c02 	add.w	ip, ip, #2
 800ac80:	2500      	movs	r5, #0
 800ac82:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800ac86:	3f01      	subs	r7, #1
 800ac88:	fbb7 f9f3 	udiv	r9, r7, r3
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	fb03 7a19 	mls	sl, r3, r9, r7
 800ac92:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ac96:	2e09      	cmp	r6, #9
 800ac98:	d818      	bhi.n	800accc <_strtol_l.isra.0+0xac>
 800ac9a:	4634      	mov	r4, r6
 800ac9c:	42a3      	cmp	r3, r4
 800ac9e:	dd24      	ble.n	800acea <_strtol_l.isra.0+0xca>
 800aca0:	2d00      	cmp	r5, #0
 800aca2:	db1f      	blt.n	800ace4 <_strtol_l.isra.0+0xc4>
 800aca4:	4581      	cmp	r9, r0
 800aca6:	d31d      	bcc.n	800ace4 <_strtol_l.isra.0+0xc4>
 800aca8:	d101      	bne.n	800acae <_strtol_l.isra.0+0x8e>
 800acaa:	45a2      	cmp	sl, r4
 800acac:	db1a      	blt.n	800ace4 <_strtol_l.isra.0+0xc4>
 800acae:	2501      	movs	r5, #1
 800acb0:	fb00 4003 	mla	r0, r0, r3, r4
 800acb4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800acb8:	e7eb      	b.n	800ac92 <_strtol_l.isra.0+0x72>
 800acba:	2c2b      	cmp	r4, #43	; 0x2b
 800acbc:	bf08      	it	eq
 800acbe:	f89c 4000 	ldrbeq.w	r4, [ip]
 800acc2:	46a8      	mov	r8, r5
 800acc4:	bf08      	it	eq
 800acc6:	f100 0c02 	addeq.w	ip, r0, #2
 800acca:	e7c8      	b.n	800ac5e <_strtol_l.isra.0+0x3e>
 800accc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800acd0:	2e19      	cmp	r6, #25
 800acd2:	d801      	bhi.n	800acd8 <_strtol_l.isra.0+0xb8>
 800acd4:	3c37      	subs	r4, #55	; 0x37
 800acd6:	e7e1      	b.n	800ac9c <_strtol_l.isra.0+0x7c>
 800acd8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800acdc:	2e19      	cmp	r6, #25
 800acde:	d804      	bhi.n	800acea <_strtol_l.isra.0+0xca>
 800ace0:	3c57      	subs	r4, #87	; 0x57
 800ace2:	e7db      	b.n	800ac9c <_strtol_l.isra.0+0x7c>
 800ace4:	f04f 35ff 	mov.w	r5, #4294967295
 800ace8:	e7e4      	b.n	800acb4 <_strtol_l.isra.0+0x94>
 800acea:	2d00      	cmp	r5, #0
 800acec:	da08      	bge.n	800ad00 <_strtol_l.isra.0+0xe0>
 800acee:	2322      	movs	r3, #34	; 0x22
 800acf0:	4638      	mov	r0, r7
 800acf2:	f8ce 3000 	str.w	r3, [lr]
 800acf6:	2a00      	cmp	r2, #0
 800acf8:	d09e      	beq.n	800ac38 <_strtol_l.isra.0+0x18>
 800acfa:	f10c 31ff 	add.w	r1, ip, #4294967295
 800acfe:	e007      	b.n	800ad10 <_strtol_l.isra.0+0xf0>
 800ad00:	f1b8 0f00 	cmp.w	r8, #0
 800ad04:	d000      	beq.n	800ad08 <_strtol_l.isra.0+0xe8>
 800ad06:	4240      	negs	r0, r0
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	d095      	beq.n	800ac38 <_strtol_l.isra.0+0x18>
 800ad0c:	2d00      	cmp	r5, #0
 800ad0e:	d1f4      	bne.n	800acfa <_strtol_l.isra.0+0xda>
 800ad10:	6011      	str	r1, [r2, #0]
 800ad12:	e791      	b.n	800ac38 <_strtol_l.isra.0+0x18>
 800ad14:	2430      	movs	r4, #48	; 0x30
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1b2      	bne.n	800ac80 <_strtol_l.isra.0+0x60>
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	e7b0      	b.n	800ac80 <_strtol_l.isra.0+0x60>
 800ad1e:	2c30      	cmp	r4, #48	; 0x30
 800ad20:	d0a3      	beq.n	800ac6a <_strtol_l.isra.0+0x4a>
 800ad22:	230a      	movs	r3, #10
 800ad24:	e7ac      	b.n	800ac80 <_strtol_l.isra.0+0x60>
 800ad26:	bf00      	nop
 800ad28:	0800d105 	.word	0x0800d105

0800ad2c <strtol>:
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	460a      	mov	r2, r1
 800ad30:	4601      	mov	r1, r0
 800ad32:	4802      	ldr	r0, [pc, #8]	; (800ad3c <strtol+0x10>)
 800ad34:	6800      	ldr	r0, [r0, #0]
 800ad36:	f7ff bf73 	b.w	800ac20 <_strtol_l.isra.0>
 800ad3a:	bf00      	nop
 800ad3c:	20000024 	.word	0x20000024

0800ad40 <__assert_func>:
 800ad40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad42:	4614      	mov	r4, r2
 800ad44:	461a      	mov	r2, r3
 800ad46:	4b09      	ldr	r3, [pc, #36]	; (800ad6c <__assert_func+0x2c>)
 800ad48:	4605      	mov	r5, r0
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68d8      	ldr	r0, [r3, #12]
 800ad4e:	b14c      	cbz	r4, 800ad64 <__assert_func+0x24>
 800ad50:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <__assert_func+0x30>)
 800ad52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad56:	9100      	str	r1, [sp, #0]
 800ad58:	462b      	mov	r3, r5
 800ad5a:	4906      	ldr	r1, [pc, #24]	; (800ad74 <__assert_func+0x34>)
 800ad5c:	f000 f80e 	bl	800ad7c <fiprintf>
 800ad60:	f000 fd34 	bl	800b7cc <abort>
 800ad64:	4b04      	ldr	r3, [pc, #16]	; (800ad78 <__assert_func+0x38>)
 800ad66:	461c      	mov	r4, r3
 800ad68:	e7f3      	b.n	800ad52 <__assert_func+0x12>
 800ad6a:	bf00      	nop
 800ad6c:	20000024 	.word	0x20000024
 800ad70:	0800d0c8 	.word	0x0800d0c8
 800ad74:	0800d0d5 	.word	0x0800d0d5
 800ad78:	0800d103 	.word	0x0800d103

0800ad7c <fiprintf>:
 800ad7c:	b40e      	push	{r1, r2, r3}
 800ad7e:	b503      	push	{r0, r1, lr}
 800ad80:	4601      	mov	r1, r0
 800ad82:	ab03      	add	r3, sp, #12
 800ad84:	4805      	ldr	r0, [pc, #20]	; (800ad9c <fiprintf+0x20>)
 800ad86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad8a:	6800      	ldr	r0, [r0, #0]
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	f000 f997 	bl	800b0c0 <_vfiprintf_r>
 800ad92:	b002      	add	sp, #8
 800ad94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad98:	b003      	add	sp, #12
 800ad9a:	4770      	bx	lr
 800ad9c:	20000024 	.word	0x20000024

0800ada0 <__malloc_lock>:
 800ada0:	4801      	ldr	r0, [pc, #4]	; (800ada8 <__malloc_lock+0x8>)
 800ada2:	f000 bed3 	b.w	800bb4c <__retarget_lock_acquire_recursive>
 800ada6:	bf00      	nop
 800ada8:	20000450 	.word	0x20000450

0800adac <__malloc_unlock>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__malloc_unlock+0x8>)
 800adae:	f000 bece 	b.w	800bb4e <__retarget_lock_release_recursive>
 800adb2:	bf00      	nop
 800adb4:	20000450 	.word	0x20000450

0800adb8 <__ssputs_r>:
 800adb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adbc:	688e      	ldr	r6, [r1, #8]
 800adbe:	4682      	mov	sl, r0
 800adc0:	429e      	cmp	r6, r3
 800adc2:	460c      	mov	r4, r1
 800adc4:	4690      	mov	r8, r2
 800adc6:	461f      	mov	r7, r3
 800adc8:	d838      	bhi.n	800ae3c <__ssputs_r+0x84>
 800adca:	898a      	ldrh	r2, [r1, #12]
 800adcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800add0:	d032      	beq.n	800ae38 <__ssputs_r+0x80>
 800add2:	6825      	ldr	r5, [r4, #0]
 800add4:	6909      	ldr	r1, [r1, #16]
 800add6:	3301      	adds	r3, #1
 800add8:	eba5 0901 	sub.w	r9, r5, r1
 800addc:	6965      	ldr	r5, [r4, #20]
 800adde:	444b      	add	r3, r9
 800ade0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ade4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ade8:	106d      	asrs	r5, r5, #1
 800adea:	429d      	cmp	r5, r3
 800adec:	bf38      	it	cc
 800adee:	461d      	movcc	r5, r3
 800adf0:	0553      	lsls	r3, r2, #21
 800adf2:	d531      	bpl.n	800ae58 <__ssputs_r+0xa0>
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7ff fddd 	bl	800a9b4 <_malloc_r>
 800adfa:	4606      	mov	r6, r0
 800adfc:	b950      	cbnz	r0, 800ae14 <__ssputs_r+0x5c>
 800adfe:	230c      	movs	r3, #12
 800ae00:	f04f 30ff 	mov.w	r0, #4294967295
 800ae04:	f8ca 3000 	str.w	r3, [sl]
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae14:	464a      	mov	r2, r9
 800ae16:	6921      	ldr	r1, [r4, #16]
 800ae18:	f7ff fd6a 	bl	800a8f0 <memcpy>
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae26:	81a3      	strh	r3, [r4, #12]
 800ae28:	6126      	str	r6, [r4, #16]
 800ae2a:	444e      	add	r6, r9
 800ae2c:	6026      	str	r6, [r4, #0]
 800ae2e:	463e      	mov	r6, r7
 800ae30:	6165      	str	r5, [r4, #20]
 800ae32:	eba5 0509 	sub.w	r5, r5, r9
 800ae36:	60a5      	str	r5, [r4, #8]
 800ae38:	42be      	cmp	r6, r7
 800ae3a:	d900      	bls.n	800ae3e <__ssputs_r+0x86>
 800ae3c:	463e      	mov	r6, r7
 800ae3e:	4632      	mov	r2, r6
 800ae40:	4641      	mov	r1, r8
 800ae42:	6820      	ldr	r0, [r4, #0]
 800ae44:	f000 fef6 	bl	800bc34 <memmove>
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	1b9b      	subs	r3, r3, r6
 800ae4e:	4432      	add	r2, r6
 800ae50:	2000      	movs	r0, #0
 800ae52:	60a3      	str	r3, [r4, #8]
 800ae54:	6022      	str	r2, [r4, #0]
 800ae56:	e7db      	b.n	800ae10 <__ssputs_r+0x58>
 800ae58:	462a      	mov	r2, r5
 800ae5a:	f000 ff05 	bl	800bc68 <_realloc_r>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d1e1      	bne.n	800ae28 <__ssputs_r+0x70>
 800ae64:	4650      	mov	r0, sl
 800ae66:	6921      	ldr	r1, [r4, #16]
 800ae68:	f7ff fd58 	bl	800a91c <_free_r>
 800ae6c:	e7c7      	b.n	800adfe <__ssputs_r+0x46>
	...

0800ae70 <_svfiprintf_r>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	4698      	mov	r8, r3
 800ae76:	898b      	ldrh	r3, [r1, #12]
 800ae78:	4607      	mov	r7, r0
 800ae7a:	061b      	lsls	r3, r3, #24
 800ae7c:	460d      	mov	r5, r1
 800ae7e:	4614      	mov	r4, r2
 800ae80:	b09d      	sub	sp, #116	; 0x74
 800ae82:	d50e      	bpl.n	800aea2 <_svfiprintf_r+0x32>
 800ae84:	690b      	ldr	r3, [r1, #16]
 800ae86:	b963      	cbnz	r3, 800aea2 <_svfiprintf_r+0x32>
 800ae88:	2140      	movs	r1, #64	; 0x40
 800ae8a:	f7ff fd93 	bl	800a9b4 <_malloc_r>
 800ae8e:	6028      	str	r0, [r5, #0]
 800ae90:	6128      	str	r0, [r5, #16]
 800ae92:	b920      	cbnz	r0, 800ae9e <_svfiprintf_r+0x2e>
 800ae94:	230c      	movs	r3, #12
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9c:	e0d1      	b.n	800b042 <_svfiprintf_r+0x1d2>
 800ae9e:	2340      	movs	r3, #64	; 0x40
 800aea0:	616b      	str	r3, [r5, #20]
 800aea2:	2300      	movs	r3, #0
 800aea4:	9309      	str	r3, [sp, #36]	; 0x24
 800aea6:	2320      	movs	r3, #32
 800aea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeac:	2330      	movs	r3, #48	; 0x30
 800aeae:	f04f 0901 	mov.w	r9, #1
 800aeb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b05c <_svfiprintf_r+0x1ec>
 800aeba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aebe:	4623      	mov	r3, r4
 800aec0:	469a      	mov	sl, r3
 800aec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec6:	b10a      	cbz	r2, 800aecc <_svfiprintf_r+0x5c>
 800aec8:	2a25      	cmp	r2, #37	; 0x25
 800aeca:	d1f9      	bne.n	800aec0 <_svfiprintf_r+0x50>
 800aecc:	ebba 0b04 	subs.w	fp, sl, r4
 800aed0:	d00b      	beq.n	800aeea <_svfiprintf_r+0x7a>
 800aed2:	465b      	mov	r3, fp
 800aed4:	4622      	mov	r2, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7ff ff6d 	bl	800adb8 <__ssputs_r>
 800aede:	3001      	adds	r0, #1
 800aee0:	f000 80aa 	beq.w	800b038 <_svfiprintf_r+0x1c8>
 800aee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aee6:	445a      	add	r2, fp
 800aee8:	9209      	str	r2, [sp, #36]	; 0x24
 800aeea:	f89a 3000 	ldrb.w	r3, [sl]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 80a2 	beq.w	800b038 <_svfiprintf_r+0x1c8>
 800aef4:	2300      	movs	r3, #0
 800aef6:	f04f 32ff 	mov.w	r2, #4294967295
 800aefa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aefe:	f10a 0a01 	add.w	sl, sl, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	9307      	str	r3, [sp, #28]
 800af06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af0a:	931a      	str	r3, [sp, #104]	; 0x68
 800af0c:	4654      	mov	r4, sl
 800af0e:	2205      	movs	r2, #5
 800af10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af14:	4851      	ldr	r0, [pc, #324]	; (800b05c <_svfiprintf_r+0x1ec>)
 800af16:	f000 fe7f 	bl	800bc18 <memchr>
 800af1a:	9a04      	ldr	r2, [sp, #16]
 800af1c:	b9d8      	cbnz	r0, 800af56 <_svfiprintf_r+0xe6>
 800af1e:	06d0      	lsls	r0, r2, #27
 800af20:	bf44      	itt	mi
 800af22:	2320      	movmi	r3, #32
 800af24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af28:	0711      	lsls	r1, r2, #28
 800af2a:	bf44      	itt	mi
 800af2c:	232b      	movmi	r3, #43	; 0x2b
 800af2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af32:	f89a 3000 	ldrb.w	r3, [sl]
 800af36:	2b2a      	cmp	r3, #42	; 0x2a
 800af38:	d015      	beq.n	800af66 <_svfiprintf_r+0xf6>
 800af3a:	4654      	mov	r4, sl
 800af3c:	2000      	movs	r0, #0
 800af3e:	f04f 0c0a 	mov.w	ip, #10
 800af42:	9a07      	ldr	r2, [sp, #28]
 800af44:	4621      	mov	r1, r4
 800af46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af4a:	3b30      	subs	r3, #48	; 0x30
 800af4c:	2b09      	cmp	r3, #9
 800af4e:	d94e      	bls.n	800afee <_svfiprintf_r+0x17e>
 800af50:	b1b0      	cbz	r0, 800af80 <_svfiprintf_r+0x110>
 800af52:	9207      	str	r2, [sp, #28]
 800af54:	e014      	b.n	800af80 <_svfiprintf_r+0x110>
 800af56:	eba0 0308 	sub.w	r3, r0, r8
 800af5a:	fa09 f303 	lsl.w	r3, r9, r3
 800af5e:	4313      	orrs	r3, r2
 800af60:	46a2      	mov	sl, r4
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	e7d2      	b.n	800af0c <_svfiprintf_r+0x9c>
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	1d19      	adds	r1, r3, #4
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	9103      	str	r1, [sp, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfbb      	ittet	lt
 800af72:	425b      	neglt	r3, r3
 800af74:	f042 0202 	orrlt.w	r2, r2, #2
 800af78:	9307      	strge	r3, [sp, #28]
 800af7a:	9307      	strlt	r3, [sp, #28]
 800af7c:	bfb8      	it	lt
 800af7e:	9204      	strlt	r2, [sp, #16]
 800af80:	7823      	ldrb	r3, [r4, #0]
 800af82:	2b2e      	cmp	r3, #46	; 0x2e
 800af84:	d10c      	bne.n	800afa0 <_svfiprintf_r+0x130>
 800af86:	7863      	ldrb	r3, [r4, #1]
 800af88:	2b2a      	cmp	r3, #42	; 0x2a
 800af8a:	d135      	bne.n	800aff8 <_svfiprintf_r+0x188>
 800af8c:	9b03      	ldr	r3, [sp, #12]
 800af8e:	3402      	adds	r4, #2
 800af90:	1d1a      	adds	r2, r3, #4
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	9203      	str	r2, [sp, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	bfb8      	it	lt
 800af9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af9e:	9305      	str	r3, [sp, #20]
 800afa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b06c <_svfiprintf_r+0x1fc>
 800afa4:	2203      	movs	r2, #3
 800afa6:	4650      	mov	r0, sl
 800afa8:	7821      	ldrb	r1, [r4, #0]
 800afaa:	f000 fe35 	bl	800bc18 <memchr>
 800afae:	b140      	cbz	r0, 800afc2 <_svfiprintf_r+0x152>
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	eba0 000a 	sub.w	r0, r0, sl
 800afb6:	fa03 f000 	lsl.w	r0, r3, r0
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	3401      	adds	r4, #1
 800afbe:	4303      	orrs	r3, r0
 800afc0:	9304      	str	r3, [sp, #16]
 800afc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc6:	2206      	movs	r2, #6
 800afc8:	4825      	ldr	r0, [pc, #148]	; (800b060 <_svfiprintf_r+0x1f0>)
 800afca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afce:	f000 fe23 	bl	800bc18 <memchr>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d038      	beq.n	800b048 <_svfiprintf_r+0x1d8>
 800afd6:	4b23      	ldr	r3, [pc, #140]	; (800b064 <_svfiprintf_r+0x1f4>)
 800afd8:	bb1b      	cbnz	r3, 800b022 <_svfiprintf_r+0x1b2>
 800afda:	9b03      	ldr	r3, [sp, #12]
 800afdc:	3307      	adds	r3, #7
 800afde:	f023 0307 	bic.w	r3, r3, #7
 800afe2:	3308      	adds	r3, #8
 800afe4:	9303      	str	r3, [sp, #12]
 800afe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe8:	4433      	add	r3, r6
 800afea:	9309      	str	r3, [sp, #36]	; 0x24
 800afec:	e767      	b.n	800aebe <_svfiprintf_r+0x4e>
 800afee:	460c      	mov	r4, r1
 800aff0:	2001      	movs	r0, #1
 800aff2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aff6:	e7a5      	b.n	800af44 <_svfiprintf_r+0xd4>
 800aff8:	2300      	movs	r3, #0
 800affa:	f04f 0c0a 	mov.w	ip, #10
 800affe:	4619      	mov	r1, r3
 800b000:	3401      	adds	r4, #1
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	4620      	mov	r0, r4
 800b006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b00a:	3a30      	subs	r2, #48	; 0x30
 800b00c:	2a09      	cmp	r2, #9
 800b00e:	d903      	bls.n	800b018 <_svfiprintf_r+0x1a8>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d0c5      	beq.n	800afa0 <_svfiprintf_r+0x130>
 800b014:	9105      	str	r1, [sp, #20]
 800b016:	e7c3      	b.n	800afa0 <_svfiprintf_r+0x130>
 800b018:	4604      	mov	r4, r0
 800b01a:	2301      	movs	r3, #1
 800b01c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b020:	e7f0      	b.n	800b004 <_svfiprintf_r+0x194>
 800b022:	ab03      	add	r3, sp, #12
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	462a      	mov	r2, r5
 800b028:	4638      	mov	r0, r7
 800b02a:	4b0f      	ldr	r3, [pc, #60]	; (800b068 <_svfiprintf_r+0x1f8>)
 800b02c:	a904      	add	r1, sp, #16
 800b02e:	f3af 8000 	nop.w
 800b032:	1c42      	adds	r2, r0, #1
 800b034:	4606      	mov	r6, r0
 800b036:	d1d6      	bne.n	800afe6 <_svfiprintf_r+0x176>
 800b038:	89ab      	ldrh	r3, [r5, #12]
 800b03a:	065b      	lsls	r3, r3, #25
 800b03c:	f53f af2c 	bmi.w	800ae98 <_svfiprintf_r+0x28>
 800b040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b042:	b01d      	add	sp, #116	; 0x74
 800b044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b048:	ab03      	add	r3, sp, #12
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	462a      	mov	r2, r5
 800b04e:	4638      	mov	r0, r7
 800b050:	4b05      	ldr	r3, [pc, #20]	; (800b068 <_svfiprintf_r+0x1f8>)
 800b052:	a904      	add	r1, sp, #16
 800b054:	f000 f9d4 	bl	800b400 <_printf_i>
 800b058:	e7eb      	b.n	800b032 <_svfiprintf_r+0x1c2>
 800b05a:	bf00      	nop
 800b05c:	0800d205 	.word	0x0800d205
 800b060:	0800d20f 	.word	0x0800d20f
 800b064:	00000000 	.word	0x00000000
 800b068:	0800adb9 	.word	0x0800adb9
 800b06c:	0800d20b 	.word	0x0800d20b

0800b070 <__sfputc_r>:
 800b070:	6893      	ldr	r3, [r2, #8]
 800b072:	b410      	push	{r4}
 800b074:	3b01      	subs	r3, #1
 800b076:	2b00      	cmp	r3, #0
 800b078:	6093      	str	r3, [r2, #8]
 800b07a:	da07      	bge.n	800b08c <__sfputc_r+0x1c>
 800b07c:	6994      	ldr	r4, [r2, #24]
 800b07e:	42a3      	cmp	r3, r4
 800b080:	db01      	blt.n	800b086 <__sfputc_r+0x16>
 800b082:	290a      	cmp	r1, #10
 800b084:	d102      	bne.n	800b08c <__sfputc_r+0x1c>
 800b086:	bc10      	pop	{r4}
 800b088:	f000 bae0 	b.w	800b64c <__swbuf_r>
 800b08c:	6813      	ldr	r3, [r2, #0]
 800b08e:	1c58      	adds	r0, r3, #1
 800b090:	6010      	str	r0, [r2, #0]
 800b092:	7019      	strb	r1, [r3, #0]
 800b094:	4608      	mov	r0, r1
 800b096:	bc10      	pop	{r4}
 800b098:	4770      	bx	lr

0800b09a <__sfputs_r>:
 800b09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	4614      	mov	r4, r2
 800b0a2:	18d5      	adds	r5, r2, r3
 800b0a4:	42ac      	cmp	r4, r5
 800b0a6:	d101      	bne.n	800b0ac <__sfputs_r+0x12>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e007      	b.n	800b0bc <__sfputs_r+0x22>
 800b0ac:	463a      	mov	r2, r7
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b4:	f7ff ffdc 	bl	800b070 <__sfputc_r>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d1f3      	bne.n	800b0a4 <__sfputs_r+0xa>
 800b0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0c0 <_vfiprintf_r>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	4614      	mov	r4, r2
 800b0c8:	4698      	mov	r8, r3
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	b09d      	sub	sp, #116	; 0x74
 800b0ce:	b118      	cbz	r0, 800b0d8 <_vfiprintf_r+0x18>
 800b0d0:	6983      	ldr	r3, [r0, #24]
 800b0d2:	b90b      	cbnz	r3, 800b0d8 <_vfiprintf_r+0x18>
 800b0d4:	f000 fc9c 	bl	800ba10 <__sinit>
 800b0d8:	4b89      	ldr	r3, [pc, #548]	; (800b300 <_vfiprintf_r+0x240>)
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	d11b      	bne.n	800b116 <_vfiprintf_r+0x56>
 800b0de:	6875      	ldr	r5, [r6, #4]
 800b0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e2:	07d9      	lsls	r1, r3, #31
 800b0e4:	d405      	bmi.n	800b0f2 <_vfiprintf_r+0x32>
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	059a      	lsls	r2, r3, #22
 800b0ea:	d402      	bmi.n	800b0f2 <_vfiprintf_r+0x32>
 800b0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ee:	f000 fd2d 	bl	800bb4c <__retarget_lock_acquire_recursive>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	071b      	lsls	r3, r3, #28
 800b0f6:	d501      	bpl.n	800b0fc <_vfiprintf_r+0x3c>
 800b0f8:	692b      	ldr	r3, [r5, #16]
 800b0fa:	b9eb      	cbnz	r3, 800b138 <_vfiprintf_r+0x78>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	f000 faf6 	bl	800b6f0 <__swsetup_r>
 800b104:	b1c0      	cbz	r0, 800b138 <_vfiprintf_r+0x78>
 800b106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b108:	07dc      	lsls	r4, r3, #31
 800b10a:	d50e      	bpl.n	800b12a <_vfiprintf_r+0x6a>
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	b01d      	add	sp, #116	; 0x74
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	4b7b      	ldr	r3, [pc, #492]	; (800b304 <_vfiprintf_r+0x244>)
 800b118:	429d      	cmp	r5, r3
 800b11a:	d101      	bne.n	800b120 <_vfiprintf_r+0x60>
 800b11c:	68b5      	ldr	r5, [r6, #8]
 800b11e:	e7df      	b.n	800b0e0 <_vfiprintf_r+0x20>
 800b120:	4b79      	ldr	r3, [pc, #484]	; (800b308 <_vfiprintf_r+0x248>)
 800b122:	429d      	cmp	r5, r3
 800b124:	bf08      	it	eq
 800b126:	68f5      	ldreq	r5, [r6, #12]
 800b128:	e7da      	b.n	800b0e0 <_vfiprintf_r+0x20>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	0598      	lsls	r0, r3, #22
 800b12e:	d4ed      	bmi.n	800b10c <_vfiprintf_r+0x4c>
 800b130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b132:	f000 fd0c 	bl	800bb4e <__retarget_lock_release_recursive>
 800b136:	e7e9      	b.n	800b10c <_vfiprintf_r+0x4c>
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	; 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b142:	2330      	movs	r3, #48	; 0x30
 800b144:	f04f 0901 	mov.w	r9, #1
 800b148:	f8cd 800c 	str.w	r8, [sp, #12]
 800b14c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b30c <_vfiprintf_r+0x24c>
 800b150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b154:	4623      	mov	r3, r4
 800b156:	469a      	mov	sl, r3
 800b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15c:	b10a      	cbz	r2, 800b162 <_vfiprintf_r+0xa2>
 800b15e:	2a25      	cmp	r2, #37	; 0x25
 800b160:	d1f9      	bne.n	800b156 <_vfiprintf_r+0x96>
 800b162:	ebba 0b04 	subs.w	fp, sl, r4
 800b166:	d00b      	beq.n	800b180 <_vfiprintf_r+0xc0>
 800b168:	465b      	mov	r3, fp
 800b16a:	4622      	mov	r2, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ff93 	bl	800b09a <__sfputs_r>
 800b174:	3001      	adds	r0, #1
 800b176:	f000 80aa 	beq.w	800b2ce <_vfiprintf_r+0x20e>
 800b17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b17c:	445a      	add	r2, fp
 800b17e:	9209      	str	r2, [sp, #36]	; 0x24
 800b180:	f89a 3000 	ldrb.w	r3, [sl]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 80a2 	beq.w	800b2ce <_vfiprintf_r+0x20e>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4858      	ldr	r0, [pc, #352]	; (800b30c <_vfiprintf_r+0x24c>)
 800b1ac:	f000 fd34 	bl	800bc18 <memchr>
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	b9d8      	cbnz	r0, 800b1ec <_vfiprintf_r+0x12c>
 800b1b4:	06d1      	lsls	r1, r2, #27
 800b1b6:	bf44      	itt	mi
 800b1b8:	2320      	movmi	r3, #32
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1be:	0713      	lsls	r3, r2, #28
 800b1c0:	bf44      	itt	mi
 800b1c2:	232b      	movmi	r3, #43	; 0x2b
 800b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ce:	d015      	beq.n	800b1fc <_vfiprintf_r+0x13c>
 800b1d0:	4654      	mov	r4, sl
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	f04f 0c0a 	mov.w	ip, #10
 800b1d8:	9a07      	ldr	r2, [sp, #28]
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e0:	3b30      	subs	r3, #48	; 0x30
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	d94e      	bls.n	800b284 <_vfiprintf_r+0x1c4>
 800b1e6:	b1b0      	cbz	r0, 800b216 <_vfiprintf_r+0x156>
 800b1e8:	9207      	str	r2, [sp, #28]
 800b1ea:	e014      	b.n	800b216 <_vfiprintf_r+0x156>
 800b1ec:	eba0 0308 	sub.w	r3, r0, r8
 800b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	46a2      	mov	sl, r4
 800b1f8:	9304      	str	r3, [sp, #16]
 800b1fa:	e7d2      	b.n	800b1a2 <_vfiprintf_r+0xe2>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9103      	str	r1, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbb      	ittet	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	f042 0202 	orrlt.w	r2, r2, #2
 800b20e:	9307      	strge	r3, [sp, #28]
 800b210:	9307      	strlt	r3, [sp, #28]
 800b212:	bfb8      	it	lt
 800b214:	9204      	strlt	r2, [sp, #16]
 800b216:	7823      	ldrb	r3, [r4, #0]
 800b218:	2b2e      	cmp	r3, #46	; 0x2e
 800b21a:	d10c      	bne.n	800b236 <_vfiprintf_r+0x176>
 800b21c:	7863      	ldrb	r3, [r4, #1]
 800b21e:	2b2a      	cmp	r3, #42	; 0x2a
 800b220:	d135      	bne.n	800b28e <_vfiprintf_r+0x1ce>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	3402      	adds	r4, #2
 800b226:	1d1a      	adds	r2, r3, #4
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	9203      	str	r2, [sp, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bfb8      	it	lt
 800b230:	f04f 33ff 	movlt.w	r3, #4294967295
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b31c <_vfiprintf_r+0x25c>
 800b23a:	2203      	movs	r2, #3
 800b23c:	4650      	mov	r0, sl
 800b23e:	7821      	ldrb	r1, [r4, #0]
 800b240:	f000 fcea 	bl	800bc18 <memchr>
 800b244:	b140      	cbz	r0, 800b258 <_vfiprintf_r+0x198>
 800b246:	2340      	movs	r3, #64	; 0x40
 800b248:	eba0 000a 	sub.w	r0, r0, sl
 800b24c:	fa03 f000 	lsl.w	r0, r3, r0
 800b250:	9b04      	ldr	r3, [sp, #16]
 800b252:	3401      	adds	r4, #1
 800b254:	4303      	orrs	r3, r0
 800b256:	9304      	str	r3, [sp, #16]
 800b258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25c:	2206      	movs	r2, #6
 800b25e:	482c      	ldr	r0, [pc, #176]	; (800b310 <_vfiprintf_r+0x250>)
 800b260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b264:	f000 fcd8 	bl	800bc18 <memchr>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d03f      	beq.n	800b2ec <_vfiprintf_r+0x22c>
 800b26c:	4b29      	ldr	r3, [pc, #164]	; (800b314 <_vfiprintf_r+0x254>)
 800b26e:	bb1b      	cbnz	r3, 800b2b8 <_vfiprintf_r+0x1f8>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	3307      	adds	r3, #7
 800b274:	f023 0307 	bic.w	r3, r3, #7
 800b278:	3308      	adds	r3, #8
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27e:	443b      	add	r3, r7
 800b280:	9309      	str	r3, [sp, #36]	; 0x24
 800b282:	e767      	b.n	800b154 <_vfiprintf_r+0x94>
 800b284:	460c      	mov	r4, r1
 800b286:	2001      	movs	r0, #1
 800b288:	fb0c 3202 	mla	r2, ip, r2, r3
 800b28c:	e7a5      	b.n	800b1da <_vfiprintf_r+0x11a>
 800b28e:	2300      	movs	r3, #0
 800b290:	f04f 0c0a 	mov.w	ip, #10
 800b294:	4619      	mov	r1, r3
 800b296:	3401      	adds	r4, #1
 800b298:	9305      	str	r3, [sp, #20]
 800b29a:	4620      	mov	r0, r4
 800b29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a0:	3a30      	subs	r2, #48	; 0x30
 800b2a2:	2a09      	cmp	r2, #9
 800b2a4:	d903      	bls.n	800b2ae <_vfiprintf_r+0x1ee>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0c5      	beq.n	800b236 <_vfiprintf_r+0x176>
 800b2aa:	9105      	str	r1, [sp, #20]
 800b2ac:	e7c3      	b.n	800b236 <_vfiprintf_r+0x176>
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b6:	e7f0      	b.n	800b29a <_vfiprintf_r+0x1da>
 800b2b8:	ab03      	add	r3, sp, #12
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	462a      	mov	r2, r5
 800b2be:	4630      	mov	r0, r6
 800b2c0:	4b15      	ldr	r3, [pc, #84]	; (800b318 <_vfiprintf_r+0x258>)
 800b2c2:	a904      	add	r1, sp, #16
 800b2c4:	f3af 8000 	nop.w
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	1c78      	adds	r0, r7, #1
 800b2cc:	d1d6      	bne.n	800b27c <_vfiprintf_r+0x1bc>
 800b2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2d0:	07d9      	lsls	r1, r3, #31
 800b2d2:	d405      	bmi.n	800b2e0 <_vfiprintf_r+0x220>
 800b2d4:	89ab      	ldrh	r3, [r5, #12]
 800b2d6:	059a      	lsls	r2, r3, #22
 800b2d8:	d402      	bmi.n	800b2e0 <_vfiprintf_r+0x220>
 800b2da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2dc:	f000 fc37 	bl	800bb4e <__retarget_lock_release_recursive>
 800b2e0:	89ab      	ldrh	r3, [r5, #12]
 800b2e2:	065b      	lsls	r3, r3, #25
 800b2e4:	f53f af12 	bmi.w	800b10c <_vfiprintf_r+0x4c>
 800b2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ea:	e711      	b.n	800b110 <_vfiprintf_r+0x50>
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4b08      	ldr	r3, [pc, #32]	; (800b318 <_vfiprintf_r+0x258>)
 800b2f6:	a904      	add	r1, sp, #16
 800b2f8:	f000 f882 	bl	800b400 <_printf_i>
 800b2fc:	e7e4      	b.n	800b2c8 <_vfiprintf_r+0x208>
 800b2fe:	bf00      	nop
 800b300:	0800d258 	.word	0x0800d258
 800b304:	0800d278 	.word	0x0800d278
 800b308:	0800d238 	.word	0x0800d238
 800b30c:	0800d205 	.word	0x0800d205
 800b310:	0800d20f 	.word	0x0800d20f
 800b314:	00000000 	.word	0x00000000
 800b318:	0800b09b 	.word	0x0800b09b
 800b31c:	0800d20b 	.word	0x0800d20b

0800b320 <_printf_common>:
 800b320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b324:	4616      	mov	r6, r2
 800b326:	4699      	mov	r9, r3
 800b328:	688a      	ldr	r2, [r1, #8]
 800b32a:	690b      	ldr	r3, [r1, #16]
 800b32c:	4607      	mov	r7, r0
 800b32e:	4293      	cmp	r3, r2
 800b330:	bfb8      	it	lt
 800b332:	4613      	movlt	r3, r2
 800b334:	6033      	str	r3, [r6, #0]
 800b336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b33a:	460c      	mov	r4, r1
 800b33c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b340:	b10a      	cbz	r2, 800b346 <_printf_common+0x26>
 800b342:	3301      	adds	r3, #1
 800b344:	6033      	str	r3, [r6, #0]
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	0699      	lsls	r1, r3, #26
 800b34a:	bf42      	ittt	mi
 800b34c:	6833      	ldrmi	r3, [r6, #0]
 800b34e:	3302      	addmi	r3, #2
 800b350:	6033      	strmi	r3, [r6, #0]
 800b352:	6825      	ldr	r5, [r4, #0]
 800b354:	f015 0506 	ands.w	r5, r5, #6
 800b358:	d106      	bne.n	800b368 <_printf_common+0x48>
 800b35a:	f104 0a19 	add.w	sl, r4, #25
 800b35e:	68e3      	ldr	r3, [r4, #12]
 800b360:	6832      	ldr	r2, [r6, #0]
 800b362:	1a9b      	subs	r3, r3, r2
 800b364:	42ab      	cmp	r3, r5
 800b366:	dc28      	bgt.n	800b3ba <_printf_common+0x9a>
 800b368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b36c:	1e13      	subs	r3, r2, #0
 800b36e:	6822      	ldr	r2, [r4, #0]
 800b370:	bf18      	it	ne
 800b372:	2301      	movne	r3, #1
 800b374:	0692      	lsls	r2, r2, #26
 800b376:	d42d      	bmi.n	800b3d4 <_printf_common+0xb4>
 800b378:	4649      	mov	r1, r9
 800b37a:	4638      	mov	r0, r7
 800b37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b380:	47c0      	blx	r8
 800b382:	3001      	adds	r0, #1
 800b384:	d020      	beq.n	800b3c8 <_printf_common+0xa8>
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	68e5      	ldr	r5, [r4, #12]
 800b38a:	f003 0306 	and.w	r3, r3, #6
 800b38e:	2b04      	cmp	r3, #4
 800b390:	bf18      	it	ne
 800b392:	2500      	movne	r5, #0
 800b394:	6832      	ldr	r2, [r6, #0]
 800b396:	f04f 0600 	mov.w	r6, #0
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	bf08      	it	eq
 800b39e:	1aad      	subeq	r5, r5, r2
 800b3a0:	6922      	ldr	r2, [r4, #16]
 800b3a2:	bf08      	it	eq
 800b3a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bfc4      	itt	gt
 800b3ac:	1a9b      	subgt	r3, r3, r2
 800b3ae:	18ed      	addgt	r5, r5, r3
 800b3b0:	341a      	adds	r4, #26
 800b3b2:	42b5      	cmp	r5, r6
 800b3b4:	d11a      	bne.n	800b3ec <_printf_common+0xcc>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e008      	b.n	800b3cc <_printf_common+0xac>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	4652      	mov	r2, sl
 800b3be:	4649      	mov	r1, r9
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	47c0      	blx	r8
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d103      	bne.n	800b3d0 <_printf_common+0xb0>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	e7c4      	b.n	800b35e <_printf_common+0x3e>
 800b3d4:	2030      	movs	r0, #48	; 0x30
 800b3d6:	18e1      	adds	r1, r4, r3
 800b3d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3dc:	1c5a      	adds	r2, r3, #1
 800b3de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3e2:	4422      	add	r2, r4
 800b3e4:	3302      	adds	r3, #2
 800b3e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3ea:	e7c5      	b.n	800b378 <_printf_common+0x58>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	47c0      	blx	r8
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	d0e6      	beq.n	800b3c8 <_printf_common+0xa8>
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	e7d9      	b.n	800b3b2 <_printf_common+0x92>
	...

0800b400 <_printf_i>:
 800b400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	7e27      	ldrb	r7, [r4, #24]
 800b408:	4691      	mov	r9, r2
 800b40a:	2f78      	cmp	r7, #120	; 0x78
 800b40c:	4680      	mov	r8, r0
 800b40e:	469a      	mov	sl, r3
 800b410:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b412:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b416:	d807      	bhi.n	800b428 <_printf_i+0x28>
 800b418:	2f62      	cmp	r7, #98	; 0x62
 800b41a:	d80a      	bhi.n	800b432 <_printf_i+0x32>
 800b41c:	2f00      	cmp	r7, #0
 800b41e:	f000 80d9 	beq.w	800b5d4 <_printf_i+0x1d4>
 800b422:	2f58      	cmp	r7, #88	; 0x58
 800b424:	f000 80a4 	beq.w	800b570 <_printf_i+0x170>
 800b428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b430:	e03a      	b.n	800b4a8 <_printf_i+0xa8>
 800b432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b436:	2b15      	cmp	r3, #21
 800b438:	d8f6      	bhi.n	800b428 <_printf_i+0x28>
 800b43a:	a001      	add	r0, pc, #4	; (adr r0, 800b440 <_printf_i+0x40>)
 800b43c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b440:	0800b499 	.word	0x0800b499
 800b444:	0800b4ad 	.word	0x0800b4ad
 800b448:	0800b429 	.word	0x0800b429
 800b44c:	0800b429 	.word	0x0800b429
 800b450:	0800b429 	.word	0x0800b429
 800b454:	0800b429 	.word	0x0800b429
 800b458:	0800b4ad 	.word	0x0800b4ad
 800b45c:	0800b429 	.word	0x0800b429
 800b460:	0800b429 	.word	0x0800b429
 800b464:	0800b429 	.word	0x0800b429
 800b468:	0800b429 	.word	0x0800b429
 800b46c:	0800b5bb 	.word	0x0800b5bb
 800b470:	0800b4dd 	.word	0x0800b4dd
 800b474:	0800b59d 	.word	0x0800b59d
 800b478:	0800b429 	.word	0x0800b429
 800b47c:	0800b429 	.word	0x0800b429
 800b480:	0800b5dd 	.word	0x0800b5dd
 800b484:	0800b429 	.word	0x0800b429
 800b488:	0800b4dd 	.word	0x0800b4dd
 800b48c:	0800b429 	.word	0x0800b429
 800b490:	0800b429 	.word	0x0800b429
 800b494:	0800b5a5 	.word	0x0800b5a5
 800b498:	680b      	ldr	r3, [r1, #0]
 800b49a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b49e:	1d1a      	adds	r2, r3, #4
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	600a      	str	r2, [r1, #0]
 800b4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e0a4      	b.n	800b5f6 <_printf_i+0x1f6>
 800b4ac:	6825      	ldr	r5, [r4, #0]
 800b4ae:	6808      	ldr	r0, [r1, #0]
 800b4b0:	062e      	lsls	r6, r5, #24
 800b4b2:	f100 0304 	add.w	r3, r0, #4
 800b4b6:	d50a      	bpl.n	800b4ce <_printf_i+0xce>
 800b4b8:	6805      	ldr	r5, [r0, #0]
 800b4ba:	600b      	str	r3, [r1, #0]
 800b4bc:	2d00      	cmp	r5, #0
 800b4be:	da03      	bge.n	800b4c8 <_printf_i+0xc8>
 800b4c0:	232d      	movs	r3, #45	; 0x2d
 800b4c2:	426d      	negs	r5, r5
 800b4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4c8:	230a      	movs	r3, #10
 800b4ca:	485e      	ldr	r0, [pc, #376]	; (800b644 <_printf_i+0x244>)
 800b4cc:	e019      	b.n	800b502 <_printf_i+0x102>
 800b4ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b4d2:	6805      	ldr	r5, [r0, #0]
 800b4d4:	600b      	str	r3, [r1, #0]
 800b4d6:	bf18      	it	ne
 800b4d8:	b22d      	sxthne	r5, r5
 800b4da:	e7ef      	b.n	800b4bc <_printf_i+0xbc>
 800b4dc:	680b      	ldr	r3, [r1, #0]
 800b4de:	6825      	ldr	r5, [r4, #0]
 800b4e0:	1d18      	adds	r0, r3, #4
 800b4e2:	6008      	str	r0, [r1, #0]
 800b4e4:	0628      	lsls	r0, r5, #24
 800b4e6:	d501      	bpl.n	800b4ec <_printf_i+0xec>
 800b4e8:	681d      	ldr	r5, [r3, #0]
 800b4ea:	e002      	b.n	800b4f2 <_printf_i+0xf2>
 800b4ec:	0669      	lsls	r1, r5, #25
 800b4ee:	d5fb      	bpl.n	800b4e8 <_printf_i+0xe8>
 800b4f0:	881d      	ldrh	r5, [r3, #0]
 800b4f2:	2f6f      	cmp	r7, #111	; 0x6f
 800b4f4:	bf0c      	ite	eq
 800b4f6:	2308      	moveq	r3, #8
 800b4f8:	230a      	movne	r3, #10
 800b4fa:	4852      	ldr	r0, [pc, #328]	; (800b644 <_printf_i+0x244>)
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b502:	6866      	ldr	r6, [r4, #4]
 800b504:	2e00      	cmp	r6, #0
 800b506:	bfa8      	it	ge
 800b508:	6821      	ldrge	r1, [r4, #0]
 800b50a:	60a6      	str	r6, [r4, #8]
 800b50c:	bfa4      	itt	ge
 800b50e:	f021 0104 	bicge.w	r1, r1, #4
 800b512:	6021      	strge	r1, [r4, #0]
 800b514:	b90d      	cbnz	r5, 800b51a <_printf_i+0x11a>
 800b516:	2e00      	cmp	r6, #0
 800b518:	d04d      	beq.n	800b5b6 <_printf_i+0x1b6>
 800b51a:	4616      	mov	r6, r2
 800b51c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b520:	fb03 5711 	mls	r7, r3, r1, r5
 800b524:	5dc7      	ldrb	r7, [r0, r7]
 800b526:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b52a:	462f      	mov	r7, r5
 800b52c:	42bb      	cmp	r3, r7
 800b52e:	460d      	mov	r5, r1
 800b530:	d9f4      	bls.n	800b51c <_printf_i+0x11c>
 800b532:	2b08      	cmp	r3, #8
 800b534:	d10b      	bne.n	800b54e <_printf_i+0x14e>
 800b536:	6823      	ldr	r3, [r4, #0]
 800b538:	07df      	lsls	r7, r3, #31
 800b53a:	d508      	bpl.n	800b54e <_printf_i+0x14e>
 800b53c:	6923      	ldr	r3, [r4, #16]
 800b53e:	6861      	ldr	r1, [r4, #4]
 800b540:	4299      	cmp	r1, r3
 800b542:	bfde      	ittt	le
 800b544:	2330      	movle	r3, #48	; 0x30
 800b546:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b54a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b54e:	1b92      	subs	r2, r2, r6
 800b550:	6122      	str	r2, [r4, #16]
 800b552:	464b      	mov	r3, r9
 800b554:	4621      	mov	r1, r4
 800b556:	4640      	mov	r0, r8
 800b558:	f8cd a000 	str.w	sl, [sp]
 800b55c:	aa03      	add	r2, sp, #12
 800b55e:	f7ff fedf 	bl	800b320 <_printf_common>
 800b562:	3001      	adds	r0, #1
 800b564:	d14c      	bne.n	800b600 <_printf_i+0x200>
 800b566:	f04f 30ff 	mov.w	r0, #4294967295
 800b56a:	b004      	add	sp, #16
 800b56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b570:	4834      	ldr	r0, [pc, #208]	; (800b644 <_printf_i+0x244>)
 800b572:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b576:	680e      	ldr	r6, [r1, #0]
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b57e:	061f      	lsls	r7, r3, #24
 800b580:	600e      	str	r6, [r1, #0]
 800b582:	d514      	bpl.n	800b5ae <_printf_i+0x1ae>
 800b584:	07d9      	lsls	r1, r3, #31
 800b586:	bf44      	itt	mi
 800b588:	f043 0320 	orrmi.w	r3, r3, #32
 800b58c:	6023      	strmi	r3, [r4, #0]
 800b58e:	b91d      	cbnz	r5, 800b598 <_printf_i+0x198>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	f023 0320 	bic.w	r3, r3, #32
 800b596:	6023      	str	r3, [r4, #0]
 800b598:	2310      	movs	r3, #16
 800b59a:	e7af      	b.n	800b4fc <_printf_i+0xfc>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	f043 0320 	orr.w	r3, r3, #32
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	2378      	movs	r3, #120	; 0x78
 800b5a6:	4828      	ldr	r0, [pc, #160]	; (800b648 <_printf_i+0x248>)
 800b5a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5ac:	e7e3      	b.n	800b576 <_printf_i+0x176>
 800b5ae:	065e      	lsls	r6, r3, #25
 800b5b0:	bf48      	it	mi
 800b5b2:	b2ad      	uxthmi	r5, r5
 800b5b4:	e7e6      	b.n	800b584 <_printf_i+0x184>
 800b5b6:	4616      	mov	r6, r2
 800b5b8:	e7bb      	b.n	800b532 <_printf_i+0x132>
 800b5ba:	680b      	ldr	r3, [r1, #0]
 800b5bc:	6826      	ldr	r6, [r4, #0]
 800b5be:	1d1d      	adds	r5, r3, #4
 800b5c0:	6960      	ldr	r0, [r4, #20]
 800b5c2:	600d      	str	r5, [r1, #0]
 800b5c4:	0635      	lsls	r5, r6, #24
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	d501      	bpl.n	800b5ce <_printf_i+0x1ce>
 800b5ca:	6018      	str	r0, [r3, #0]
 800b5cc:	e002      	b.n	800b5d4 <_printf_i+0x1d4>
 800b5ce:	0671      	lsls	r1, r6, #25
 800b5d0:	d5fb      	bpl.n	800b5ca <_printf_i+0x1ca>
 800b5d2:	8018      	strh	r0, [r3, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4616      	mov	r6, r2
 800b5d8:	6123      	str	r3, [r4, #16]
 800b5da:	e7ba      	b.n	800b552 <_printf_i+0x152>
 800b5dc:	680b      	ldr	r3, [r1, #0]
 800b5de:	1d1a      	adds	r2, r3, #4
 800b5e0:	600a      	str	r2, [r1, #0]
 800b5e2:	681e      	ldr	r6, [r3, #0]
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	6862      	ldr	r2, [r4, #4]
 800b5ea:	f000 fb15 	bl	800bc18 <memchr>
 800b5ee:	b108      	cbz	r0, 800b5f4 <_printf_i+0x1f4>
 800b5f0:	1b80      	subs	r0, r0, r6
 800b5f2:	6060      	str	r0, [r4, #4]
 800b5f4:	6863      	ldr	r3, [r4, #4]
 800b5f6:	6123      	str	r3, [r4, #16]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5fe:	e7a8      	b.n	800b552 <_printf_i+0x152>
 800b600:	4632      	mov	r2, r6
 800b602:	4649      	mov	r1, r9
 800b604:	4640      	mov	r0, r8
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	47d0      	blx	sl
 800b60a:	3001      	adds	r0, #1
 800b60c:	d0ab      	beq.n	800b566 <_printf_i+0x166>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	079b      	lsls	r3, r3, #30
 800b612:	d413      	bmi.n	800b63c <_printf_i+0x23c>
 800b614:	68e0      	ldr	r0, [r4, #12]
 800b616:	9b03      	ldr	r3, [sp, #12]
 800b618:	4298      	cmp	r0, r3
 800b61a:	bfb8      	it	lt
 800b61c:	4618      	movlt	r0, r3
 800b61e:	e7a4      	b.n	800b56a <_printf_i+0x16a>
 800b620:	2301      	movs	r3, #1
 800b622:	4632      	mov	r2, r6
 800b624:	4649      	mov	r1, r9
 800b626:	4640      	mov	r0, r8
 800b628:	47d0      	blx	sl
 800b62a:	3001      	adds	r0, #1
 800b62c:	d09b      	beq.n	800b566 <_printf_i+0x166>
 800b62e:	3501      	adds	r5, #1
 800b630:	68e3      	ldr	r3, [r4, #12]
 800b632:	9903      	ldr	r1, [sp, #12]
 800b634:	1a5b      	subs	r3, r3, r1
 800b636:	42ab      	cmp	r3, r5
 800b638:	dcf2      	bgt.n	800b620 <_printf_i+0x220>
 800b63a:	e7eb      	b.n	800b614 <_printf_i+0x214>
 800b63c:	2500      	movs	r5, #0
 800b63e:	f104 0619 	add.w	r6, r4, #25
 800b642:	e7f5      	b.n	800b630 <_printf_i+0x230>
 800b644:	0800d216 	.word	0x0800d216
 800b648:	0800d227 	.word	0x0800d227

0800b64c <__swbuf_r>:
 800b64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64e:	460e      	mov	r6, r1
 800b650:	4614      	mov	r4, r2
 800b652:	4605      	mov	r5, r0
 800b654:	b118      	cbz	r0, 800b65e <__swbuf_r+0x12>
 800b656:	6983      	ldr	r3, [r0, #24]
 800b658:	b90b      	cbnz	r3, 800b65e <__swbuf_r+0x12>
 800b65a:	f000 f9d9 	bl	800ba10 <__sinit>
 800b65e:	4b21      	ldr	r3, [pc, #132]	; (800b6e4 <__swbuf_r+0x98>)
 800b660:	429c      	cmp	r4, r3
 800b662:	d12b      	bne.n	800b6bc <__swbuf_r+0x70>
 800b664:	686c      	ldr	r4, [r5, #4]
 800b666:	69a3      	ldr	r3, [r4, #24]
 800b668:	60a3      	str	r3, [r4, #8]
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	071a      	lsls	r2, r3, #28
 800b66e:	d52f      	bpl.n	800b6d0 <__swbuf_r+0x84>
 800b670:	6923      	ldr	r3, [r4, #16]
 800b672:	b36b      	cbz	r3, 800b6d0 <__swbuf_r+0x84>
 800b674:	6923      	ldr	r3, [r4, #16]
 800b676:	6820      	ldr	r0, [r4, #0]
 800b678:	b2f6      	uxtb	r6, r6
 800b67a:	1ac0      	subs	r0, r0, r3
 800b67c:	6963      	ldr	r3, [r4, #20]
 800b67e:	4637      	mov	r7, r6
 800b680:	4283      	cmp	r3, r0
 800b682:	dc04      	bgt.n	800b68e <__swbuf_r+0x42>
 800b684:	4621      	mov	r1, r4
 800b686:	4628      	mov	r0, r5
 800b688:	f000 f92e 	bl	800b8e8 <_fflush_r>
 800b68c:	bb30      	cbnz	r0, 800b6dc <__swbuf_r+0x90>
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	3001      	adds	r0, #1
 800b692:	3b01      	subs	r3, #1
 800b694:	60a3      	str	r3, [r4, #8]
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	6022      	str	r2, [r4, #0]
 800b69c:	701e      	strb	r6, [r3, #0]
 800b69e:	6963      	ldr	r3, [r4, #20]
 800b6a0:	4283      	cmp	r3, r0
 800b6a2:	d004      	beq.n	800b6ae <__swbuf_r+0x62>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	07db      	lsls	r3, r3, #31
 800b6a8:	d506      	bpl.n	800b6b8 <__swbuf_r+0x6c>
 800b6aa:	2e0a      	cmp	r6, #10
 800b6ac:	d104      	bne.n	800b6b8 <__swbuf_r+0x6c>
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	f000 f919 	bl	800b8e8 <_fflush_r>
 800b6b6:	b988      	cbnz	r0, 800b6dc <__swbuf_r+0x90>
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6bc:	4b0a      	ldr	r3, [pc, #40]	; (800b6e8 <__swbuf_r+0x9c>)
 800b6be:	429c      	cmp	r4, r3
 800b6c0:	d101      	bne.n	800b6c6 <__swbuf_r+0x7a>
 800b6c2:	68ac      	ldr	r4, [r5, #8]
 800b6c4:	e7cf      	b.n	800b666 <__swbuf_r+0x1a>
 800b6c6:	4b09      	ldr	r3, [pc, #36]	; (800b6ec <__swbuf_r+0xa0>)
 800b6c8:	429c      	cmp	r4, r3
 800b6ca:	bf08      	it	eq
 800b6cc:	68ec      	ldreq	r4, [r5, #12]
 800b6ce:	e7ca      	b.n	800b666 <__swbuf_r+0x1a>
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f000 f80c 	bl	800b6f0 <__swsetup_r>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d0cb      	beq.n	800b674 <__swbuf_r+0x28>
 800b6dc:	f04f 37ff 	mov.w	r7, #4294967295
 800b6e0:	e7ea      	b.n	800b6b8 <__swbuf_r+0x6c>
 800b6e2:	bf00      	nop
 800b6e4:	0800d258 	.word	0x0800d258
 800b6e8:	0800d278 	.word	0x0800d278
 800b6ec:	0800d238 	.word	0x0800d238

0800b6f0 <__swsetup_r>:
 800b6f0:	4b32      	ldr	r3, [pc, #200]	; (800b7bc <__swsetup_r+0xcc>)
 800b6f2:	b570      	push	{r4, r5, r6, lr}
 800b6f4:	681d      	ldr	r5, [r3, #0]
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	b125      	cbz	r5, 800b706 <__swsetup_r+0x16>
 800b6fc:	69ab      	ldr	r3, [r5, #24]
 800b6fe:	b913      	cbnz	r3, 800b706 <__swsetup_r+0x16>
 800b700:	4628      	mov	r0, r5
 800b702:	f000 f985 	bl	800ba10 <__sinit>
 800b706:	4b2e      	ldr	r3, [pc, #184]	; (800b7c0 <__swsetup_r+0xd0>)
 800b708:	429c      	cmp	r4, r3
 800b70a:	d10f      	bne.n	800b72c <__swsetup_r+0x3c>
 800b70c:	686c      	ldr	r4, [r5, #4]
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b714:	0719      	lsls	r1, r3, #28
 800b716:	d42c      	bmi.n	800b772 <__swsetup_r+0x82>
 800b718:	06dd      	lsls	r5, r3, #27
 800b71a:	d411      	bmi.n	800b740 <__swsetup_r+0x50>
 800b71c:	2309      	movs	r3, #9
 800b71e:	6033      	str	r3, [r6, #0]
 800b720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	81a3      	strh	r3, [r4, #12]
 800b72a:	e03e      	b.n	800b7aa <__swsetup_r+0xba>
 800b72c:	4b25      	ldr	r3, [pc, #148]	; (800b7c4 <__swsetup_r+0xd4>)
 800b72e:	429c      	cmp	r4, r3
 800b730:	d101      	bne.n	800b736 <__swsetup_r+0x46>
 800b732:	68ac      	ldr	r4, [r5, #8]
 800b734:	e7eb      	b.n	800b70e <__swsetup_r+0x1e>
 800b736:	4b24      	ldr	r3, [pc, #144]	; (800b7c8 <__swsetup_r+0xd8>)
 800b738:	429c      	cmp	r4, r3
 800b73a:	bf08      	it	eq
 800b73c:	68ec      	ldreq	r4, [r5, #12]
 800b73e:	e7e6      	b.n	800b70e <__swsetup_r+0x1e>
 800b740:	0758      	lsls	r0, r3, #29
 800b742:	d512      	bpl.n	800b76a <__swsetup_r+0x7a>
 800b744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b746:	b141      	cbz	r1, 800b75a <__swsetup_r+0x6a>
 800b748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b74c:	4299      	cmp	r1, r3
 800b74e:	d002      	beq.n	800b756 <__swsetup_r+0x66>
 800b750:	4630      	mov	r0, r6
 800b752:	f7ff f8e3 	bl	800a91c <_free_r>
 800b756:	2300      	movs	r3, #0
 800b758:	6363      	str	r3, [r4, #52]	; 0x34
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	2300      	movs	r3, #0
 800b764:	6063      	str	r3, [r4, #4]
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f043 0308 	orr.w	r3, r3, #8
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	6923      	ldr	r3, [r4, #16]
 800b774:	b94b      	cbnz	r3, 800b78a <__swsetup_r+0x9a>
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b780:	d003      	beq.n	800b78a <__swsetup_r+0x9a>
 800b782:	4621      	mov	r1, r4
 800b784:	4630      	mov	r0, r6
 800b786:	f000 fa07 	bl	800bb98 <__smakebuf_r>
 800b78a:	89a0      	ldrh	r0, [r4, #12]
 800b78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b790:	f010 0301 	ands.w	r3, r0, #1
 800b794:	d00a      	beq.n	800b7ac <__swsetup_r+0xbc>
 800b796:	2300      	movs	r3, #0
 800b798:	60a3      	str	r3, [r4, #8]
 800b79a:	6963      	ldr	r3, [r4, #20]
 800b79c:	425b      	negs	r3, r3
 800b79e:	61a3      	str	r3, [r4, #24]
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	b943      	cbnz	r3, 800b7b6 <__swsetup_r+0xc6>
 800b7a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7a8:	d1ba      	bne.n	800b720 <__swsetup_r+0x30>
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}
 800b7ac:	0781      	lsls	r1, r0, #30
 800b7ae:	bf58      	it	pl
 800b7b0:	6963      	ldrpl	r3, [r4, #20]
 800b7b2:	60a3      	str	r3, [r4, #8]
 800b7b4:	e7f4      	b.n	800b7a0 <__swsetup_r+0xb0>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	e7f7      	b.n	800b7aa <__swsetup_r+0xba>
 800b7ba:	bf00      	nop
 800b7bc:	20000024 	.word	0x20000024
 800b7c0:	0800d258 	.word	0x0800d258
 800b7c4:	0800d278 	.word	0x0800d278
 800b7c8:	0800d238 	.word	0x0800d238

0800b7cc <abort>:
 800b7cc:	2006      	movs	r0, #6
 800b7ce:	b508      	push	{r3, lr}
 800b7d0:	f000 fa98 	bl	800bd04 <raise>
 800b7d4:	2001      	movs	r0, #1
 800b7d6:	f7f8 f926 	bl	8003a26 <_exit>
	...

0800b7dc <__sflush_r>:
 800b7dc:	898a      	ldrh	r2, [r1, #12]
 800b7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	0710      	lsls	r0, r2, #28
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	d458      	bmi.n	800b89c <__sflush_r+0xc0>
 800b7ea:	684b      	ldr	r3, [r1, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dc05      	bgt.n	800b7fc <__sflush_r+0x20>
 800b7f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	dc02      	bgt.n	800b7fc <__sflush_r+0x20>
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7fe:	2e00      	cmp	r6, #0
 800b800:	d0f9      	beq.n	800b7f6 <__sflush_r+0x1a>
 800b802:	2300      	movs	r3, #0
 800b804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b808:	682f      	ldr	r7, [r5, #0]
 800b80a:	602b      	str	r3, [r5, #0]
 800b80c:	d032      	beq.n	800b874 <__sflush_r+0x98>
 800b80e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	075a      	lsls	r2, r3, #29
 800b814:	d505      	bpl.n	800b822 <__sflush_r+0x46>
 800b816:	6863      	ldr	r3, [r4, #4]
 800b818:	1ac0      	subs	r0, r0, r3
 800b81a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b81c:	b10b      	cbz	r3, 800b822 <__sflush_r+0x46>
 800b81e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b820:	1ac0      	subs	r0, r0, r3
 800b822:	2300      	movs	r3, #0
 800b824:	4602      	mov	r2, r0
 800b826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b828:	4628      	mov	r0, r5
 800b82a:	6a21      	ldr	r1, [r4, #32]
 800b82c:	47b0      	blx	r6
 800b82e:	1c43      	adds	r3, r0, #1
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	d106      	bne.n	800b842 <__sflush_r+0x66>
 800b834:	6829      	ldr	r1, [r5, #0]
 800b836:	291d      	cmp	r1, #29
 800b838:	d82c      	bhi.n	800b894 <__sflush_r+0xb8>
 800b83a:	4a2a      	ldr	r2, [pc, #168]	; (800b8e4 <__sflush_r+0x108>)
 800b83c:	40ca      	lsrs	r2, r1
 800b83e:	07d6      	lsls	r6, r2, #31
 800b840:	d528      	bpl.n	800b894 <__sflush_r+0xb8>
 800b842:	2200      	movs	r2, #0
 800b844:	6062      	str	r2, [r4, #4]
 800b846:	6922      	ldr	r2, [r4, #16]
 800b848:	04d9      	lsls	r1, r3, #19
 800b84a:	6022      	str	r2, [r4, #0]
 800b84c:	d504      	bpl.n	800b858 <__sflush_r+0x7c>
 800b84e:	1c42      	adds	r2, r0, #1
 800b850:	d101      	bne.n	800b856 <__sflush_r+0x7a>
 800b852:	682b      	ldr	r3, [r5, #0]
 800b854:	b903      	cbnz	r3, 800b858 <__sflush_r+0x7c>
 800b856:	6560      	str	r0, [r4, #84]	; 0x54
 800b858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b85a:	602f      	str	r7, [r5, #0]
 800b85c:	2900      	cmp	r1, #0
 800b85e:	d0ca      	beq.n	800b7f6 <__sflush_r+0x1a>
 800b860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b864:	4299      	cmp	r1, r3
 800b866:	d002      	beq.n	800b86e <__sflush_r+0x92>
 800b868:	4628      	mov	r0, r5
 800b86a:	f7ff f857 	bl	800a91c <_free_r>
 800b86e:	2000      	movs	r0, #0
 800b870:	6360      	str	r0, [r4, #52]	; 0x34
 800b872:	e7c1      	b.n	800b7f8 <__sflush_r+0x1c>
 800b874:	6a21      	ldr	r1, [r4, #32]
 800b876:	2301      	movs	r3, #1
 800b878:	4628      	mov	r0, r5
 800b87a:	47b0      	blx	r6
 800b87c:	1c41      	adds	r1, r0, #1
 800b87e:	d1c7      	bne.n	800b810 <__sflush_r+0x34>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0c4      	beq.n	800b810 <__sflush_r+0x34>
 800b886:	2b1d      	cmp	r3, #29
 800b888:	d001      	beq.n	800b88e <__sflush_r+0xb2>
 800b88a:	2b16      	cmp	r3, #22
 800b88c:	d101      	bne.n	800b892 <__sflush_r+0xb6>
 800b88e:	602f      	str	r7, [r5, #0]
 800b890:	e7b1      	b.n	800b7f6 <__sflush_r+0x1a>
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b898:	81a3      	strh	r3, [r4, #12]
 800b89a:	e7ad      	b.n	800b7f8 <__sflush_r+0x1c>
 800b89c:	690f      	ldr	r7, [r1, #16]
 800b89e:	2f00      	cmp	r7, #0
 800b8a0:	d0a9      	beq.n	800b7f6 <__sflush_r+0x1a>
 800b8a2:	0793      	lsls	r3, r2, #30
 800b8a4:	bf18      	it	ne
 800b8a6:	2300      	movne	r3, #0
 800b8a8:	680e      	ldr	r6, [r1, #0]
 800b8aa:	bf08      	it	eq
 800b8ac:	694b      	ldreq	r3, [r1, #20]
 800b8ae:	eba6 0807 	sub.w	r8, r6, r7
 800b8b2:	600f      	str	r7, [r1, #0]
 800b8b4:	608b      	str	r3, [r1, #8]
 800b8b6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ba:	dd9c      	ble.n	800b7f6 <__sflush_r+0x1a>
 800b8bc:	4643      	mov	r3, r8
 800b8be:	463a      	mov	r2, r7
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	6a21      	ldr	r1, [r4, #32]
 800b8c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8c6:	47b0      	blx	r6
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	dc06      	bgt.n	800b8da <__sflush_r+0xfe>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d6:	81a3      	strh	r3, [r4, #12]
 800b8d8:	e78e      	b.n	800b7f8 <__sflush_r+0x1c>
 800b8da:	4407      	add	r7, r0
 800b8dc:	eba8 0800 	sub.w	r8, r8, r0
 800b8e0:	e7e9      	b.n	800b8b6 <__sflush_r+0xda>
 800b8e2:	bf00      	nop
 800b8e4:	20400001 	.word	0x20400001

0800b8e8 <_fflush_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	690b      	ldr	r3, [r1, #16]
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	b913      	cbnz	r3, 800b8f8 <_fflush_r+0x10>
 800b8f2:	2500      	movs	r5, #0
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	b118      	cbz	r0, 800b902 <_fflush_r+0x1a>
 800b8fa:	6983      	ldr	r3, [r0, #24]
 800b8fc:	b90b      	cbnz	r3, 800b902 <_fflush_r+0x1a>
 800b8fe:	f000 f887 	bl	800ba10 <__sinit>
 800b902:	4b14      	ldr	r3, [pc, #80]	; (800b954 <_fflush_r+0x6c>)
 800b904:	429c      	cmp	r4, r3
 800b906:	d11b      	bne.n	800b940 <_fflush_r+0x58>
 800b908:	686c      	ldr	r4, [r5, #4]
 800b90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0ef      	beq.n	800b8f2 <_fflush_r+0xa>
 800b912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b914:	07d0      	lsls	r0, r2, #31
 800b916:	d404      	bmi.n	800b922 <_fflush_r+0x3a>
 800b918:	0599      	lsls	r1, r3, #22
 800b91a:	d402      	bmi.n	800b922 <_fflush_r+0x3a>
 800b91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b91e:	f000 f915 	bl	800bb4c <__retarget_lock_acquire_recursive>
 800b922:	4628      	mov	r0, r5
 800b924:	4621      	mov	r1, r4
 800b926:	f7ff ff59 	bl	800b7dc <__sflush_r>
 800b92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b92c:	4605      	mov	r5, r0
 800b92e:	07da      	lsls	r2, r3, #31
 800b930:	d4e0      	bmi.n	800b8f4 <_fflush_r+0xc>
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	059b      	lsls	r3, r3, #22
 800b936:	d4dd      	bmi.n	800b8f4 <_fflush_r+0xc>
 800b938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b93a:	f000 f908 	bl	800bb4e <__retarget_lock_release_recursive>
 800b93e:	e7d9      	b.n	800b8f4 <_fflush_r+0xc>
 800b940:	4b05      	ldr	r3, [pc, #20]	; (800b958 <_fflush_r+0x70>)
 800b942:	429c      	cmp	r4, r3
 800b944:	d101      	bne.n	800b94a <_fflush_r+0x62>
 800b946:	68ac      	ldr	r4, [r5, #8]
 800b948:	e7df      	b.n	800b90a <_fflush_r+0x22>
 800b94a:	4b04      	ldr	r3, [pc, #16]	; (800b95c <_fflush_r+0x74>)
 800b94c:	429c      	cmp	r4, r3
 800b94e:	bf08      	it	eq
 800b950:	68ec      	ldreq	r4, [r5, #12]
 800b952:	e7da      	b.n	800b90a <_fflush_r+0x22>
 800b954:	0800d258 	.word	0x0800d258
 800b958:	0800d278 	.word	0x0800d278
 800b95c:	0800d238 	.word	0x0800d238

0800b960 <std>:
 800b960:	2300      	movs	r3, #0
 800b962:	b510      	push	{r4, lr}
 800b964:	4604      	mov	r4, r0
 800b966:	e9c0 3300 	strd	r3, r3, [r0]
 800b96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b96e:	6083      	str	r3, [r0, #8]
 800b970:	8181      	strh	r1, [r0, #12]
 800b972:	6643      	str	r3, [r0, #100]	; 0x64
 800b974:	81c2      	strh	r2, [r0, #14]
 800b976:	6183      	str	r3, [r0, #24]
 800b978:	4619      	mov	r1, r3
 800b97a:	2208      	movs	r2, #8
 800b97c:	305c      	adds	r0, #92	; 0x5c
 800b97e:	f7fe ffc5 	bl	800a90c <memset>
 800b982:	4b05      	ldr	r3, [pc, #20]	; (800b998 <std+0x38>)
 800b984:	6224      	str	r4, [r4, #32]
 800b986:	6263      	str	r3, [r4, #36]	; 0x24
 800b988:	4b04      	ldr	r3, [pc, #16]	; (800b99c <std+0x3c>)
 800b98a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b98c:	4b04      	ldr	r3, [pc, #16]	; (800b9a0 <std+0x40>)
 800b98e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b990:	4b04      	ldr	r3, [pc, #16]	; (800b9a4 <std+0x44>)
 800b992:	6323      	str	r3, [r4, #48]	; 0x30
 800b994:	bd10      	pop	{r4, pc}
 800b996:	bf00      	nop
 800b998:	0800bd3d 	.word	0x0800bd3d
 800b99c:	0800bd5f 	.word	0x0800bd5f
 800b9a0:	0800bd97 	.word	0x0800bd97
 800b9a4:	0800bdbb 	.word	0x0800bdbb

0800b9a8 <_cleanup_r>:
 800b9a8:	4901      	ldr	r1, [pc, #4]	; (800b9b0 <_cleanup_r+0x8>)
 800b9aa:	f000 b8af 	b.w	800bb0c <_fwalk_reent>
 800b9ae:	bf00      	nop
 800b9b0:	0800b8e9 	.word	0x0800b8e9

0800b9b4 <__sfmoreglue>:
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	2568      	movs	r5, #104	; 0x68
 800b9b8:	1e4a      	subs	r2, r1, #1
 800b9ba:	4355      	muls	r5, r2
 800b9bc:	460e      	mov	r6, r1
 800b9be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9c2:	f7fe fff7 	bl	800a9b4 <_malloc_r>
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	b140      	cbz	r0, 800b9dc <__sfmoreglue+0x28>
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	e9c0 1600 	strd	r1, r6, [r0]
 800b9d0:	300c      	adds	r0, #12
 800b9d2:	60a0      	str	r0, [r4, #8]
 800b9d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9d8:	f7fe ff98 	bl	800a90c <memset>
 800b9dc:	4620      	mov	r0, r4
 800b9de:	bd70      	pop	{r4, r5, r6, pc}

0800b9e0 <__sfp_lock_acquire>:
 800b9e0:	4801      	ldr	r0, [pc, #4]	; (800b9e8 <__sfp_lock_acquire+0x8>)
 800b9e2:	f000 b8b3 	b.w	800bb4c <__retarget_lock_acquire_recursive>
 800b9e6:	bf00      	nop
 800b9e8:	20000454 	.word	0x20000454

0800b9ec <__sfp_lock_release>:
 800b9ec:	4801      	ldr	r0, [pc, #4]	; (800b9f4 <__sfp_lock_release+0x8>)
 800b9ee:	f000 b8ae 	b.w	800bb4e <__retarget_lock_release_recursive>
 800b9f2:	bf00      	nop
 800b9f4:	20000454 	.word	0x20000454

0800b9f8 <__sinit_lock_acquire>:
 800b9f8:	4801      	ldr	r0, [pc, #4]	; (800ba00 <__sinit_lock_acquire+0x8>)
 800b9fa:	f000 b8a7 	b.w	800bb4c <__retarget_lock_acquire_recursive>
 800b9fe:	bf00      	nop
 800ba00:	2000044f 	.word	0x2000044f

0800ba04 <__sinit_lock_release>:
 800ba04:	4801      	ldr	r0, [pc, #4]	; (800ba0c <__sinit_lock_release+0x8>)
 800ba06:	f000 b8a2 	b.w	800bb4e <__retarget_lock_release_recursive>
 800ba0a:	bf00      	nop
 800ba0c:	2000044f 	.word	0x2000044f

0800ba10 <__sinit>:
 800ba10:	b510      	push	{r4, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	f7ff fff0 	bl	800b9f8 <__sinit_lock_acquire>
 800ba18:	69a3      	ldr	r3, [r4, #24]
 800ba1a:	b11b      	cbz	r3, 800ba24 <__sinit+0x14>
 800ba1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba20:	f7ff bff0 	b.w	800ba04 <__sinit_lock_release>
 800ba24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba28:	6523      	str	r3, [r4, #80]	; 0x50
 800ba2a:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <__sinit+0x68>)
 800ba2c:	4a13      	ldr	r2, [pc, #76]	; (800ba7c <__sinit+0x6c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba32:	42a3      	cmp	r3, r4
 800ba34:	bf08      	it	eq
 800ba36:	2301      	moveq	r3, #1
 800ba38:	4620      	mov	r0, r4
 800ba3a:	bf08      	it	eq
 800ba3c:	61a3      	streq	r3, [r4, #24]
 800ba3e:	f000 f81f 	bl	800ba80 <__sfp>
 800ba42:	6060      	str	r0, [r4, #4]
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 f81b 	bl	800ba80 <__sfp>
 800ba4a:	60a0      	str	r0, [r4, #8]
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f000 f817 	bl	800ba80 <__sfp>
 800ba52:	2200      	movs	r2, #0
 800ba54:	2104      	movs	r1, #4
 800ba56:	60e0      	str	r0, [r4, #12]
 800ba58:	6860      	ldr	r0, [r4, #4]
 800ba5a:	f7ff ff81 	bl	800b960 <std>
 800ba5e:	2201      	movs	r2, #1
 800ba60:	2109      	movs	r1, #9
 800ba62:	68a0      	ldr	r0, [r4, #8]
 800ba64:	f7ff ff7c 	bl	800b960 <std>
 800ba68:	2202      	movs	r2, #2
 800ba6a:	2112      	movs	r1, #18
 800ba6c:	68e0      	ldr	r0, [r4, #12]
 800ba6e:	f7ff ff77 	bl	800b960 <std>
 800ba72:	2301      	movs	r3, #1
 800ba74:	61a3      	str	r3, [r4, #24]
 800ba76:	e7d1      	b.n	800ba1c <__sinit+0xc>
 800ba78:	0800d04c 	.word	0x0800d04c
 800ba7c:	0800b9a9 	.word	0x0800b9a9

0800ba80 <__sfp>:
 800ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba82:	4607      	mov	r7, r0
 800ba84:	f7ff ffac 	bl	800b9e0 <__sfp_lock_acquire>
 800ba88:	4b1e      	ldr	r3, [pc, #120]	; (800bb04 <__sfp+0x84>)
 800ba8a:	681e      	ldr	r6, [r3, #0]
 800ba8c:	69b3      	ldr	r3, [r6, #24]
 800ba8e:	b913      	cbnz	r3, 800ba96 <__sfp+0x16>
 800ba90:	4630      	mov	r0, r6
 800ba92:	f7ff ffbd 	bl	800ba10 <__sinit>
 800ba96:	3648      	adds	r6, #72	; 0x48
 800ba98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	d503      	bpl.n	800baa8 <__sfp+0x28>
 800baa0:	6833      	ldr	r3, [r6, #0]
 800baa2:	b30b      	cbz	r3, 800bae8 <__sfp+0x68>
 800baa4:	6836      	ldr	r6, [r6, #0]
 800baa6:	e7f7      	b.n	800ba98 <__sfp+0x18>
 800baa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800baac:	b9d5      	cbnz	r5, 800bae4 <__sfp+0x64>
 800baae:	4b16      	ldr	r3, [pc, #88]	; (800bb08 <__sfp+0x88>)
 800bab0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bab4:	60e3      	str	r3, [r4, #12]
 800bab6:	6665      	str	r5, [r4, #100]	; 0x64
 800bab8:	f000 f847 	bl	800bb4a <__retarget_lock_init_recursive>
 800babc:	f7ff ff96 	bl	800b9ec <__sfp_lock_release>
 800bac0:	2208      	movs	r2, #8
 800bac2:	4629      	mov	r1, r5
 800bac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bacc:	6025      	str	r5, [r4, #0]
 800bace:	61a5      	str	r5, [r4, #24]
 800bad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bad4:	f7fe ff1a 	bl	800a90c <memset>
 800bad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800badc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bae0:	4620      	mov	r0, r4
 800bae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bae4:	3468      	adds	r4, #104	; 0x68
 800bae6:	e7d9      	b.n	800ba9c <__sfp+0x1c>
 800bae8:	2104      	movs	r1, #4
 800baea:	4638      	mov	r0, r7
 800baec:	f7ff ff62 	bl	800b9b4 <__sfmoreglue>
 800baf0:	4604      	mov	r4, r0
 800baf2:	6030      	str	r0, [r6, #0]
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d1d5      	bne.n	800baa4 <__sfp+0x24>
 800baf8:	f7ff ff78 	bl	800b9ec <__sfp_lock_release>
 800bafc:	230c      	movs	r3, #12
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	e7ee      	b.n	800bae0 <__sfp+0x60>
 800bb02:	bf00      	nop
 800bb04:	0800d04c 	.word	0x0800d04c
 800bb08:	ffff0001 	.word	0xffff0001

0800bb0c <_fwalk_reent>:
 800bb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb10:	4606      	mov	r6, r0
 800bb12:	4688      	mov	r8, r1
 800bb14:	2700      	movs	r7, #0
 800bb16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb1e:	f1b9 0901 	subs.w	r9, r9, #1
 800bb22:	d505      	bpl.n	800bb30 <_fwalk_reent+0x24>
 800bb24:	6824      	ldr	r4, [r4, #0]
 800bb26:	2c00      	cmp	r4, #0
 800bb28:	d1f7      	bne.n	800bb1a <_fwalk_reent+0xe>
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb30:	89ab      	ldrh	r3, [r5, #12]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d907      	bls.n	800bb46 <_fwalk_reent+0x3a>
 800bb36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	d003      	beq.n	800bb46 <_fwalk_reent+0x3a>
 800bb3e:	4629      	mov	r1, r5
 800bb40:	4630      	mov	r0, r6
 800bb42:	47c0      	blx	r8
 800bb44:	4307      	orrs	r7, r0
 800bb46:	3568      	adds	r5, #104	; 0x68
 800bb48:	e7e9      	b.n	800bb1e <_fwalk_reent+0x12>

0800bb4a <__retarget_lock_init_recursive>:
 800bb4a:	4770      	bx	lr

0800bb4c <__retarget_lock_acquire_recursive>:
 800bb4c:	4770      	bx	lr

0800bb4e <__retarget_lock_release_recursive>:
 800bb4e:	4770      	bx	lr

0800bb50 <__swhatbuf_r>:
 800bb50:	b570      	push	{r4, r5, r6, lr}
 800bb52:	460e      	mov	r6, r1
 800bb54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb58:	4614      	mov	r4, r2
 800bb5a:	2900      	cmp	r1, #0
 800bb5c:	461d      	mov	r5, r3
 800bb5e:	b096      	sub	sp, #88	; 0x58
 800bb60:	da07      	bge.n	800bb72 <__swhatbuf_r+0x22>
 800bb62:	2300      	movs	r3, #0
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	89b3      	ldrh	r3, [r6, #12]
 800bb68:	061a      	lsls	r2, r3, #24
 800bb6a:	d410      	bmi.n	800bb8e <__swhatbuf_r+0x3e>
 800bb6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb70:	e00e      	b.n	800bb90 <__swhatbuf_r+0x40>
 800bb72:	466a      	mov	r2, sp
 800bb74:	f000 f948 	bl	800be08 <_fstat_r>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	dbf2      	blt.n	800bb62 <__swhatbuf_r+0x12>
 800bb7c:	9a01      	ldr	r2, [sp, #4]
 800bb7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb86:	425a      	negs	r2, r3
 800bb88:	415a      	adcs	r2, r3
 800bb8a:	602a      	str	r2, [r5, #0]
 800bb8c:	e7ee      	b.n	800bb6c <__swhatbuf_r+0x1c>
 800bb8e:	2340      	movs	r3, #64	; 0x40
 800bb90:	2000      	movs	r0, #0
 800bb92:	6023      	str	r3, [r4, #0]
 800bb94:	b016      	add	sp, #88	; 0x58
 800bb96:	bd70      	pop	{r4, r5, r6, pc}

0800bb98 <__smakebuf_r>:
 800bb98:	898b      	ldrh	r3, [r1, #12]
 800bb9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb9c:	079d      	lsls	r5, r3, #30
 800bb9e:	4606      	mov	r6, r0
 800bba0:	460c      	mov	r4, r1
 800bba2:	d507      	bpl.n	800bbb4 <__smakebuf_r+0x1c>
 800bba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	6123      	str	r3, [r4, #16]
 800bbac:	2301      	movs	r3, #1
 800bbae:	6163      	str	r3, [r4, #20]
 800bbb0:	b002      	add	sp, #8
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	466a      	mov	r2, sp
 800bbb6:	ab01      	add	r3, sp, #4
 800bbb8:	f7ff ffca 	bl	800bb50 <__swhatbuf_r>
 800bbbc:	9900      	ldr	r1, [sp, #0]
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	f7fe fef7 	bl	800a9b4 <_malloc_r>
 800bbc6:	b948      	cbnz	r0, 800bbdc <__smakebuf_r+0x44>
 800bbc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbcc:	059a      	lsls	r2, r3, #22
 800bbce:	d4ef      	bmi.n	800bbb0 <__smakebuf_r+0x18>
 800bbd0:	f023 0303 	bic.w	r3, r3, #3
 800bbd4:	f043 0302 	orr.w	r3, r3, #2
 800bbd8:	81a3      	strh	r3, [r4, #12]
 800bbda:	e7e3      	b.n	800bba4 <__smakebuf_r+0xc>
 800bbdc:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <__smakebuf_r+0x7c>)
 800bbde:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbe0:	89a3      	ldrh	r3, [r4, #12]
 800bbe2:	6020      	str	r0, [r4, #0]
 800bbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	9b00      	ldr	r3, [sp, #0]
 800bbec:	6120      	str	r0, [r4, #16]
 800bbee:	6163      	str	r3, [r4, #20]
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	b15b      	cbz	r3, 800bc0c <__smakebuf_r+0x74>
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbfa:	f000 f917 	bl	800be2c <_isatty_r>
 800bbfe:	b128      	cbz	r0, 800bc0c <__smakebuf_r+0x74>
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	f023 0303 	bic.w	r3, r3, #3
 800bc06:	f043 0301 	orr.w	r3, r3, #1
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	89a0      	ldrh	r0, [r4, #12]
 800bc0e:	4305      	orrs	r5, r0
 800bc10:	81a5      	strh	r5, [r4, #12]
 800bc12:	e7cd      	b.n	800bbb0 <__smakebuf_r+0x18>
 800bc14:	0800b9a9 	.word	0x0800b9a9

0800bc18 <memchr>:
 800bc18:	4603      	mov	r3, r0
 800bc1a:	b510      	push	{r4, lr}
 800bc1c:	b2c9      	uxtb	r1, r1
 800bc1e:	4402      	add	r2, r0
 800bc20:	4293      	cmp	r3, r2
 800bc22:	4618      	mov	r0, r3
 800bc24:	d101      	bne.n	800bc2a <memchr+0x12>
 800bc26:	2000      	movs	r0, #0
 800bc28:	e003      	b.n	800bc32 <memchr+0x1a>
 800bc2a:	7804      	ldrb	r4, [r0, #0]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	428c      	cmp	r4, r1
 800bc30:	d1f6      	bne.n	800bc20 <memchr+0x8>
 800bc32:	bd10      	pop	{r4, pc}

0800bc34 <memmove>:
 800bc34:	4288      	cmp	r0, r1
 800bc36:	b510      	push	{r4, lr}
 800bc38:	eb01 0402 	add.w	r4, r1, r2
 800bc3c:	d902      	bls.n	800bc44 <memmove+0x10>
 800bc3e:	4284      	cmp	r4, r0
 800bc40:	4623      	mov	r3, r4
 800bc42:	d807      	bhi.n	800bc54 <memmove+0x20>
 800bc44:	1e43      	subs	r3, r0, #1
 800bc46:	42a1      	cmp	r1, r4
 800bc48:	d008      	beq.n	800bc5c <memmove+0x28>
 800bc4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc52:	e7f8      	b.n	800bc46 <memmove+0x12>
 800bc54:	4601      	mov	r1, r0
 800bc56:	4402      	add	r2, r0
 800bc58:	428a      	cmp	r2, r1
 800bc5a:	d100      	bne.n	800bc5e <memmove+0x2a>
 800bc5c:	bd10      	pop	{r4, pc}
 800bc5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc66:	e7f7      	b.n	800bc58 <memmove+0x24>

0800bc68 <_realloc_r>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	4607      	mov	r7, r0
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	460e      	mov	r6, r1
 800bc70:	b921      	cbnz	r1, 800bc7c <_realloc_r+0x14>
 800bc72:	4611      	mov	r1, r2
 800bc74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc78:	f7fe be9c 	b.w	800a9b4 <_malloc_r>
 800bc7c:	b922      	cbnz	r2, 800bc88 <_realloc_r+0x20>
 800bc7e:	f7fe fe4d 	bl	800a91c <_free_r>
 800bc82:	4625      	mov	r5, r4
 800bc84:	4628      	mov	r0, r5
 800bc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc88:	f000 f8f2 	bl	800be70 <_malloc_usable_size_r>
 800bc8c:	42a0      	cmp	r0, r4
 800bc8e:	d20f      	bcs.n	800bcb0 <_realloc_r+0x48>
 800bc90:	4621      	mov	r1, r4
 800bc92:	4638      	mov	r0, r7
 800bc94:	f7fe fe8e 	bl	800a9b4 <_malloc_r>
 800bc98:	4605      	mov	r5, r0
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d0f2      	beq.n	800bc84 <_realloc_r+0x1c>
 800bc9e:	4631      	mov	r1, r6
 800bca0:	4622      	mov	r2, r4
 800bca2:	f7fe fe25 	bl	800a8f0 <memcpy>
 800bca6:	4631      	mov	r1, r6
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f7fe fe37 	bl	800a91c <_free_r>
 800bcae:	e7e9      	b.n	800bc84 <_realloc_r+0x1c>
 800bcb0:	4635      	mov	r5, r6
 800bcb2:	e7e7      	b.n	800bc84 <_realloc_r+0x1c>

0800bcb4 <_raise_r>:
 800bcb4:	291f      	cmp	r1, #31
 800bcb6:	b538      	push	{r3, r4, r5, lr}
 800bcb8:	4604      	mov	r4, r0
 800bcba:	460d      	mov	r5, r1
 800bcbc:	d904      	bls.n	800bcc8 <_raise_r+0x14>
 800bcbe:	2316      	movs	r3, #22
 800bcc0:	6003      	str	r3, [r0, #0]
 800bcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcca:	b112      	cbz	r2, 800bcd2 <_raise_r+0x1e>
 800bccc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcd0:	b94b      	cbnz	r3, 800bce6 <_raise_r+0x32>
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f000 f830 	bl	800bd38 <_getpid_r>
 800bcd8:	462a      	mov	r2, r5
 800bcda:	4601      	mov	r1, r0
 800bcdc:	4620      	mov	r0, r4
 800bcde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bce2:	f000 b817 	b.w	800bd14 <_kill_r>
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d00a      	beq.n	800bd00 <_raise_r+0x4c>
 800bcea:	1c59      	adds	r1, r3, #1
 800bcec:	d103      	bne.n	800bcf6 <_raise_r+0x42>
 800bcee:	2316      	movs	r3, #22
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	e7e7      	b.n	800bcc6 <_raise_r+0x12>
 800bcf6:	2400      	movs	r4, #0
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcfe:	4798      	blx	r3
 800bd00:	2000      	movs	r0, #0
 800bd02:	e7e0      	b.n	800bcc6 <_raise_r+0x12>

0800bd04 <raise>:
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <raise+0xc>)
 800bd06:	4601      	mov	r1, r0
 800bd08:	6818      	ldr	r0, [r3, #0]
 800bd0a:	f7ff bfd3 	b.w	800bcb4 <_raise_r>
 800bd0e:	bf00      	nop
 800bd10:	20000024 	.word	0x20000024

0800bd14 <_kill_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	2300      	movs	r3, #0
 800bd18:	4d06      	ldr	r5, [pc, #24]	; (800bd34 <_kill_r+0x20>)
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	4611      	mov	r1, r2
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	f7f7 fe70 	bl	8003a06 <_kill>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	d102      	bne.n	800bd30 <_kill_r+0x1c>
 800bd2a:	682b      	ldr	r3, [r5, #0]
 800bd2c:	b103      	cbz	r3, 800bd30 <_kill_r+0x1c>
 800bd2e:	6023      	str	r3, [r4, #0]
 800bd30:	bd38      	pop	{r3, r4, r5, pc}
 800bd32:	bf00      	nop
 800bd34:	20000448 	.word	0x20000448

0800bd38 <_getpid_r>:
 800bd38:	f7f7 be5e 	b.w	80039f8 <_getpid>

0800bd3c <__sread>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	460c      	mov	r4, r1
 800bd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd44:	f000 f89c 	bl	800be80 <_read_r>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	bfab      	itete	ge
 800bd4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd4e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd50:	181b      	addge	r3, r3, r0
 800bd52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd56:	bfac      	ite	ge
 800bd58:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd5a:	81a3      	strhlt	r3, [r4, #12]
 800bd5c:	bd10      	pop	{r4, pc}

0800bd5e <__swrite>:
 800bd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd62:	461f      	mov	r7, r3
 800bd64:	898b      	ldrh	r3, [r1, #12]
 800bd66:	4605      	mov	r5, r0
 800bd68:	05db      	lsls	r3, r3, #23
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	d505      	bpl.n	800bd7c <__swrite+0x1e>
 800bd70:	2302      	movs	r3, #2
 800bd72:	2200      	movs	r2, #0
 800bd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd78:	f000 f868 	bl	800be4c <_lseek_r>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	4632      	mov	r2, r6
 800bd80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	4628      	mov	r0, r5
 800bd88:	463b      	mov	r3, r7
 800bd8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd92:	f000 b817 	b.w	800bdc4 <_write_r>

0800bd96 <__sseek>:
 800bd96:	b510      	push	{r4, lr}
 800bd98:	460c      	mov	r4, r1
 800bd9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9e:	f000 f855 	bl	800be4c <_lseek_r>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	bf15      	itete	ne
 800bda8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdb2:	81a3      	strheq	r3, [r4, #12]
 800bdb4:	bf18      	it	ne
 800bdb6:	81a3      	strhne	r3, [r4, #12]
 800bdb8:	bd10      	pop	{r4, pc}

0800bdba <__sclose>:
 800bdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdbe:	f000 b813 	b.w	800bde8 <_close_r>
	...

0800bdc4 <_write_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	4608      	mov	r0, r1
 800bdca:	4611      	mov	r1, r2
 800bdcc:	2200      	movs	r2, #0
 800bdce:	4d05      	ldr	r5, [pc, #20]	; (800bde4 <_write_r+0x20>)
 800bdd0:	602a      	str	r2, [r5, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f7f7 fe4e 	bl	8003a74 <_write>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_write_r+0x1e>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_write_r+0x1e>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20000448 	.word	0x20000448

0800bde8 <_close_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	2300      	movs	r3, #0
 800bdec:	4d05      	ldr	r5, [pc, #20]	; (800be04 <_close_r+0x1c>)
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	602b      	str	r3, [r5, #0]
 800bdf4:	f7f7 fe5a 	bl	8003aac <_close>
 800bdf8:	1c43      	adds	r3, r0, #1
 800bdfa:	d102      	bne.n	800be02 <_close_r+0x1a>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	b103      	cbz	r3, 800be02 <_close_r+0x1a>
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	bd38      	pop	{r3, r4, r5, pc}
 800be04:	20000448 	.word	0x20000448

0800be08 <_fstat_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	2300      	movs	r3, #0
 800be0c:	4d06      	ldr	r5, [pc, #24]	; (800be28 <_fstat_r+0x20>)
 800be0e:	4604      	mov	r4, r0
 800be10:	4608      	mov	r0, r1
 800be12:	4611      	mov	r1, r2
 800be14:	602b      	str	r3, [r5, #0]
 800be16:	f7f7 fe54 	bl	8003ac2 <_fstat>
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d102      	bne.n	800be24 <_fstat_r+0x1c>
 800be1e:	682b      	ldr	r3, [r5, #0]
 800be20:	b103      	cbz	r3, 800be24 <_fstat_r+0x1c>
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	bd38      	pop	{r3, r4, r5, pc}
 800be26:	bf00      	nop
 800be28:	20000448 	.word	0x20000448

0800be2c <_isatty_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	2300      	movs	r3, #0
 800be30:	4d05      	ldr	r5, [pc, #20]	; (800be48 <_isatty_r+0x1c>)
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	602b      	str	r3, [r5, #0]
 800be38:	f7f7 fe52 	bl	8003ae0 <_isatty>
 800be3c:	1c43      	adds	r3, r0, #1
 800be3e:	d102      	bne.n	800be46 <_isatty_r+0x1a>
 800be40:	682b      	ldr	r3, [r5, #0]
 800be42:	b103      	cbz	r3, 800be46 <_isatty_r+0x1a>
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	bd38      	pop	{r3, r4, r5, pc}
 800be48:	20000448 	.word	0x20000448

0800be4c <_lseek_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	4604      	mov	r4, r0
 800be50:	4608      	mov	r0, r1
 800be52:	4611      	mov	r1, r2
 800be54:	2200      	movs	r2, #0
 800be56:	4d05      	ldr	r5, [pc, #20]	; (800be6c <_lseek_r+0x20>)
 800be58:	602a      	str	r2, [r5, #0]
 800be5a:	461a      	mov	r2, r3
 800be5c:	f7f7 fe4a 	bl	8003af4 <_lseek>
 800be60:	1c43      	adds	r3, r0, #1
 800be62:	d102      	bne.n	800be6a <_lseek_r+0x1e>
 800be64:	682b      	ldr	r3, [r5, #0]
 800be66:	b103      	cbz	r3, 800be6a <_lseek_r+0x1e>
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
 800be6c:	20000448 	.word	0x20000448

0800be70 <_malloc_usable_size_r>:
 800be70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be74:	1f18      	subs	r0, r3, #4
 800be76:	2b00      	cmp	r3, #0
 800be78:	bfbc      	itt	lt
 800be7a:	580b      	ldrlt	r3, [r1, r0]
 800be7c:	18c0      	addlt	r0, r0, r3
 800be7e:	4770      	bx	lr

0800be80 <_read_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4604      	mov	r4, r0
 800be84:	4608      	mov	r0, r1
 800be86:	4611      	mov	r1, r2
 800be88:	2200      	movs	r2, #0
 800be8a:	4d05      	ldr	r5, [pc, #20]	; (800bea0 <_read_r+0x20>)
 800be8c:	602a      	str	r2, [r5, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	f7f7 fdd3 	bl	8003a3a <_read>
 800be94:	1c43      	adds	r3, r0, #1
 800be96:	d102      	bne.n	800be9e <_read_r+0x1e>
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	b103      	cbz	r3, 800be9e <_read_r+0x1e>
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	bd38      	pop	{r3, r4, r5, pc}
 800bea0:	20000448 	.word	0x20000448

0800bea4 <pow>:
 800bea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea8:	461f      	mov	r7, r3
 800beaa:	4680      	mov	r8, r0
 800beac:	4689      	mov	r9, r1
 800beae:	4616      	mov	r6, r2
 800beb0:	f000 f8a6 	bl	800c000 <__ieee754_pow>
 800beb4:	4b4d      	ldr	r3, [pc, #308]	; (800bfec <pow+0x148>)
 800beb6:	4604      	mov	r4, r0
 800beb8:	f993 3000 	ldrsb.w	r3, [r3]
 800bebc:	460d      	mov	r5, r1
 800bebe:	3301      	adds	r3, #1
 800bec0:	d015      	beq.n	800beee <pow+0x4a>
 800bec2:	4632      	mov	r2, r6
 800bec4:	463b      	mov	r3, r7
 800bec6:	4630      	mov	r0, r6
 800bec8:	4639      	mov	r1, r7
 800beca:	f7f4 fd9f 	bl	8000a0c <__aeabi_dcmpun>
 800bece:	b970      	cbnz	r0, 800beee <pow+0x4a>
 800bed0:	4642      	mov	r2, r8
 800bed2:	464b      	mov	r3, r9
 800bed4:	4640      	mov	r0, r8
 800bed6:	4649      	mov	r1, r9
 800bed8:	f7f4 fd98 	bl	8000a0c <__aeabi_dcmpun>
 800bedc:	2200      	movs	r2, #0
 800bede:	2300      	movs	r3, #0
 800bee0:	b148      	cbz	r0, 800bef6 <pow+0x52>
 800bee2:	4630      	mov	r0, r6
 800bee4:	4639      	mov	r1, r7
 800bee6:	f7f4 fd5f 	bl	80009a8 <__aeabi_dcmpeq>
 800beea:	2800      	cmp	r0, #0
 800beec:	d17b      	bne.n	800bfe6 <pow+0x142>
 800beee:	4620      	mov	r0, r4
 800bef0:	4629      	mov	r1, r5
 800bef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef6:	4640      	mov	r0, r8
 800bef8:	4649      	mov	r1, r9
 800befa:	f7f4 fd55 	bl	80009a8 <__aeabi_dcmpeq>
 800befe:	b1e0      	cbz	r0, 800bf3a <pow+0x96>
 800bf00:	2200      	movs	r2, #0
 800bf02:	2300      	movs	r3, #0
 800bf04:	4630      	mov	r0, r6
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 fd4e 	bl	80009a8 <__aeabi_dcmpeq>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d16a      	bne.n	800bfe6 <pow+0x142>
 800bf10:	4630      	mov	r0, r6
 800bf12:	4639      	mov	r1, r7
 800bf14:	f000 fe39 	bl	800cb8a <finite>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d0e8      	beq.n	800beee <pow+0x4a>
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4630      	mov	r0, r6
 800bf22:	4639      	mov	r1, r7
 800bf24:	f7f4 fd4a 	bl	80009bc <__aeabi_dcmplt>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d0e0      	beq.n	800beee <pow+0x4a>
 800bf2c:	f7fe fca6 	bl	800a87c <__errno>
 800bf30:	2321      	movs	r3, #33	; 0x21
 800bf32:	2400      	movs	r4, #0
 800bf34:	6003      	str	r3, [r0, #0]
 800bf36:	4d2e      	ldr	r5, [pc, #184]	; (800bff0 <pow+0x14c>)
 800bf38:	e7d9      	b.n	800beee <pow+0x4a>
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	f000 fe24 	bl	800cb8a <finite>
 800bf42:	bba8      	cbnz	r0, 800bfb0 <pow+0x10c>
 800bf44:	4640      	mov	r0, r8
 800bf46:	4649      	mov	r1, r9
 800bf48:	f000 fe1f 	bl	800cb8a <finite>
 800bf4c:	b380      	cbz	r0, 800bfb0 <pow+0x10c>
 800bf4e:	4630      	mov	r0, r6
 800bf50:	4639      	mov	r1, r7
 800bf52:	f000 fe1a 	bl	800cb8a <finite>
 800bf56:	b358      	cbz	r0, 800bfb0 <pow+0x10c>
 800bf58:	4622      	mov	r2, r4
 800bf5a:	462b      	mov	r3, r5
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 fd54 	bl	8000a0c <__aeabi_dcmpun>
 800bf64:	b160      	cbz	r0, 800bf80 <pow+0xdc>
 800bf66:	f7fe fc89 	bl	800a87c <__errno>
 800bf6a:	2321      	movs	r3, #33	; 0x21
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	6003      	str	r3, [r0, #0]
 800bf70:	2300      	movs	r3, #0
 800bf72:	4610      	mov	r0, r2
 800bf74:	4619      	mov	r1, r3
 800bf76:	f7f4 fbd9 	bl	800072c <__aeabi_ddiv>
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	460d      	mov	r5, r1
 800bf7e:	e7b6      	b.n	800beee <pow+0x4a>
 800bf80:	f7fe fc7c 	bl	800a87c <__errno>
 800bf84:	2322      	movs	r3, #34	; 0x22
 800bf86:	2200      	movs	r2, #0
 800bf88:	6003      	str	r3, [r0, #0]
 800bf8a:	4649      	mov	r1, r9
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4640      	mov	r0, r8
 800bf90:	f7f4 fd14 	bl	80009bc <__aeabi_dcmplt>
 800bf94:	2400      	movs	r4, #0
 800bf96:	b148      	cbz	r0, 800bfac <pow+0x108>
 800bf98:	4630      	mov	r0, r6
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	f000 fe02 	bl	800cba4 <rint>
 800bfa0:	4632      	mov	r2, r6
 800bfa2:	463b      	mov	r3, r7
 800bfa4:	f7f4 fd00 	bl	80009a8 <__aeabi_dcmpeq>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d0c4      	beq.n	800bf36 <pow+0x92>
 800bfac:	4d11      	ldr	r5, [pc, #68]	; (800bff4 <pow+0x150>)
 800bfae:	e79e      	b.n	800beee <pow+0x4a>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7f4 fcf6 	bl	80009a8 <__aeabi_dcmpeq>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d096      	beq.n	800beee <pow+0x4a>
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	f000 fde1 	bl	800cb8a <finite>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d090      	beq.n	800beee <pow+0x4a>
 800bfcc:	4630      	mov	r0, r6
 800bfce:	4639      	mov	r1, r7
 800bfd0:	f000 fddb 	bl	800cb8a <finite>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d08a      	beq.n	800beee <pow+0x4a>
 800bfd8:	f7fe fc50 	bl	800a87c <__errno>
 800bfdc:	2322      	movs	r3, #34	; 0x22
 800bfde:	2400      	movs	r4, #0
 800bfe0:	2500      	movs	r5, #0
 800bfe2:	6003      	str	r3, [r0, #0]
 800bfe4:	e783      	b.n	800beee <pow+0x4a>
 800bfe6:	2400      	movs	r4, #0
 800bfe8:	4d03      	ldr	r5, [pc, #12]	; (800bff8 <pow+0x154>)
 800bfea:	e780      	b.n	800beee <pow+0x4a>
 800bfec:	20000088 	.word	0x20000088
 800bff0:	fff00000 	.word	0xfff00000
 800bff4:	7ff00000 	.word	0x7ff00000
 800bff8:	3ff00000 	.word	0x3ff00000
 800bffc:	00000000 	.word	0x00000000

0800c000 <__ieee754_pow>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	b093      	sub	sp, #76	; 0x4c
 800c006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c00a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800c00e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c012:	ea55 0302 	orrs.w	r3, r5, r2
 800c016:	4607      	mov	r7, r0
 800c018:	4688      	mov	r8, r1
 800c01a:	f000 84bf 	beq.w	800c99c <__ieee754_pow+0x99c>
 800c01e:	4b7e      	ldr	r3, [pc, #504]	; (800c218 <__ieee754_pow+0x218>)
 800c020:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c024:	429c      	cmp	r4, r3
 800c026:	4689      	mov	r9, r1
 800c028:	4682      	mov	sl, r0
 800c02a:	dc09      	bgt.n	800c040 <__ieee754_pow+0x40>
 800c02c:	d103      	bne.n	800c036 <__ieee754_pow+0x36>
 800c02e:	b978      	cbnz	r0, 800c050 <__ieee754_pow+0x50>
 800c030:	42a5      	cmp	r5, r4
 800c032:	dd02      	ble.n	800c03a <__ieee754_pow+0x3a>
 800c034:	e00c      	b.n	800c050 <__ieee754_pow+0x50>
 800c036:	429d      	cmp	r5, r3
 800c038:	dc02      	bgt.n	800c040 <__ieee754_pow+0x40>
 800c03a:	429d      	cmp	r5, r3
 800c03c:	d10e      	bne.n	800c05c <__ieee754_pow+0x5c>
 800c03e:	b16a      	cbz	r2, 800c05c <__ieee754_pow+0x5c>
 800c040:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c044:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c048:	ea54 030a 	orrs.w	r3, r4, sl
 800c04c:	f000 84a6 	beq.w	800c99c <__ieee754_pow+0x99c>
 800c050:	4872      	ldr	r0, [pc, #456]	; (800c21c <__ieee754_pow+0x21c>)
 800c052:	b013      	add	sp, #76	; 0x4c
 800c054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	f000 bd9e 	b.w	800cb98 <nan>
 800c05c:	f1b9 0f00 	cmp.w	r9, #0
 800c060:	da39      	bge.n	800c0d6 <__ieee754_pow+0xd6>
 800c062:	4b6f      	ldr	r3, [pc, #444]	; (800c220 <__ieee754_pow+0x220>)
 800c064:	429d      	cmp	r5, r3
 800c066:	dc54      	bgt.n	800c112 <__ieee754_pow+0x112>
 800c068:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c06c:	429d      	cmp	r5, r3
 800c06e:	f340 84a6 	ble.w	800c9be <__ieee754_pow+0x9be>
 800c072:	152b      	asrs	r3, r5, #20
 800c074:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c078:	2b14      	cmp	r3, #20
 800c07a:	dd0f      	ble.n	800c09c <__ieee754_pow+0x9c>
 800c07c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c080:	fa22 f103 	lsr.w	r1, r2, r3
 800c084:	fa01 f303 	lsl.w	r3, r1, r3
 800c088:	4293      	cmp	r3, r2
 800c08a:	f040 8498 	bne.w	800c9be <__ieee754_pow+0x9be>
 800c08e:	f001 0101 	and.w	r1, r1, #1
 800c092:	f1c1 0302 	rsb	r3, r1, #2
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	b182      	cbz	r2, 800c0bc <__ieee754_pow+0xbc>
 800c09a:	e05e      	b.n	800c15a <__ieee754_pow+0x15a>
 800c09c:	2a00      	cmp	r2, #0
 800c09e:	d15a      	bne.n	800c156 <__ieee754_pow+0x156>
 800c0a0:	f1c3 0314 	rsb	r3, r3, #20
 800c0a4:	fa45 f103 	asr.w	r1, r5, r3
 800c0a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c0ac:	42ab      	cmp	r3, r5
 800c0ae:	f040 8483 	bne.w	800c9b8 <__ieee754_pow+0x9b8>
 800c0b2:	f001 0101 	and.w	r1, r1, #1
 800c0b6:	f1c1 0302 	rsb	r3, r1, #2
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	4b59      	ldr	r3, [pc, #356]	; (800c224 <__ieee754_pow+0x224>)
 800c0be:	429d      	cmp	r5, r3
 800c0c0:	d130      	bne.n	800c124 <__ieee754_pow+0x124>
 800c0c2:	2e00      	cmp	r6, #0
 800c0c4:	f280 8474 	bge.w	800c9b0 <__ieee754_pow+0x9b0>
 800c0c8:	463a      	mov	r2, r7
 800c0ca:	4643      	mov	r3, r8
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	4955      	ldr	r1, [pc, #340]	; (800c224 <__ieee754_pow+0x224>)
 800c0d0:	f7f4 fb2c 	bl	800072c <__aeabi_ddiv>
 800c0d4:	e02f      	b.n	800c136 <__ieee754_pow+0x136>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	2a00      	cmp	r2, #0
 800c0dc:	d13d      	bne.n	800c15a <__ieee754_pow+0x15a>
 800c0de:	4b4e      	ldr	r3, [pc, #312]	; (800c218 <__ieee754_pow+0x218>)
 800c0e0:	429d      	cmp	r5, r3
 800c0e2:	d1eb      	bne.n	800c0bc <__ieee754_pow+0xbc>
 800c0e4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c0e8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c0ec:	ea53 030a 	orrs.w	r3, r3, sl
 800c0f0:	f000 8454 	beq.w	800c99c <__ieee754_pow+0x99c>
 800c0f4:	4b4c      	ldr	r3, [pc, #304]	; (800c228 <__ieee754_pow+0x228>)
 800c0f6:	429c      	cmp	r4, r3
 800c0f8:	dd0d      	ble.n	800c116 <__ieee754_pow+0x116>
 800c0fa:	2e00      	cmp	r6, #0
 800c0fc:	f280 8454 	bge.w	800c9a8 <__ieee754_pow+0x9a8>
 800c100:	f04f 0b00 	mov.w	fp, #0
 800c104:	f04f 0c00 	mov.w	ip, #0
 800c108:	4658      	mov	r0, fp
 800c10a:	4661      	mov	r1, ip
 800c10c:	b013      	add	sp, #76	; 0x4c
 800c10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c112:	2302      	movs	r3, #2
 800c114:	e7e0      	b.n	800c0d8 <__ieee754_pow+0xd8>
 800c116:	2e00      	cmp	r6, #0
 800c118:	daf2      	bge.n	800c100 <__ieee754_pow+0x100>
 800c11a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800c11e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800c122:	e7f1      	b.n	800c108 <__ieee754_pow+0x108>
 800c124:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800c128:	d108      	bne.n	800c13c <__ieee754_pow+0x13c>
 800c12a:	463a      	mov	r2, r7
 800c12c:	4643      	mov	r3, r8
 800c12e:	4638      	mov	r0, r7
 800c130:	4641      	mov	r1, r8
 800c132:	f7f4 f9d1 	bl	80004d8 <__aeabi_dmul>
 800c136:	4683      	mov	fp, r0
 800c138:	468c      	mov	ip, r1
 800c13a:	e7e5      	b.n	800c108 <__ieee754_pow+0x108>
 800c13c:	4b3b      	ldr	r3, [pc, #236]	; (800c22c <__ieee754_pow+0x22c>)
 800c13e:	429e      	cmp	r6, r3
 800c140:	d10b      	bne.n	800c15a <__ieee754_pow+0x15a>
 800c142:	f1b9 0f00 	cmp.w	r9, #0
 800c146:	db08      	blt.n	800c15a <__ieee754_pow+0x15a>
 800c148:	4638      	mov	r0, r7
 800c14a:	4641      	mov	r1, r8
 800c14c:	b013      	add	sp, #76	; 0x4c
 800c14e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c152:	f000 bc6b 	b.w	800ca2c <__ieee754_sqrt>
 800c156:	2300      	movs	r3, #0
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	4638      	mov	r0, r7
 800c15c:	4641      	mov	r1, r8
 800c15e:	f000 fd11 	bl	800cb84 <fabs>
 800c162:	4683      	mov	fp, r0
 800c164:	468c      	mov	ip, r1
 800c166:	f1ba 0f00 	cmp.w	sl, #0
 800c16a:	d129      	bne.n	800c1c0 <__ieee754_pow+0x1c0>
 800c16c:	b124      	cbz	r4, 800c178 <__ieee754_pow+0x178>
 800c16e:	4b2d      	ldr	r3, [pc, #180]	; (800c224 <__ieee754_pow+0x224>)
 800c170:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800c174:	429a      	cmp	r2, r3
 800c176:	d123      	bne.n	800c1c0 <__ieee754_pow+0x1c0>
 800c178:	2e00      	cmp	r6, #0
 800c17a:	da07      	bge.n	800c18c <__ieee754_pow+0x18c>
 800c17c:	465a      	mov	r2, fp
 800c17e:	4663      	mov	r3, ip
 800c180:	2000      	movs	r0, #0
 800c182:	4928      	ldr	r1, [pc, #160]	; (800c224 <__ieee754_pow+0x224>)
 800c184:	f7f4 fad2 	bl	800072c <__aeabi_ddiv>
 800c188:	4683      	mov	fp, r0
 800c18a:	468c      	mov	ip, r1
 800c18c:	f1b9 0f00 	cmp.w	r9, #0
 800c190:	daba      	bge.n	800c108 <__ieee754_pow+0x108>
 800c192:	9b00      	ldr	r3, [sp, #0]
 800c194:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c198:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c19c:	4323      	orrs	r3, r4
 800c19e:	d108      	bne.n	800c1b2 <__ieee754_pow+0x1b2>
 800c1a0:	465a      	mov	r2, fp
 800c1a2:	4663      	mov	r3, ip
 800c1a4:	4658      	mov	r0, fp
 800c1a6:	4661      	mov	r1, ip
 800c1a8:	f7f3 ffde 	bl	8000168 <__aeabi_dsub>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	e78e      	b.n	800c0d0 <__ieee754_pow+0xd0>
 800c1b2:	9b00      	ldr	r3, [sp, #0]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d1a7      	bne.n	800c108 <__ieee754_pow+0x108>
 800c1b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800c1bc:	469c      	mov	ip, r3
 800c1be:	e7a3      	b.n	800c108 <__ieee754_pow+0x108>
 800c1c0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	930c      	str	r3, [sp, #48]	; 0x30
 800c1c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1ca:	9b00      	ldr	r3, [sp, #0]
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	d104      	bne.n	800c1da <__ieee754_pow+0x1da>
 800c1d0:	463a      	mov	r2, r7
 800c1d2:	4643      	mov	r3, r8
 800c1d4:	4638      	mov	r0, r7
 800c1d6:	4641      	mov	r1, r8
 800c1d8:	e7e6      	b.n	800c1a8 <__ieee754_pow+0x1a8>
 800c1da:	4b15      	ldr	r3, [pc, #84]	; (800c230 <__ieee754_pow+0x230>)
 800c1dc:	429d      	cmp	r5, r3
 800c1de:	f340 80f9 	ble.w	800c3d4 <__ieee754_pow+0x3d4>
 800c1e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c1e6:	429d      	cmp	r5, r3
 800c1e8:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <__ieee754_pow+0x228>)
 800c1ea:	dd09      	ble.n	800c200 <__ieee754_pow+0x200>
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	dc0c      	bgt.n	800c20a <__ieee754_pow+0x20a>
 800c1f0:	2e00      	cmp	r6, #0
 800c1f2:	da85      	bge.n	800c100 <__ieee754_pow+0x100>
 800c1f4:	a306      	add	r3, pc, #24	; (adr r3, 800c210 <__ieee754_pow+0x210>)
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	4610      	mov	r0, r2
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	e798      	b.n	800c132 <__ieee754_pow+0x132>
 800c200:	429c      	cmp	r4, r3
 800c202:	dbf5      	blt.n	800c1f0 <__ieee754_pow+0x1f0>
 800c204:	4b07      	ldr	r3, [pc, #28]	; (800c224 <__ieee754_pow+0x224>)
 800c206:	429c      	cmp	r4, r3
 800c208:	dd14      	ble.n	800c234 <__ieee754_pow+0x234>
 800c20a:	2e00      	cmp	r6, #0
 800c20c:	dcf2      	bgt.n	800c1f4 <__ieee754_pow+0x1f4>
 800c20e:	e777      	b.n	800c100 <__ieee754_pow+0x100>
 800c210:	8800759c 	.word	0x8800759c
 800c214:	7e37e43c 	.word	0x7e37e43c
 800c218:	7ff00000 	.word	0x7ff00000
 800c21c:	0800d103 	.word	0x0800d103
 800c220:	433fffff 	.word	0x433fffff
 800c224:	3ff00000 	.word	0x3ff00000
 800c228:	3fefffff 	.word	0x3fefffff
 800c22c:	3fe00000 	.word	0x3fe00000
 800c230:	41e00000 	.word	0x41e00000
 800c234:	4661      	mov	r1, ip
 800c236:	2200      	movs	r2, #0
 800c238:	4658      	mov	r0, fp
 800c23a:	4b61      	ldr	r3, [pc, #388]	; (800c3c0 <__ieee754_pow+0x3c0>)
 800c23c:	f7f3 ff94 	bl	8000168 <__aeabi_dsub>
 800c240:	a355      	add	r3, pc, #340	; (adr r3, 800c398 <__ieee754_pow+0x398>)
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	4604      	mov	r4, r0
 800c248:	460d      	mov	r5, r1
 800c24a:	f7f4 f945 	bl	80004d8 <__aeabi_dmul>
 800c24e:	a354      	add	r3, pc, #336	; (adr r3, 800c3a0 <__ieee754_pow+0x3a0>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	4606      	mov	r6, r0
 800c256:	460f      	mov	r7, r1
 800c258:	4620      	mov	r0, r4
 800c25a:	4629      	mov	r1, r5
 800c25c:	f7f4 f93c 	bl	80004d8 <__aeabi_dmul>
 800c260:	2200      	movs	r2, #0
 800c262:	4682      	mov	sl, r0
 800c264:	468b      	mov	fp, r1
 800c266:	4620      	mov	r0, r4
 800c268:	4629      	mov	r1, r5
 800c26a:	4b56      	ldr	r3, [pc, #344]	; (800c3c4 <__ieee754_pow+0x3c4>)
 800c26c:	f7f4 f934 	bl	80004d8 <__aeabi_dmul>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	a14c      	add	r1, pc, #304	; (adr r1, 800c3a8 <__ieee754_pow+0x3a8>)
 800c276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c27a:	f7f3 ff75 	bl	8000168 <__aeabi_dsub>
 800c27e:	4622      	mov	r2, r4
 800c280:	462b      	mov	r3, r5
 800c282:	f7f4 f929 	bl	80004d8 <__aeabi_dmul>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	2000      	movs	r0, #0
 800c28c:	494e      	ldr	r1, [pc, #312]	; (800c3c8 <__ieee754_pow+0x3c8>)
 800c28e:	f7f3 ff6b 	bl	8000168 <__aeabi_dsub>
 800c292:	4622      	mov	r2, r4
 800c294:	462b      	mov	r3, r5
 800c296:	4680      	mov	r8, r0
 800c298:	4689      	mov	r9, r1
 800c29a:	4620      	mov	r0, r4
 800c29c:	4629      	mov	r1, r5
 800c29e:	f7f4 f91b 	bl	80004d8 <__aeabi_dmul>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	f7f4 f915 	bl	80004d8 <__aeabi_dmul>
 800c2ae:	a340      	add	r3, pc, #256	; (adr r3, 800c3b0 <__ieee754_pow+0x3b0>)
 800c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b4:	f7f4 f910 	bl	80004d8 <__aeabi_dmul>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4650      	mov	r0, sl
 800c2be:	4659      	mov	r1, fp
 800c2c0:	f7f3 ff52 	bl	8000168 <__aeabi_dsub>
 800c2c4:	f04f 0a00 	mov.w	sl, #0
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	f7f3 ff4a 	bl	800016c <__adddf3>
 800c2d8:	4632      	mov	r2, r6
 800c2da:	463b      	mov	r3, r7
 800c2dc:	4650      	mov	r0, sl
 800c2de:	468b      	mov	fp, r1
 800c2e0:	f7f3 ff42 	bl	8000168 <__aeabi_dsub>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	f7f3 ff3c 	bl	8000168 <__aeabi_dsub>
 800c2f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2f4:	9b00      	ldr	r3, [sp, #0]
 800c2f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	f04f 0600 	mov.w	r6, #0
 800c300:	f04f 0200 	mov.w	r2, #0
 800c304:	bf0c      	ite	eq
 800c306:	4b31      	ldreq	r3, [pc, #196]	; (800c3cc <__ieee754_pow+0x3cc>)
 800c308:	4b2d      	ldrne	r3, [pc, #180]	; (800c3c0 <__ieee754_pow+0x3c0>)
 800c30a:	4604      	mov	r4, r0
 800c30c:	460d      	mov	r5, r1
 800c30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c312:	e9cd 2300 	strd	r2, r3, [sp]
 800c316:	4632      	mov	r2, r6
 800c318:	463b      	mov	r3, r7
 800c31a:	f7f3 ff25 	bl	8000168 <__aeabi_dsub>
 800c31e:	4652      	mov	r2, sl
 800c320:	465b      	mov	r3, fp
 800c322:	f7f4 f8d9 	bl	80004d8 <__aeabi_dmul>
 800c326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c32a:	4680      	mov	r8, r0
 800c32c:	4689      	mov	r9, r1
 800c32e:	4620      	mov	r0, r4
 800c330:	4629      	mov	r1, r5
 800c332:	f7f4 f8d1 	bl	80004d8 <__aeabi_dmul>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	4640      	mov	r0, r8
 800c33c:	4649      	mov	r1, r9
 800c33e:	f7f3 ff15 	bl	800016c <__adddf3>
 800c342:	4632      	mov	r2, r6
 800c344:	463b      	mov	r3, r7
 800c346:	4680      	mov	r8, r0
 800c348:	4689      	mov	r9, r1
 800c34a:	4650      	mov	r0, sl
 800c34c:	4659      	mov	r1, fp
 800c34e:	f7f4 f8c3 	bl	80004d8 <__aeabi_dmul>
 800c352:	4604      	mov	r4, r0
 800c354:	460d      	mov	r5, r1
 800c356:	460b      	mov	r3, r1
 800c358:	4602      	mov	r2, r0
 800c35a:	4649      	mov	r1, r9
 800c35c:	4640      	mov	r0, r8
 800c35e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c362:	f7f3 ff03 	bl	800016c <__adddf3>
 800c366:	4b1a      	ldr	r3, [pc, #104]	; (800c3d0 <__ieee754_pow+0x3d0>)
 800c368:	4682      	mov	sl, r0
 800c36a:	4299      	cmp	r1, r3
 800c36c:	460f      	mov	r7, r1
 800c36e:	460e      	mov	r6, r1
 800c370:	f340 82ed 	ble.w	800c94e <__ieee754_pow+0x94e>
 800c374:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c378:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c37c:	4303      	orrs	r3, r0
 800c37e:	f000 81e7 	beq.w	800c750 <__ieee754_pow+0x750>
 800c382:	a30d      	add	r3, pc, #52	; (adr r3, 800c3b8 <__ieee754_pow+0x3b8>)
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c38c:	f7f4 f8a4 	bl	80004d8 <__aeabi_dmul>
 800c390:	a309      	add	r3, pc, #36	; (adr r3, 800c3b8 <__ieee754_pow+0x3b8>)
 800c392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c396:	e6cc      	b.n	800c132 <__ieee754_pow+0x132>
 800c398:	60000000 	.word	0x60000000
 800c39c:	3ff71547 	.word	0x3ff71547
 800c3a0:	f85ddf44 	.word	0xf85ddf44
 800c3a4:	3e54ae0b 	.word	0x3e54ae0b
 800c3a8:	55555555 	.word	0x55555555
 800c3ac:	3fd55555 	.word	0x3fd55555
 800c3b0:	652b82fe 	.word	0x652b82fe
 800c3b4:	3ff71547 	.word	0x3ff71547
 800c3b8:	8800759c 	.word	0x8800759c
 800c3bc:	7e37e43c 	.word	0x7e37e43c
 800c3c0:	3ff00000 	.word	0x3ff00000
 800c3c4:	3fd00000 	.word	0x3fd00000
 800c3c8:	3fe00000 	.word	0x3fe00000
 800c3cc:	bff00000 	.word	0xbff00000
 800c3d0:	408fffff 	.word	0x408fffff
 800c3d4:	4bd4      	ldr	r3, [pc, #848]	; (800c728 <__ieee754_pow+0x728>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	ea09 0303 	and.w	r3, r9, r3
 800c3dc:	b943      	cbnz	r3, 800c3f0 <__ieee754_pow+0x3f0>
 800c3de:	4658      	mov	r0, fp
 800c3e0:	4661      	mov	r1, ip
 800c3e2:	4bd2      	ldr	r3, [pc, #840]	; (800c72c <__ieee754_pow+0x72c>)
 800c3e4:	f7f4 f878 	bl	80004d8 <__aeabi_dmul>
 800c3e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c3ec:	4683      	mov	fp, r0
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	1523      	asrs	r3, r4, #20
 800c3f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c3f6:	4413      	add	r3, r2
 800c3f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3fa:	4bcd      	ldr	r3, [pc, #820]	; (800c730 <__ieee754_pow+0x730>)
 800c3fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c400:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c404:	429c      	cmp	r4, r3
 800c406:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c40a:	dd08      	ble.n	800c41e <__ieee754_pow+0x41e>
 800c40c:	4bc9      	ldr	r3, [pc, #804]	; (800c734 <__ieee754_pow+0x734>)
 800c40e:	429c      	cmp	r4, r3
 800c410:	f340 819c 	ble.w	800c74c <__ieee754_pow+0x74c>
 800c414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c416:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c41a:	3301      	adds	r3, #1
 800c41c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c41e:	2600      	movs	r6, #0
 800c420:	00f3      	lsls	r3, r6, #3
 800c422:	930d      	str	r3, [sp, #52]	; 0x34
 800c424:	4bc4      	ldr	r3, [pc, #784]	; (800c738 <__ieee754_pow+0x738>)
 800c426:	4658      	mov	r0, fp
 800c428:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c42c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c430:	4629      	mov	r1, r5
 800c432:	461a      	mov	r2, r3
 800c434:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c438:	4623      	mov	r3, r4
 800c43a:	f7f3 fe95 	bl	8000168 <__aeabi_dsub>
 800c43e:	46da      	mov	sl, fp
 800c440:	462b      	mov	r3, r5
 800c442:	4652      	mov	r2, sl
 800c444:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c448:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c44c:	f7f3 fe8e 	bl	800016c <__adddf3>
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	2000      	movs	r0, #0
 800c456:	49b9      	ldr	r1, [pc, #740]	; (800c73c <__ieee754_pow+0x73c>)
 800c458:	f7f4 f968 	bl	800072c <__aeabi_ddiv>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c468:	f7f4 f836 	bl	80004d8 <__aeabi_dmul>
 800c46c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c470:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c474:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c478:	2300      	movs	r3, #0
 800c47a:	2200      	movs	r2, #0
 800c47c:	46ab      	mov	fp, r5
 800c47e:	106d      	asrs	r5, r5, #1
 800c480:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c48a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c48e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c492:	4640      	mov	r0, r8
 800c494:	4649      	mov	r1, r9
 800c496:	4614      	mov	r4, r2
 800c498:	461d      	mov	r5, r3
 800c49a:	f7f4 f81d 	bl	80004d8 <__aeabi_dmul>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c4a6:	f7f3 fe5f 	bl	8000168 <__aeabi_dsub>
 800c4aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	460f      	mov	r7, r1
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	f7f3 fe57 	bl	8000168 <__aeabi_dsub>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4650      	mov	r0, sl
 800c4c0:	4659      	mov	r1, fp
 800c4c2:	f7f3 fe51 	bl	8000168 <__aeabi_dsub>
 800c4c6:	4642      	mov	r2, r8
 800c4c8:	464b      	mov	r3, r9
 800c4ca:	f7f4 f805 	bl	80004d8 <__aeabi_dmul>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	f7f3 fe47 	bl	8000168 <__aeabi_dsub>
 800c4da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4de:	f7f3 fffb 	bl	80004d8 <__aeabi_dmul>
 800c4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	f7f3 fff3 	bl	80004d8 <__aeabi_dmul>
 800c4f2:	a37b      	add	r3, pc, #492	; (adr r3, 800c6e0 <__ieee754_pow+0x6e0>)
 800c4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	f7f3 ffec 	bl	80004d8 <__aeabi_dmul>
 800c500:	a379      	add	r3, pc, #484	; (adr r3, 800c6e8 <__ieee754_pow+0x6e8>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f3 fe31 	bl	800016c <__adddf3>
 800c50a:	4622      	mov	r2, r4
 800c50c:	462b      	mov	r3, r5
 800c50e:	f7f3 ffe3 	bl	80004d8 <__aeabi_dmul>
 800c512:	a377      	add	r3, pc, #476	; (adr r3, 800c6f0 <__ieee754_pow+0x6f0>)
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	f7f3 fe28 	bl	800016c <__adddf3>
 800c51c:	4622      	mov	r2, r4
 800c51e:	462b      	mov	r3, r5
 800c520:	f7f3 ffda 	bl	80004d8 <__aeabi_dmul>
 800c524:	a374      	add	r3, pc, #464	; (adr r3, 800c6f8 <__ieee754_pow+0x6f8>)
 800c526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52a:	f7f3 fe1f 	bl	800016c <__adddf3>
 800c52e:	4622      	mov	r2, r4
 800c530:	462b      	mov	r3, r5
 800c532:	f7f3 ffd1 	bl	80004d8 <__aeabi_dmul>
 800c536:	a372      	add	r3, pc, #456	; (adr r3, 800c700 <__ieee754_pow+0x700>)
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	f7f3 fe16 	bl	800016c <__adddf3>
 800c540:	4622      	mov	r2, r4
 800c542:	462b      	mov	r3, r5
 800c544:	f7f3 ffc8 	bl	80004d8 <__aeabi_dmul>
 800c548:	a36f      	add	r3, pc, #444	; (adr r3, 800c708 <__ieee754_pow+0x708>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	f7f3 fe0d 	bl	800016c <__adddf3>
 800c552:	4622      	mov	r2, r4
 800c554:	4606      	mov	r6, r0
 800c556:	460f      	mov	r7, r1
 800c558:	462b      	mov	r3, r5
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f3 ffbb 	bl	80004d8 <__aeabi_dmul>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f3 ffb5 	bl	80004d8 <__aeabi_dmul>
 800c56e:	4604      	mov	r4, r0
 800c570:	460d      	mov	r5, r1
 800c572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c576:	4642      	mov	r2, r8
 800c578:	464b      	mov	r3, r9
 800c57a:	f7f3 fdf7 	bl	800016c <__adddf3>
 800c57e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c582:	f7f3 ffa9 	bl	80004d8 <__aeabi_dmul>
 800c586:	4622      	mov	r2, r4
 800c588:	462b      	mov	r3, r5
 800c58a:	f7f3 fdef 	bl	800016c <__adddf3>
 800c58e:	4642      	mov	r2, r8
 800c590:	4606      	mov	r6, r0
 800c592:	460f      	mov	r7, r1
 800c594:	464b      	mov	r3, r9
 800c596:	4640      	mov	r0, r8
 800c598:	4649      	mov	r1, r9
 800c59a:	f7f3 ff9d 	bl	80004d8 <__aeabi_dmul>
 800c59e:	2200      	movs	r2, #0
 800c5a0:	4b67      	ldr	r3, [pc, #412]	; (800c740 <__ieee754_pow+0x740>)
 800c5a2:	4682      	mov	sl, r0
 800c5a4:	468b      	mov	fp, r1
 800c5a6:	f7f3 fde1 	bl	800016c <__adddf3>
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	463b      	mov	r3, r7
 800c5ae:	f7f3 fddd 	bl	800016c <__adddf3>
 800c5b2:	9c04      	ldr	r4, [sp, #16]
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	4649      	mov	r1, r9
 800c5be:	f7f3 ff8b 	bl	80004d8 <__aeabi_dmul>
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	4689      	mov	r9, r1
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	4b5c      	ldr	r3, [pc, #368]	; (800c740 <__ieee754_pow+0x740>)
 800c5ce:	f7f3 fdcb 	bl	8000168 <__aeabi_dsub>
 800c5d2:	4652      	mov	r2, sl
 800c5d4:	465b      	mov	r3, fp
 800c5d6:	f7f3 fdc7 	bl	8000168 <__aeabi_dsub>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	460b      	mov	r3, r1
 800c5de:	4630      	mov	r0, r6
 800c5e0:	4639      	mov	r1, r7
 800c5e2:	f7f3 fdc1 	bl	8000168 <__aeabi_dsub>
 800c5e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5ea:	f7f3 ff75 	bl	80004d8 <__aeabi_dmul>
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	460f      	mov	r7, r1
 800c5f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5f8:	462b      	mov	r3, r5
 800c5fa:	f7f3 ff6d 	bl	80004d8 <__aeabi_dmul>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4630      	mov	r0, r6
 800c604:	4639      	mov	r1, r7
 800c606:	f7f3 fdb1 	bl	800016c <__adddf3>
 800c60a:	4606      	mov	r6, r0
 800c60c:	460f      	mov	r7, r1
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4640      	mov	r0, r8
 800c614:	4649      	mov	r1, r9
 800c616:	f7f3 fda9 	bl	800016c <__adddf3>
 800c61a:	a33d      	add	r3, pc, #244	; (adr r3, 800c710 <__ieee754_pow+0x710>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	9c04      	ldr	r4, [sp, #16]
 800c622:	460d      	mov	r5, r1
 800c624:	4620      	mov	r0, r4
 800c626:	f7f3 ff57 	bl	80004d8 <__aeabi_dmul>
 800c62a:	4642      	mov	r2, r8
 800c62c:	464b      	mov	r3, r9
 800c62e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c632:	4620      	mov	r0, r4
 800c634:	4629      	mov	r1, r5
 800c636:	f7f3 fd97 	bl	8000168 <__aeabi_dsub>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4630      	mov	r0, r6
 800c640:	4639      	mov	r1, r7
 800c642:	f7f3 fd91 	bl	8000168 <__aeabi_dsub>
 800c646:	a334      	add	r3, pc, #208	; (adr r3, 800c718 <__ieee754_pow+0x718>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	f7f3 ff44 	bl	80004d8 <__aeabi_dmul>
 800c650:	a333      	add	r3, pc, #204	; (adr r3, 800c720 <__ieee754_pow+0x720>)
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	4606      	mov	r6, r0
 800c658:	460f      	mov	r7, r1
 800c65a:	4620      	mov	r0, r4
 800c65c:	4629      	mov	r1, r5
 800c65e:	f7f3 ff3b 	bl	80004d8 <__aeabi_dmul>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4630      	mov	r0, r6
 800c668:	4639      	mov	r1, r7
 800c66a:	f7f3 fd7f 	bl	800016c <__adddf3>
 800c66e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c670:	4b34      	ldr	r3, [pc, #208]	; (800c744 <__ieee754_pow+0x744>)
 800c672:	4413      	add	r3, r2
 800c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c678:	f7f3 fd78 	bl	800016c <__adddf3>
 800c67c:	4680      	mov	r8, r0
 800c67e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c680:	4689      	mov	r9, r1
 800c682:	f7f3 febf 	bl	8000404 <__aeabi_i2d>
 800c686:	4604      	mov	r4, r0
 800c688:	460d      	mov	r5, r1
 800c68a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c68c:	4b2e      	ldr	r3, [pc, #184]	; (800c748 <__ieee754_pow+0x748>)
 800c68e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c692:	4413      	add	r3, r2
 800c694:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c698:	4642      	mov	r2, r8
 800c69a:	464b      	mov	r3, r9
 800c69c:	f7f3 fd66 	bl	800016c <__adddf3>
 800c6a0:	4632      	mov	r2, r6
 800c6a2:	463b      	mov	r3, r7
 800c6a4:	f7f3 fd62 	bl	800016c <__adddf3>
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	462b      	mov	r3, r5
 800c6ac:	f7f3 fd5e 	bl	800016c <__adddf3>
 800c6b0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	468b      	mov	fp, r1
 800c6bc:	f7f3 fd54 	bl	8000168 <__aeabi_dsub>
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	463b      	mov	r3, r7
 800c6c4:	f7f3 fd50 	bl	8000168 <__aeabi_dsub>
 800c6c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6cc:	f7f3 fd4c 	bl	8000168 <__aeabi_dsub>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	4649      	mov	r1, r9
 800c6d8:	e608      	b.n	800c2ec <__ieee754_pow+0x2ec>
 800c6da:	bf00      	nop
 800c6dc:	f3af 8000 	nop.w
 800c6e0:	4a454eef 	.word	0x4a454eef
 800c6e4:	3fca7e28 	.word	0x3fca7e28
 800c6e8:	93c9db65 	.word	0x93c9db65
 800c6ec:	3fcd864a 	.word	0x3fcd864a
 800c6f0:	a91d4101 	.word	0xa91d4101
 800c6f4:	3fd17460 	.word	0x3fd17460
 800c6f8:	518f264d 	.word	0x518f264d
 800c6fc:	3fd55555 	.word	0x3fd55555
 800c700:	db6fabff 	.word	0xdb6fabff
 800c704:	3fdb6db6 	.word	0x3fdb6db6
 800c708:	33333303 	.word	0x33333303
 800c70c:	3fe33333 	.word	0x3fe33333
 800c710:	e0000000 	.word	0xe0000000
 800c714:	3feec709 	.word	0x3feec709
 800c718:	dc3a03fd 	.word	0xdc3a03fd
 800c71c:	3feec709 	.word	0x3feec709
 800c720:	145b01f5 	.word	0x145b01f5
 800c724:	be3e2fe0 	.word	0xbe3e2fe0
 800c728:	7ff00000 	.word	0x7ff00000
 800c72c:	43400000 	.word	0x43400000
 800c730:	0003988e 	.word	0x0003988e
 800c734:	000bb679 	.word	0x000bb679
 800c738:	0800d298 	.word	0x0800d298
 800c73c:	3ff00000 	.word	0x3ff00000
 800c740:	40080000 	.word	0x40080000
 800c744:	0800d2b8 	.word	0x0800d2b8
 800c748:	0800d2a8 	.word	0x0800d2a8
 800c74c:	2601      	movs	r6, #1
 800c74e:	e667      	b.n	800c420 <__ieee754_pow+0x420>
 800c750:	a39d      	add	r3, pc, #628	; (adr r3, 800c9c8 <__ieee754_pow+0x9c8>)
 800c752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c756:	4640      	mov	r0, r8
 800c758:	4649      	mov	r1, r9
 800c75a:	f7f3 fd07 	bl	800016c <__adddf3>
 800c75e:	4622      	mov	r2, r4
 800c760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c764:	462b      	mov	r3, r5
 800c766:	4650      	mov	r0, sl
 800c768:	4639      	mov	r1, r7
 800c76a:	f7f3 fcfd 	bl	8000168 <__aeabi_dsub>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c776:	f7f4 f93f 	bl	80009f8 <__aeabi_dcmpgt>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	f47f ae01 	bne.w	800c382 <__ieee754_pow+0x382>
 800c780:	4aa5      	ldr	r2, [pc, #660]	; (800ca18 <__ieee754_pow+0xa18>)
 800c782:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c786:	4293      	cmp	r3, r2
 800c788:	f340 8103 	ble.w	800c992 <__ieee754_pow+0x992>
 800c78c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c790:	2000      	movs	r0, #0
 800c792:	151b      	asrs	r3, r3, #20
 800c794:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c798:	fa4a f303 	asr.w	r3, sl, r3
 800c79c:	4433      	add	r3, r6
 800c79e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c7a2:	4f9e      	ldr	r7, [pc, #632]	; (800ca1c <__ieee754_pow+0xa1c>)
 800c7a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c7a8:	4117      	asrs	r7, r2
 800c7aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c7ae:	ea23 0107 	bic.w	r1, r3, r7
 800c7b2:	f1c2 0214 	rsb	r2, r2, #20
 800c7b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	fa4a fa02 	asr.w	sl, sl, r2
 800c7c0:	2e00      	cmp	r6, #0
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	bfb8      	it	lt
 800c7ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800c7ce:	f7f3 fccb 	bl	8000168 <__aeabi_dsub>
 800c7d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7da:	2400      	movs	r4, #0
 800c7dc:	4642      	mov	r2, r8
 800c7de:	464b      	mov	r3, r9
 800c7e0:	f7f3 fcc4 	bl	800016c <__adddf3>
 800c7e4:	a37a      	add	r3, pc, #488	; (adr r3, 800c9d0 <__ieee754_pow+0x9d0>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	460d      	mov	r5, r1
 800c7ee:	f7f3 fe73 	bl	80004d8 <__aeabi_dmul>
 800c7f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	460f      	mov	r7, r1
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7f3 fcb3 	bl	8000168 <__aeabi_dsub>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4640      	mov	r0, r8
 800c808:	4649      	mov	r1, r9
 800c80a:	f7f3 fcad 	bl	8000168 <__aeabi_dsub>
 800c80e:	a372      	add	r3, pc, #456	; (adr r3, 800c9d8 <__ieee754_pow+0x9d8>)
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	f7f3 fe60 	bl	80004d8 <__aeabi_dmul>
 800c818:	a371      	add	r3, pc, #452	; (adr r3, 800c9e0 <__ieee754_pow+0x9e0>)
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	4680      	mov	r8, r0
 800c820:	4689      	mov	r9, r1
 800c822:	4620      	mov	r0, r4
 800c824:	4629      	mov	r1, r5
 800c826:	f7f3 fe57 	bl	80004d8 <__aeabi_dmul>
 800c82a:	4602      	mov	r2, r0
 800c82c:	460b      	mov	r3, r1
 800c82e:	4640      	mov	r0, r8
 800c830:	4649      	mov	r1, r9
 800c832:	f7f3 fc9b 	bl	800016c <__adddf3>
 800c836:	4604      	mov	r4, r0
 800c838:	460d      	mov	r5, r1
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	4630      	mov	r0, r6
 800c840:	4639      	mov	r1, r7
 800c842:	f7f3 fc93 	bl	800016c <__adddf3>
 800c846:	4632      	mov	r2, r6
 800c848:	463b      	mov	r3, r7
 800c84a:	4680      	mov	r8, r0
 800c84c:	4689      	mov	r9, r1
 800c84e:	f7f3 fc8b 	bl	8000168 <__aeabi_dsub>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	4620      	mov	r0, r4
 800c858:	4629      	mov	r1, r5
 800c85a:	f7f3 fc85 	bl	8000168 <__aeabi_dsub>
 800c85e:	4642      	mov	r2, r8
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	464b      	mov	r3, r9
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f3 fe35 	bl	80004d8 <__aeabi_dmul>
 800c86e:	a35e      	add	r3, pc, #376	; (adr r3, 800c9e8 <__ieee754_pow+0x9e8>)
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	4604      	mov	r4, r0
 800c876:	460d      	mov	r5, r1
 800c878:	f7f3 fe2e 	bl	80004d8 <__aeabi_dmul>
 800c87c:	a35c      	add	r3, pc, #368	; (adr r3, 800c9f0 <__ieee754_pow+0x9f0>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	f7f3 fc71 	bl	8000168 <__aeabi_dsub>
 800c886:	4622      	mov	r2, r4
 800c888:	462b      	mov	r3, r5
 800c88a:	f7f3 fe25 	bl	80004d8 <__aeabi_dmul>
 800c88e:	a35a      	add	r3, pc, #360	; (adr r3, 800c9f8 <__ieee754_pow+0x9f8>)
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	f7f3 fc6a 	bl	800016c <__adddf3>
 800c898:	4622      	mov	r2, r4
 800c89a:	462b      	mov	r3, r5
 800c89c:	f7f3 fe1c 	bl	80004d8 <__aeabi_dmul>
 800c8a0:	a357      	add	r3, pc, #348	; (adr r3, 800ca00 <__ieee754_pow+0xa00>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7f3 fc5f 	bl	8000168 <__aeabi_dsub>
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	f7f3 fe13 	bl	80004d8 <__aeabi_dmul>
 800c8b2:	a355      	add	r3, pc, #340	; (adr r3, 800ca08 <__ieee754_pow+0xa08>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 fc58 	bl	800016c <__adddf3>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	462b      	mov	r3, r5
 800c8c0:	f7f3 fe0a 	bl	80004d8 <__aeabi_dmul>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4640      	mov	r0, r8
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	f7f3 fc4c 	bl	8000168 <__aeabi_dsub>
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	460d      	mov	r5, r1
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4640      	mov	r0, r8
 800c8da:	4649      	mov	r1, r9
 800c8dc:	f7f3 fdfc 	bl	80004d8 <__aeabi_dmul>
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	f7f3 fc3b 	bl	8000168 <__aeabi_dsub>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8fa:	f7f3 ff17 	bl	800072c <__aeabi_ddiv>
 800c8fe:	4632      	mov	r2, r6
 800c900:	4604      	mov	r4, r0
 800c902:	460d      	mov	r5, r1
 800c904:	463b      	mov	r3, r7
 800c906:	4640      	mov	r0, r8
 800c908:	4649      	mov	r1, r9
 800c90a:	f7f3 fde5 	bl	80004d8 <__aeabi_dmul>
 800c90e:	4632      	mov	r2, r6
 800c910:	463b      	mov	r3, r7
 800c912:	f7f3 fc2b 	bl	800016c <__adddf3>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4620      	mov	r0, r4
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7f3 fc23 	bl	8000168 <__aeabi_dsub>
 800c922:	4642      	mov	r2, r8
 800c924:	464b      	mov	r3, r9
 800c926:	f7f3 fc1f 	bl	8000168 <__aeabi_dsub>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	2000      	movs	r0, #0
 800c930:	493b      	ldr	r1, [pc, #236]	; (800ca20 <__ieee754_pow+0xa20>)
 800c932:	f7f3 fc19 	bl	8000168 <__aeabi_dsub>
 800c936:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c93a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c93e:	da2b      	bge.n	800c998 <__ieee754_pow+0x998>
 800c940:	4652      	mov	r2, sl
 800c942:	f000 f9b9 	bl	800ccb8 <scalbn>
 800c946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c94a:	f7ff bbf2 	b.w	800c132 <__ieee754_pow+0x132>
 800c94e:	4b35      	ldr	r3, [pc, #212]	; (800ca24 <__ieee754_pow+0xa24>)
 800c950:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c954:	429f      	cmp	r7, r3
 800c956:	f77f af13 	ble.w	800c780 <__ieee754_pow+0x780>
 800c95a:	4b33      	ldr	r3, [pc, #204]	; (800ca28 <__ieee754_pow+0xa28>)
 800c95c:	440b      	add	r3, r1
 800c95e:	4303      	orrs	r3, r0
 800c960:	d00b      	beq.n	800c97a <__ieee754_pow+0x97a>
 800c962:	a32b      	add	r3, pc, #172	; (adr r3, 800ca10 <__ieee754_pow+0xa10>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c96c:	f7f3 fdb4 	bl	80004d8 <__aeabi_dmul>
 800c970:	a327      	add	r3, pc, #156	; (adr r3, 800ca10 <__ieee754_pow+0xa10>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	f7ff bbdc 	b.w	800c132 <__ieee754_pow+0x132>
 800c97a:	4622      	mov	r2, r4
 800c97c:	462b      	mov	r3, r5
 800c97e:	f7f3 fbf3 	bl	8000168 <__aeabi_dsub>
 800c982:	4642      	mov	r2, r8
 800c984:	464b      	mov	r3, r9
 800c986:	f7f4 f82d 	bl	80009e4 <__aeabi_dcmpge>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	f43f aef8 	beq.w	800c780 <__ieee754_pow+0x780>
 800c990:	e7e7      	b.n	800c962 <__ieee754_pow+0x962>
 800c992:	f04f 0a00 	mov.w	sl, #0
 800c996:	e71e      	b.n	800c7d6 <__ieee754_pow+0x7d6>
 800c998:	4621      	mov	r1, r4
 800c99a:	e7d4      	b.n	800c946 <__ieee754_pow+0x946>
 800c99c:	f04f 0b00 	mov.w	fp, #0
 800c9a0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ca20 <__ieee754_pow+0xa20>
 800c9a4:	f7ff bbb0 	b.w	800c108 <__ieee754_pow+0x108>
 800c9a8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c9ac:	f7ff bbac 	b.w	800c108 <__ieee754_pow+0x108>
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	4641      	mov	r1, r8
 800c9b4:	f7ff bbbf 	b.w	800c136 <__ieee754_pow+0x136>
 800c9b8:	9200      	str	r2, [sp, #0]
 800c9ba:	f7ff bb7f 	b.w	800c0bc <__ieee754_pow+0xbc>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f7ff bb69 	b.w	800c096 <__ieee754_pow+0x96>
 800c9c4:	f3af 8000 	nop.w
 800c9c8:	652b82fe 	.word	0x652b82fe
 800c9cc:	3c971547 	.word	0x3c971547
 800c9d0:	00000000 	.word	0x00000000
 800c9d4:	3fe62e43 	.word	0x3fe62e43
 800c9d8:	fefa39ef 	.word	0xfefa39ef
 800c9dc:	3fe62e42 	.word	0x3fe62e42
 800c9e0:	0ca86c39 	.word	0x0ca86c39
 800c9e4:	be205c61 	.word	0xbe205c61
 800c9e8:	72bea4d0 	.word	0x72bea4d0
 800c9ec:	3e663769 	.word	0x3e663769
 800c9f0:	c5d26bf1 	.word	0xc5d26bf1
 800c9f4:	3ebbbd41 	.word	0x3ebbbd41
 800c9f8:	af25de2c 	.word	0xaf25de2c
 800c9fc:	3f11566a 	.word	0x3f11566a
 800ca00:	16bebd93 	.word	0x16bebd93
 800ca04:	3f66c16c 	.word	0x3f66c16c
 800ca08:	5555553e 	.word	0x5555553e
 800ca0c:	3fc55555 	.word	0x3fc55555
 800ca10:	c2f8f359 	.word	0xc2f8f359
 800ca14:	01a56e1f 	.word	0x01a56e1f
 800ca18:	3fe00000 	.word	0x3fe00000
 800ca1c:	000fffff 	.word	0x000fffff
 800ca20:	3ff00000 	.word	0x3ff00000
 800ca24:	4090cbff 	.word	0x4090cbff
 800ca28:	3f6f3400 	.word	0x3f6f3400

0800ca2c <__ieee754_sqrt>:
 800ca2c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800cb80 <__ieee754_sqrt+0x154>
 800ca30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca34:	ea3c 0c01 	bics.w	ip, ip, r1
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	460a      	mov	r2, r1
 800ca40:	4607      	mov	r7, r0
 800ca42:	4604      	mov	r4, r0
 800ca44:	d10e      	bne.n	800ca64 <__ieee754_sqrt+0x38>
 800ca46:	4602      	mov	r2, r0
 800ca48:	f7f3 fd46 	bl	80004d8 <__aeabi_dmul>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4630      	mov	r0, r6
 800ca52:	4629      	mov	r1, r5
 800ca54:	f7f3 fb8a 	bl	800016c <__adddf3>
 800ca58:	4606      	mov	r6, r0
 800ca5a:	460d      	mov	r5, r1
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	4629      	mov	r1, r5
 800ca60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca64:	2900      	cmp	r1, #0
 800ca66:	dc0d      	bgt.n	800ca84 <__ieee754_sqrt+0x58>
 800ca68:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ca6c:	ea5c 0707 	orrs.w	r7, ip, r7
 800ca70:	d0f4      	beq.n	800ca5c <__ieee754_sqrt+0x30>
 800ca72:	b139      	cbz	r1, 800ca84 <__ieee754_sqrt+0x58>
 800ca74:	4602      	mov	r2, r0
 800ca76:	f7f3 fb77 	bl	8000168 <__aeabi_dsub>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	f7f3 fe55 	bl	800072c <__aeabi_ddiv>
 800ca82:	e7e9      	b.n	800ca58 <__ieee754_sqrt+0x2c>
 800ca84:	1512      	asrs	r2, r2, #20
 800ca86:	d074      	beq.n	800cb72 <__ieee754_sqrt+0x146>
 800ca88:	2000      	movs	r0, #0
 800ca8a:	07d5      	lsls	r5, r2, #31
 800ca8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca90:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ca94:	bf5e      	ittt	pl
 800ca96:	0fe3      	lsrpl	r3, r4, #31
 800ca98:	0064      	lslpl	r4, r4, #1
 800ca9a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ca9e:	0fe3      	lsrs	r3, r4, #31
 800caa0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800caa4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800caa8:	2516      	movs	r5, #22
 800caaa:	4601      	mov	r1, r0
 800caac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cab0:	1076      	asrs	r6, r6, #1
 800cab2:	0064      	lsls	r4, r4, #1
 800cab4:	188f      	adds	r7, r1, r2
 800cab6:	429f      	cmp	r7, r3
 800cab8:	bfde      	ittt	le
 800caba:	1bdb      	suble	r3, r3, r7
 800cabc:	18b9      	addle	r1, r7, r2
 800cabe:	1880      	addle	r0, r0, r2
 800cac0:	005b      	lsls	r3, r3, #1
 800cac2:	3d01      	subs	r5, #1
 800cac4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800cac8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cacc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cad0:	d1f0      	bne.n	800cab4 <__ieee754_sqrt+0x88>
 800cad2:	462a      	mov	r2, r5
 800cad4:	f04f 0e20 	mov.w	lr, #32
 800cad8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800cadc:	428b      	cmp	r3, r1
 800cade:	eb07 0c05 	add.w	ip, r7, r5
 800cae2:	dc02      	bgt.n	800caea <__ieee754_sqrt+0xbe>
 800cae4:	d113      	bne.n	800cb0e <__ieee754_sqrt+0xe2>
 800cae6:	45a4      	cmp	ip, r4
 800cae8:	d811      	bhi.n	800cb0e <__ieee754_sqrt+0xe2>
 800caea:	f1bc 0f00 	cmp.w	ip, #0
 800caee:	eb0c 0507 	add.w	r5, ip, r7
 800caf2:	da43      	bge.n	800cb7c <__ieee754_sqrt+0x150>
 800caf4:	2d00      	cmp	r5, #0
 800caf6:	db41      	blt.n	800cb7c <__ieee754_sqrt+0x150>
 800caf8:	f101 0801 	add.w	r8, r1, #1
 800cafc:	1a5b      	subs	r3, r3, r1
 800cafe:	4641      	mov	r1, r8
 800cb00:	45a4      	cmp	ip, r4
 800cb02:	bf88      	it	hi
 800cb04:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cb08:	eba4 040c 	sub.w	r4, r4, ip
 800cb0c:	443a      	add	r2, r7
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	f1be 0e01 	subs.w	lr, lr, #1
 800cb14:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800cb18:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800cb1c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cb20:	d1dc      	bne.n	800cadc <__ieee754_sqrt+0xb0>
 800cb22:	4323      	orrs	r3, r4
 800cb24:	d006      	beq.n	800cb34 <__ieee754_sqrt+0x108>
 800cb26:	1c54      	adds	r4, r2, #1
 800cb28:	bf0b      	itete	eq
 800cb2a:	4672      	moveq	r2, lr
 800cb2c:	3201      	addne	r2, #1
 800cb2e:	3001      	addeq	r0, #1
 800cb30:	f022 0201 	bicne.w	r2, r2, #1
 800cb34:	1043      	asrs	r3, r0, #1
 800cb36:	07c1      	lsls	r1, r0, #31
 800cb38:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cb3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cb40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cb44:	bf48      	it	mi
 800cb46:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800cb50:	e782      	b.n	800ca58 <__ieee754_sqrt+0x2c>
 800cb52:	0ae3      	lsrs	r3, r4, #11
 800cb54:	3915      	subs	r1, #21
 800cb56:	0564      	lsls	r4, r4, #21
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d0fa      	beq.n	800cb52 <__ieee754_sqrt+0x126>
 800cb5c:	02de      	lsls	r6, r3, #11
 800cb5e:	d50a      	bpl.n	800cb76 <__ieee754_sqrt+0x14a>
 800cb60:	f1c2 0020 	rsb	r0, r2, #32
 800cb64:	fa24 f000 	lsr.w	r0, r4, r0
 800cb68:	1e55      	subs	r5, r2, #1
 800cb6a:	4094      	lsls	r4, r2
 800cb6c:	4303      	orrs	r3, r0
 800cb6e:	1b4a      	subs	r2, r1, r5
 800cb70:	e78a      	b.n	800ca88 <__ieee754_sqrt+0x5c>
 800cb72:	4611      	mov	r1, r2
 800cb74:	e7f0      	b.n	800cb58 <__ieee754_sqrt+0x12c>
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	3201      	adds	r2, #1
 800cb7a:	e7ef      	b.n	800cb5c <__ieee754_sqrt+0x130>
 800cb7c:	4688      	mov	r8, r1
 800cb7e:	e7bd      	b.n	800cafc <__ieee754_sqrt+0xd0>
 800cb80:	7ff00000 	.word	0x7ff00000

0800cb84 <fabs>:
 800cb84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cb88:	4770      	bx	lr

0800cb8a <finite>:
 800cb8a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800cb8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cb92:	0fc0      	lsrs	r0, r0, #31
 800cb94:	4770      	bx	lr
	...

0800cb98 <nan>:
 800cb98:	2000      	movs	r0, #0
 800cb9a:	4901      	ldr	r1, [pc, #4]	; (800cba0 <nan+0x8>)
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	7ff80000 	.word	0x7ff80000

0800cba4 <rint>:
 800cba4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800cba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbaa:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800cbae:	2f13      	cmp	r7, #19
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800cbbc:	dc59      	bgt.n	800cc72 <rint+0xce>
 800cbbe:	2f00      	cmp	r7, #0
 800cbc0:	da2a      	bge.n	800cc18 <rint+0x74>
 800cbc2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cbc6:	4301      	orrs	r1, r0
 800cbc8:	d022      	beq.n	800cc10 <rint+0x6c>
 800cbca:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800cbce:	4301      	orrs	r1, r0
 800cbd0:	424d      	negs	r5, r1
 800cbd2:	430d      	orrs	r5, r1
 800cbd4:	4936      	ldr	r1, [pc, #216]	; (800ccb0 <rint+0x10c>)
 800cbd6:	0c5c      	lsrs	r4, r3, #17
 800cbd8:	0b2d      	lsrs	r5, r5, #12
 800cbda:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800cbde:	0464      	lsls	r4, r4, #17
 800cbe0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cbe4:	ea45 0304 	orr.w	r3, r5, r4
 800cbe8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cbec:	4620      	mov	r0, r4
 800cbee:	4629      	mov	r1, r5
 800cbf0:	f7f3 fabc 	bl	800016c <__adddf3>
 800cbf4:	e9cd 0100 	strd	r0, r1, [sp]
 800cbf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbfc:	462b      	mov	r3, r5
 800cbfe:	4622      	mov	r2, r4
 800cc00:	f7f3 fab2 	bl	8000168 <__aeabi_dsub>
 800cc04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc08:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4610      	mov	r0, r2
 800cc12:	4619      	mov	r1, r3
 800cc14:	b003      	add	sp, #12
 800cc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc18:	4926      	ldr	r1, [pc, #152]	; (800ccb4 <rint+0x110>)
 800cc1a:	4139      	asrs	r1, r7
 800cc1c:	ea03 0001 	and.w	r0, r3, r1
 800cc20:	4310      	orrs	r0, r2
 800cc22:	d0f5      	beq.n	800cc10 <rint+0x6c>
 800cc24:	084b      	lsrs	r3, r1, #1
 800cc26:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800cc2a:	ea52 0501 	orrs.w	r5, r2, r1
 800cc2e:	d00c      	beq.n	800cc4a <rint+0xa6>
 800cc30:	ea24 0303 	bic.w	r3, r4, r3
 800cc34:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800cc38:	2f13      	cmp	r7, #19
 800cc3a:	bf0c      	ite	eq
 800cc3c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800cc40:	2500      	movne	r5, #0
 800cc42:	fa44 f707 	asr.w	r7, r4, r7
 800cc46:	ea43 0407 	orr.w	r4, r3, r7
 800cc4a:	4919      	ldr	r1, [pc, #100]	; (800ccb0 <rint+0x10c>)
 800cc4c:	4623      	mov	r3, r4
 800cc4e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800cc52:	462a      	mov	r2, r5
 800cc54:	e9d6 4500 	ldrd	r4, r5, [r6]
 800cc58:	4620      	mov	r0, r4
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	f7f3 fa86 	bl	800016c <__adddf3>
 800cc60:	e9cd 0100 	strd	r0, r1, [sp]
 800cc64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc68:	4622      	mov	r2, r4
 800cc6a:	462b      	mov	r3, r5
 800cc6c:	f7f3 fa7c 	bl	8000168 <__aeabi_dsub>
 800cc70:	e7cc      	b.n	800cc0c <rint+0x68>
 800cc72:	2f33      	cmp	r7, #51	; 0x33
 800cc74:	dd05      	ble.n	800cc82 <rint+0xde>
 800cc76:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800cc7a:	d1c9      	bne.n	800cc10 <rint+0x6c>
 800cc7c:	f7f3 fa76 	bl	800016c <__adddf3>
 800cc80:	e7c4      	b.n	800cc0c <rint+0x68>
 800cc82:	f04f 31ff 	mov.w	r1, #4294967295
 800cc86:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800cc8a:	fa21 f10c 	lsr.w	r1, r1, ip
 800cc8e:	4208      	tst	r0, r1
 800cc90:	d0be      	beq.n	800cc10 <rint+0x6c>
 800cc92:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800cc96:	bf18      	it	ne
 800cc98:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800cc9c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800cca0:	bf1e      	ittt	ne
 800cca2:	ea20 0303 	bicne.w	r3, r0, r3
 800cca6:	fa45 fc0c 	asrne.w	ip, r5, ip
 800ccaa:	ea43 050c 	orrne.w	r5, r3, ip
 800ccae:	e7cc      	b.n	800cc4a <rint+0xa6>
 800ccb0:	0800d2c8 	.word	0x0800d2c8
 800ccb4:	000fffff 	.word	0x000fffff

0800ccb8 <scalbn>:
 800ccb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	460d      	mov	r5, r1
 800ccc2:	4617      	mov	r7, r2
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	b996      	cbnz	r6, 800ccee <scalbn+0x36>
 800ccc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cccc:	4303      	orrs	r3, r0
 800ccce:	d039      	beq.n	800cd44 <scalbn+0x8c>
 800ccd0:	4b35      	ldr	r3, [pc, #212]	; (800cda8 <scalbn+0xf0>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f7f3 fc00 	bl	80004d8 <__aeabi_dmul>
 800ccd8:	4b34      	ldr	r3, [pc, #208]	; (800cdac <scalbn+0xf4>)
 800ccda:	4604      	mov	r4, r0
 800ccdc:	429f      	cmp	r7, r3
 800ccde:	460d      	mov	r5, r1
 800cce0:	da0f      	bge.n	800cd02 <scalbn+0x4a>
 800cce2:	a32d      	add	r3, pc, #180	; (adr r3, 800cd98 <scalbn+0xe0>)
 800cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce8:	f7f3 fbf6 	bl	80004d8 <__aeabi_dmul>
 800ccec:	e006      	b.n	800ccfc <scalbn+0x44>
 800ccee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ccf2:	4296      	cmp	r6, r2
 800ccf4:	d10a      	bne.n	800cd0c <scalbn+0x54>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	f7f3 fa38 	bl	800016c <__adddf3>
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	460d      	mov	r5, r1
 800cd00:	e020      	b.n	800cd44 <scalbn+0x8c>
 800cd02:	460b      	mov	r3, r1
 800cd04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cd08:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cd0c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cd10:	19b9      	adds	r1, r7, r6
 800cd12:	4291      	cmp	r1, r2
 800cd14:	dd0e      	ble.n	800cd34 <scalbn+0x7c>
 800cd16:	a322      	add	r3, pc, #136	; (adr r3, 800cda0 <scalbn+0xe8>)
 800cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cd20:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cd24:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cd28:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cd2c:	4820      	ldr	r0, [pc, #128]	; (800cdb0 <scalbn+0xf8>)
 800cd2e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cd32:	e7d9      	b.n	800cce8 <scalbn+0x30>
 800cd34:	2900      	cmp	r1, #0
 800cd36:	dd08      	ble.n	800cd4a <scalbn+0x92>
 800cd38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cd44:	4620      	mov	r0, r4
 800cd46:	4629      	mov	r1, r5
 800cd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd4a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800cd4e:	da16      	bge.n	800cd7e <scalbn+0xc6>
 800cd50:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cd54:	429f      	cmp	r7, r3
 800cd56:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800cd5a:	dd08      	ble.n	800cd6e <scalbn+0xb6>
 800cd5c:	4c15      	ldr	r4, [pc, #84]	; (800cdb4 <scalbn+0xfc>)
 800cd5e:	4814      	ldr	r0, [pc, #80]	; (800cdb0 <scalbn+0xf8>)
 800cd60:	f363 74df 	bfi	r4, r3, #31, #1
 800cd64:	a30e      	add	r3, pc, #56	; (adr r3, 800cda0 <scalbn+0xe8>)
 800cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6a:	4621      	mov	r1, r4
 800cd6c:	e7bc      	b.n	800cce8 <scalbn+0x30>
 800cd6e:	4c12      	ldr	r4, [pc, #72]	; (800cdb8 <scalbn+0x100>)
 800cd70:	4812      	ldr	r0, [pc, #72]	; (800cdbc <scalbn+0x104>)
 800cd72:	f363 74df 	bfi	r4, r3, #31, #1
 800cd76:	a308      	add	r3, pc, #32	; (adr r3, 800cd98 <scalbn+0xe0>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	e7f5      	b.n	800cd6a <scalbn+0xb2>
 800cd7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd82:	3136      	adds	r1, #54	; 0x36
 800cd84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	4629      	mov	r1, r5
 800cd90:	2200      	movs	r2, #0
 800cd92:	4b0b      	ldr	r3, [pc, #44]	; (800cdc0 <scalbn+0x108>)
 800cd94:	e7a8      	b.n	800cce8 <scalbn+0x30>
 800cd96:	bf00      	nop
 800cd98:	c2f8f359 	.word	0xc2f8f359
 800cd9c:	01a56e1f 	.word	0x01a56e1f
 800cda0:	8800759c 	.word	0x8800759c
 800cda4:	7e37e43c 	.word	0x7e37e43c
 800cda8:	43500000 	.word	0x43500000
 800cdac:	ffff3cb0 	.word	0xffff3cb0
 800cdb0:	8800759c 	.word	0x8800759c
 800cdb4:	7e37e43c 	.word	0x7e37e43c
 800cdb8:	01a56e1f 	.word	0x01a56e1f
 800cdbc:	c2f8f359 	.word	0xc2f8f359
 800cdc0:	3c900000 	.word	0x3c900000

0800cdc4 <_init>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	bf00      	nop
 800cdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdca:	bc08      	pop	{r3}
 800cdcc:	469e      	mov	lr, r3
 800cdce:	4770      	bx	lr

0800cdd0 <_fini>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr
