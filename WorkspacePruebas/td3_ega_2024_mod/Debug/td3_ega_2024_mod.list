
td3_ega_2024_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce94  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800cfa8  0800cfa8  0001cfa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5c8  0800d5c8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d5c8  0800d5c8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d5c8  0800d5c8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5c8  0800d5c8  0001d5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5cc  0800d5cc  0001d5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d5d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000090  0800d65c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800d65c  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b982  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d25  00000000  00000000  0003ba37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003f760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  00040da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c364  00000000  00000000  00042250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ca7  00000000  00000000  0005e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097bf3  00000000  00000000  0007825b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fe4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c80  00000000  00000000  0010fea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cf8c 	.word	0x0800cf8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800cf8c 	.word	0x0800cf8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e016      	b.n	8000ab4 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d20b      	bcs.n	8000aae <GetPage+0x36>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a9c:	029b      	lsls	r3, r3, #10
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d304      	bcc.n	8000aae <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000aaa:	029b      	lsls	r3, r3, #10
 8000aac:	e006      	b.n	8000abc <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab8:	dde5      	ble.n	8000a86 <GetPage+0xe>
	  }
  }

  return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000ada:	f003 fb9b 	bl	8004214 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ffca 	bl	8000a78 <GetPage>
 8000ae4:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000af2:	69f8      	ldr	r0, [r7, #28]
 8000af4:	f7ff ffc0 	bl	8000a78 <GetPage>
 8000af8:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	0a9b      	lsrs	r3, r3, #10
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b12:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b1c:	f003 fc6c 	bl	80043f8 <HAL_FLASHEx_Erase>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d01d      	beq.n	8000b62 <Flash_Write_Data+0x9a>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000b26:	f003 fbab 	bl	8004280 <HAL_FLASH_GetError>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	e020      	b.n	8000b70 <Flash_Write_Data+0xa8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	2002      	movs	r0, #2
 8000b42:	f003 faf7 	bl	8004134 <HAL_FLASH_Program>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <Flash_Write_Data+0x92>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
 8000b58:	e003      	b.n	8000b62 <Flash_Write_Data+0x9a>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000b5a:	f003 fb91 	bl	8004280 <HAL_FLASH_GetError>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e006      	b.n	8000b70 <Flash_Write_Data+0xa8>
	   while (sofar<numberofwords)
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbe1      	blt.n	8000b2e <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000b6a:	f003 fb79 	bl	8004260 <HAL_FLASH_Lock>

	   return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000ac 	.word	0x200000ac

08000b7c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	1e5a      	subs	r2, r3, #1
 8000ba2:	80fa      	strh	r2, [r7, #6]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d000      	beq.n	8000baa <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000ba8:	e7ef      	b.n	8000b8a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000baa:	bf00      	nop
	}
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <HAL_I2C_ListenCpltCallback>:
#ifdef EGB
#include "i2c_slave_bluepill.h"

static uint8_t rxBuffer[rxBUFFER_SIZE], txBuffer[txBUFFER_SIZE];

void i2c_listen_callback(i2c_handler *hi2c) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	i2c_start_listen(hi2c);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f004 f9c8 	bl	8004f54 <HAL_I2C_EnableListen_IT>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_I2C_AddrCallback>:

void i2c_addr_callback(i2c_handler *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	803b      	strh	r3, [r7, #0]
	if(I2C_DIRECTION_TRANSMIT == TransferDirection)
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d106      	bne.n	8000bf0 <HAL_I2C_AddrCallback+0x24>
		i2c_seq_rx(hi2c, rxBuffer, rxBUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);
 8000be2:	2308      	movs	r3, #8
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	4907      	ldr	r1, [pc, #28]	; (8000c04 <HAL_I2C_AddrCallback+0x38>)
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f004 f941 	bl	8004e70 <HAL_I2C_Slave_Seq_Receive_IT>
	else {
		i2c_seq_tx(hi2c, txBuffer, txBUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);
	}
}
 8000bee:	e005      	b.n	8000bfc <HAL_I2C_AddrCallback+0x30>
		i2c_seq_tx(hi2c, txBuffer, txBUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	4904      	ldr	r1, [pc, #16]	; (8000c08 <HAL_I2C_AddrCallback+0x3c>)
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f004 f8c8 	bl	8004d8c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200000bc 	.word	0x200000bc
 8000c08:	2000013c 	.word	0x2000013c

08000c0c <HAL_I2C_SlaveRxCpltCallback>:

void i2c_rx_callback(i2c_handler *hi2c) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	i2c_slave_rx_process(rxBuffer, rxBUFFER_SIZE);
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8000c18:	f002 f8b0 	bl	8002d7c <i2c_slave_rx_process>
	memset(rxBuffer,'\0', rxBUFFER_SIZE);
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8000c22:	f009 ff4b 	bl	800aabc <memset>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000bc 	.word	0x200000bc

08000c34 <HAL_I2C_SlaveTxCpltCallback>:

void i2c_tx_callback(i2c_handler *hi2c) {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <HAL_I2C_ErrorCallback>:

void i2c_err_callback(i2c_handler *hi2c) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	i2c_start_listen(hi2c);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f004 f980 	bl	8004f54 <HAL_I2C_EnableListen_IT>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <i2c_set_txBuffer>:

void i2c_set_txBuffer(uint8_t* data, uint8_t size) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	memset(txBuffer,'\0', txBUFFER_SIZE);
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <i2c_set_txBuffer+0x2c>)
 8000c6e:	f009 ff25 	bl	800aabc <memset>
	memcpy(txBuffer, data, size);
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	461a      	mov	r2, r3
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <i2c_set_txBuffer+0x2c>)
 8000c7a:	f009 ff11 	bl	800aaa0 <memcpy>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000013c 	.word	0x2000013c

08000c8c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000c96:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <HD44780_Init+0xec>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000c9c:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <HD44780_Init+0xf0>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <HD44780_Init+0xf4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <HD44780_Init+0xec>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d907      	bls.n	8000cc0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000cb0:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <HD44780_Init+0xf4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <HD44780_Init+0xf4>)
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e006      	b.n	8000cce <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HD44780_Init+0xf4>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HD44780_Init+0xf4>)
 8000ccc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000cce:	f000 f985 	bl	8000fdc <DelayInit>
  HAL_Delay(50);
 8000cd2:	2032      	movs	r0, #50	; 0x32
 8000cd4:	f003 f8a4 	bl	8003e20 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <HD44780_Init+0xf0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f943 	bl	8000f68 <ExpanderWrite>
  HAL_Delay(1000);
 8000ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce6:	f003 f89b 	bl	8003e20 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000cea:	2030      	movs	r0, #48	; 0x30
 8000cec:	f000 f92b 	bl	8000f46 <Write4Bits>
  DelayUS(4500);
 8000cf0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000cf4:	f000 f99a 	bl	800102c <DelayUS>

  Write4Bits(0x03 << 4);
 8000cf8:	2030      	movs	r0, #48	; 0x30
 8000cfa:	f000 f924 	bl	8000f46 <Write4Bits>
  DelayUS(4500);
 8000cfe:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d02:	f000 f993 	bl	800102c <DelayUS>

  Write4Bits(0x03 << 4);
 8000d06:	2030      	movs	r0, #48	; 0x30
 8000d08:	f000 f91d 	bl	8000f46 <Write4Bits>
  DelayUS(4500);
 8000d0c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d10:	f000 f98c 	bl	800102c <DelayUS>

  Write4Bits(0x02 << 4);
 8000d14:	2020      	movs	r0, #32
 8000d16:	f000 f916 	bl	8000f46 <Write4Bits>
  DelayUS(100);
 8000d1a:	2064      	movs	r0, #100	; 0x64
 8000d1c:	f000 f986 	bl	800102c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HD44780_Init+0xf4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f043 0320 	orr.w	r3, r3, #32
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f8ce 	bl	8000ecc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HD44780_Init+0xf8>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000d36:	f000 f875 	bl	8000e24 <HD44780_Display>
  HD44780_Clear();
 8000d3a:	f000 f82b 	bl	8000d94 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HD44780_Init+0xfc>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HD44780_Init+0xfc>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f8bc 	bl	8000ecc <SendCommand>
  DelayUS(4500);
 8000d54:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d58:	f000 f968 	bl	800102c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000d5c:	490b      	ldr	r1, [pc, #44]	; (8000d8c <HD44780_Init+0x100>)
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f876 	bl	8000e50 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000d64:	490a      	ldr	r1, [pc, #40]	; (8000d90 <HD44780_Init+0x104>)
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 f872 	bl	8000e50 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000d6c:	f000 f81d 	bl	8000daa <HD44780_Home>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000342 	.word	0x20000342
 8000d7c:	20000344 	.word	0x20000344
 8000d80:	20000340 	.word	0x20000340
 8000d84:	20000343 	.word	0x20000343
 8000d88:	20000341 	.word	0x20000341
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008

08000d94 <HD44780_Clear>:

void HD44780_Clear()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f000 f897 	bl	8000ecc <SendCommand>
  DelayUS(2000);
 8000d9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000da2:	f000 f943 	bl	800102c <DelayUS>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HD44780_Home>:

void HD44780_Home()
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f000 f88c 	bl	8000ecc <SendCommand>
  DelayUS(2000);
 8000db4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000db8:	f000 f938 	bl	800102c <DelayUS>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HD44780_SetCursor+0x5c>)
 8000dd2:	f107 0408 	add.w	r4, r7, #8
 8000dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HD44780_SetCursor+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	79ba      	ldrb	r2, [r7, #6]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d303      	bcc.n	8000dee <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HD44780_SetCursor+0x60>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	f107 0218 	add.w	r2, r7, #24
 8000df6:	4413      	add	r3, r2
 8000df8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f85c 	bl	8000ecc <SendCommand>
}
 8000e14:	bf00      	nop
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	0800cfa8 	.word	0x0800cfa8
 8000e20:	20000342 	.word	0x20000342

08000e24 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HD44780_Display+0x28>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HD44780_Display+0x28>)
 8000e34:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HD44780_Display+0x28>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f843 	bl	8000ecc <SendCommand>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000343 	.word	0x20000343

08000e50 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f82a 	bl	8000ecc <SendCommand>
  for (int i=0; i<8; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e009      	b.n	8000e92 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f82e 	bl	8000ee8 <SendChar>
  for (int i=0; i<8; i++)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	ddf2      	ble.n	8000e7e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000eaa:	e006      	b.n	8000eba <HD44780_PrintStr+0x18>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f817 	bl	8000ee8 <SendChar>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f4      	bne.n	8000eac <HD44780_PrintStr+0xa>
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f812 	bl	8000f04 <Send>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f804 	bl	8000f04 <Send>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f023 030f 	bic.w	r3, r3, #15
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f80b 	bl	8000f46 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f30:	7bba      	ldrb	r2, [r7, #14]
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f804 	bl	8000f46 <Write4Bits>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f808 	bl	8000f68 <ExpanderWrite>
  PulseEnable(value);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f820 	bl	8000fa0 <PulseEnable>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <ExpanderWrite+0x30>)
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000f7e:	f107 020f 	add.w	r2, r7, #15
 8000f82:	230a      	movs	r3, #10
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	214e      	movs	r1, #78	; 0x4e
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <ExpanderWrite+0x34>)
 8000f8c:	f003 fe00 	bl	8004b90 <HAL_I2C_Master_Transmit>
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000344 	.word	0x20000344
 8000f9c:	20000354 	.word	0x20000354

08000fa0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ffd8 	bl	8000f68 <ExpanderWrite>
  DelayUS(20);
 8000fb8:	2014      	movs	r0, #20
 8000fba:	f000 f837 	bl	800102c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffce 	bl	8000f68 <ExpanderWrite>
  DelayUS(20);
 8000fcc:	2014      	movs	r0, #20
 8000fce:	f000 f82d 	bl	800102c <DelayUS>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <DelayInit>:

static void DelayInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <DelayInit+0x48>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <DelayInit+0x48>)
 8000fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fea:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <DelayInit+0x48>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <DelayInit+0x48>)
 8000ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <DelayInit+0x4c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <DelayInit+0x4c>)
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <DelayInit+0x4c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <DelayInit+0x4c>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <DelayInit+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001016:	bf00      	nop
  __ASM volatile ("NOP");
 8001018:	bf00      	nop
  __ASM volatile ("NOP");
 800101a:	bf00      	nop
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	e000edf0 	.word	0xe000edf0
 8001028:	e0001000 	.word	0xe0001000

0800102c <DelayUS>:

static void DelayUS(uint32_t us) {
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <DelayUS+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <DelayUS+0x44>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9a      	lsrs	r2, r3, #18
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <DelayUS+0x48>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <DelayUS+0x48>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f6      	bhi.n	800104e <DelayUS+0x22>
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000010 	.word	0x20000010
 8001070:	431bde83 	.word	0x431bde83
 8001074:	e0001000 	.word	0xe0001000

08001078 <MEN_BuildMenu>:
	privilege_t privilege;
	uint32_t state;
}level_t;

void MEN_BuildMenu(level_t *currentNode,uint32_t userNo, char row1[16], char row2[16],level_t *prevNode, level_t *nextNode,level_t *maestraNode, level_t *cancelarNode, level_t *aceptarNode, level_t *menuNode, level_t *lastNode)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	currentNode->userNo = userNo;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	601a      	str	r2, [r3, #0]
    strcpy(currentNode->row1, row1);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3304      	adds	r3, #4
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	f009 fe33 	bl	800acfe <strcpy>
    strcpy(currentNode->row2, row2);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3314      	adds	r3, #20
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fe2d 	bl	800acfe <strcpy>
    currentNode->prev = prevNode;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
    currentNode->next = nextNode;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
    currentNode->maestra = maestraNode;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a3a      	ldr	r2, [r7, #32]
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
    currentNode->cancelar = cancelarNode;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	631a      	str	r2, [r3, #48]	; 0x30
    currentNode->aceptar = aceptarNode;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
    currentNode->menu = menuNode;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
    currentNode->last = lastNode;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010cc:	63da      	str	r2, [r3, #60]	; 0x3c
    currentNode->privilege = USER;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <MEN_Next>:

void MEN_Next(level_t **currentNode)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->next != NULL){
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <MEN_Next+0x2a>
	  level_t *auxLastNode = *currentNode;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->next;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <MEN_Prev>:

void MEN_Prev(level_t **currentNode)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  if((*currentNode)->prev != NULL){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <MEN_Prev+0x2a>
	  level_t *auxLastNode = *currentNode;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->prev;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <MEN_Maestra>:
void MEN_Maestra(level_t **currentNode)
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  if((*currentNode)->maestra != NULL){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00b      	beq.n	8001170 <MEN_Maestra+0x2a>
	  level_t *auxLastNode = *currentNode;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->maestra;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <MEN_Cancelar>:

void MEN_Cancelar(level_t **currentNode)
{
 800117a:	b480      	push	{r7}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	if((*currentNode)->cancelar != NULL){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00b      	beq.n	80011a4 <MEN_Cancelar+0x2a>
	  level_t *auxLastNode = *currentNode;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->cancelar;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <MEN_Menu>:
	  (*currentNode) = (*currentNode)->aceptar;
	  (*currentNode)->last = auxLastNode;
  }
}
void MEN_Menu(level_t **currentNode)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  if((*currentNode)->menu != NULL){
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <MEN_Menu+0x2a>
	  level_t *auxLastNode = *currentNode;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->menu;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <MEN_Last>:

void MEN_Last(level_t **currentNode){
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  level_t *auxLastNode = *currentNode;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60fb      	str	r3, [r7, #12]
  (*currentNode)->last = auxLastNode;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
	...

08001204 <display_Print>:
		bufferAux[(2*j)+1] = 0;
	}
	Flash_Write_Data(PAGE_ADDR_1, bufferAux, FLASH_BUFFER_SIZE);
}

void display_Print(uint8_t accion, char *linea1, char *linea2){
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	73fb      	strb	r3, [r7, #15]
	display_t display;

	display.accion = accion;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	753b      	strb	r3, [r7, #20]
	strcpy(display.linea1, linea1);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	3301      	adds	r3, #1
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	4618      	mov	r0, r3
 8001220:	f009 fd6d 	bl	800acfe <strcpy>
	strcpy(display.linea2, linea2);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	3311      	adds	r3, #17
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	f009 fd66 	bl	800acfe <strcpy>
	xQueueSend(display_q, &display, blockForever);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <display_Print+0x48>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f107 0114 	add.w	r1, r7, #20
 800123a:	2300      	movs	r3, #0
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	f006 ff0a 	bl	8008058 <xQueueGenericSend>
}
 8001244:	bf00      	nop
 8001246:	3738      	adds	r7, #56	; 0x38
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000460 	.word	0x20000460

08001250 <t_Menu>:


//menu----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Menu (void *pvParameters){
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 8001256:	af08      	add	r7, sp, #32
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	6018      	str	r0, [r3, #0]
	struct level claveUsuario1, claveUsuario2, claveUsuario3, claveUsuario4, claveUsuario5, claveUsuario6,
	 	 	 	 	 claveUsuario7, claveUsuario8, claveUsuario9, claveUsuario10,
					claveMaestra, agregarUsuario, borrarUsuario, resetFabrica, menu, *currentM;

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800125c:	2000      	movs	r0, #0
 800125e:	f008 fc53 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8001262:	f8c7 0508 	str.w	r0, [r7, #1288]	; 0x508

	usuario_t usuario[CANT_MAX_USUARIOS];

	uint32_t i;
#ifdef EGB
	vTaskSuspend(tComextern_h);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <t_Menu+0x28>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f007 fcd4 	bl	8008c18 <vTaskSuspend>
#endif
	for(i = 0; i < CANT_MAX_USUARIOS; i++){
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8001276:	e03d      	b.n	80012f4 <t_Menu+0xa4>
 8001278:	200001d4 	.word	0x200001d4
		usuario[i].clave = 0;
 800127c:	f107 021c 	add.w	r2, r7, #28
 8001280:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	4413      	add	r3, r2
 8001288:	3304      	adds	r3, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
		usuario[i].nroUsuario = i;
 800128e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	f107 021c 	add.w	r2, r7, #28
 8001298:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	3301      	adds	r3, #1
 80012a2:	460a      	mov	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
		usuario[i].accion = SCANN;
 80012a6:	f107 021c 	add.w	r2, r7, #28
 80012aa:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]

		xQueueSendToBack(reqAcceso_q, &usuario[i], blockForever);
 80012b6:	4bbf      	ldr	r3, [pc, #764]	; (80015b4 <t_Menu+0x364>)
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	f107 021c 	add.w	r2, r7, #28
 80012be:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	18d1      	adds	r1, r2, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	f006 fec4 	bl	8008058 <xQueueGenericSend>
		xQueueReceive(respAcceso_q, &usuario[i], blockForever);
 80012d0:	4bb9      	ldr	r3, [pc, #740]	; (80015b8 <t_Menu+0x368>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f107 021c 	add.w	r2, r7, #28
 80012d8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	4619      	mov	r1, r3
 80012e6:	f007 f867 	bl	80083b8 <xQueueReceive>
	for(i = 0; i < CANT_MAX_USUARIOS; i++){
 80012ea:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80012f4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012f8:	2b0a      	cmp	r3, #10
 80012fa:	d9bf      	bls.n	800127c <t_Menu+0x2c>
	}

#ifdef EGB
	xQueueReset(reqAcceso_aux_q);
 80012fc:	4baf      	ldr	r3, [pc, #700]	; (80015bc <t_Menu+0x36c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f006 fda6 	bl	8007e54 <xQueueGenericReset>
	xQueueReset(respAcceso_aux_q);
 8001308:	4bad      	ldr	r3, [pc, #692]	; (80015c0 <t_Menu+0x370>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fda0 	bl	8007e54 <xQueueGenericReset>
	xQueueReset(actuador_aux_q);
 8001314:	4bab      	ldr	r3, [pc, #684]	; (80015c4 <t_Menu+0x374>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f006 fd9a 	bl	8007e54 <xQueueGenericReset>
	vTaskResume(tComextern_h);
 8001320:	4ba9      	ldr	r3, [pc, #676]	; (80015c8 <t_Menu+0x378>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f007 fd29 	bl	8008d7c <vTaskResume>
#endif
	//BuildMenu(nodoActual, nroUsuario, imprimir1, imprimir2, funcCancelar, funcAceptar, nodoArriba, nodoAbajo, nodoMaestra, nodoCancelar, nodoAceptar, nodoMenu, lastMenu)

    MEN_BuildMenu(&claveUsuario1, 	USUARIO_1,	"USUARIO 1", ">>>", 	&claveUsuario10, &claveUsuario2, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 800132a:	f507 6098 	add.w	r0, r7, #1216	; 0x4c0
 800132e:	2300      	movs	r3, #0
 8001330:	9306      	str	r3, [sp, #24]
 8001332:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001336:	9305      	str	r3, [sp, #20]
 8001338:	2300      	movs	r3, #0
 800133a:	9304      	str	r3, [sp, #16]
 800133c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001340:	9303      	str	r3, [sp, #12]
 8001342:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4b9d      	ldr	r3, [pc, #628]	; (80015cc <t_Menu+0x37c>)
 8001356:	4a9e      	ldr	r2, [pc, #632]	; (80015d0 <t_Menu+0x380>)
 8001358:	2101      	movs	r1, #1
 800135a:	f7ff fe8d 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario2, 	USUARIO_2,	"USUARIO 2", ">>>", 	&claveUsuario1, &claveUsuario3, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 800135e:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8001362:	2300      	movs	r3, #0
 8001364:	9306      	str	r3, [sp, #24]
 8001366:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800136a:	9305      	str	r3, [sp, #20]
 800136c:	2300      	movs	r3, #0
 800136e:	9304      	str	r3, [sp, #16]
 8001370:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001374:	9303      	str	r3, [sp, #12]
 8001376:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	4b90      	ldr	r3, [pc, #576]	; (80015cc <t_Menu+0x37c>)
 800138a:	4a92      	ldr	r2, [pc, #584]	; (80015d4 <t_Menu+0x384>)
 800138c:	2102      	movs	r1, #2
 800138e:	f7ff fe73 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario3, 	USUARIO_3,	"USUARIO 3", ">>>", 	&claveUsuario2, &claveUsuario4, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001392:	f507 6086 	add.w	r0, r7, #1072	; 0x430
 8001396:	2300      	movs	r3, #0
 8001398:	9306      	str	r3, [sp, #24]
 800139a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800139e:	9305      	str	r3, [sp, #20]
 80013a0:	2300      	movs	r3, #0
 80013a2:	9304      	str	r3, [sp, #16]
 80013a4:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80013a8:	9303      	str	r3, [sp, #12]
 80013aa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4b83      	ldr	r3, [pc, #524]	; (80015cc <t_Menu+0x37c>)
 80013be:	4a86      	ldr	r2, [pc, #536]	; (80015d8 <t_Menu+0x388>)
 80013c0:	2103      	movs	r1, #3
 80013c2:	f7ff fe59 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario4, 	USUARIO_4,	"USUARIO 4", ">>>", 	&claveUsuario3, &claveUsuario5, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80013c6:	f507 707a 	add.w	r0, r7, #1000	; 0x3e8
 80013ca:	2300      	movs	r3, #0
 80013cc:	9306      	str	r3, [sp, #24]
 80013ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013d2:	9305      	str	r3, [sp, #20]
 80013d4:	2300      	movs	r3, #0
 80013d6:	9304      	str	r3, [sp, #16]
 80013d8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80013dc:	9303      	str	r3, [sp, #12]
 80013de:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4b76      	ldr	r3, [pc, #472]	; (80015cc <t_Menu+0x37c>)
 80013f2:	4a7a      	ldr	r2, [pc, #488]	; (80015dc <t_Menu+0x38c>)
 80013f4:	2104      	movs	r1, #4
 80013f6:	f7ff fe3f 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario5, 	USUARIO_5,	"USUARIO 5", ">>>", 	&claveUsuario4, &claveUsuario6, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80013fa:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80013fe:	2300      	movs	r3, #0
 8001400:	9306      	str	r3, [sp, #24]
 8001402:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001406:	9305      	str	r3, [sp, #20]
 8001408:	2300      	movs	r3, #0
 800140a:	9304      	str	r3, [sp, #16]
 800140c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001410:	9303      	str	r3, [sp, #12]
 8001412:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4b69      	ldr	r3, [pc, #420]	; (80015cc <t_Menu+0x37c>)
 8001426:	4a6e      	ldr	r2, [pc, #440]	; (80015e0 <t_Menu+0x390>)
 8001428:	2105      	movs	r1, #5
 800142a:	f7ff fe25 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario6, 	USUARIO_6,	"USUARIO 6", ">>>", 	&claveUsuario5, &claveUsuario7, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 800142e:	f507 7056 	add.w	r0, r7, #856	; 0x358
 8001432:	2300      	movs	r3, #0
 8001434:	9306      	str	r3, [sp, #24]
 8001436:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800143a:	9305      	str	r3, [sp, #20]
 800143c:	2300      	movs	r3, #0
 800143e:	9304      	str	r3, [sp, #16]
 8001440:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001444:	9303      	str	r3, [sp, #12]
 8001446:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4b5c      	ldr	r3, [pc, #368]	; (80015cc <t_Menu+0x37c>)
 800145a:	4a62      	ldr	r2, [pc, #392]	; (80015e4 <t_Menu+0x394>)
 800145c:	2106      	movs	r1, #6
 800145e:	f7ff fe0b 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario7, 	USUARIO_7,	"USUARIO 7", ">>>", 	&claveUsuario6, &claveUsuario8, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001462:	f507 7044 	add.w	r0, r7, #784	; 0x310
 8001466:	2300      	movs	r3, #0
 8001468:	9306      	str	r3, [sp, #24]
 800146a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800146e:	9305      	str	r3, [sp, #20]
 8001470:	2300      	movs	r3, #0
 8001472:	9304      	str	r3, [sp, #16]
 8001474:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001478:	9303      	str	r3, [sp, #12]
 800147a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <t_Menu+0x37c>)
 800148e:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <t_Menu+0x398>)
 8001490:	2107      	movs	r1, #7
 8001492:	f7ff fdf1 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario8, 	USUARIO_8,	"USUARIO 8", ">>>", 	&claveUsuario7, &claveUsuario9, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001496:	f507 7032 	add.w	r0, r7, #712	; 0x2c8
 800149a:	2300      	movs	r3, #0
 800149c:	9306      	str	r3, [sp, #24]
 800149e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014a2:	9305      	str	r3, [sp, #20]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9304      	str	r3, [sp, #16]
 80014a8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80014ac:	9303      	str	r3, [sp, #12]
 80014ae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <t_Menu+0x37c>)
 80014c2:	4a4a      	ldr	r2, [pc, #296]	; (80015ec <t_Menu+0x39c>)
 80014c4:	2108      	movs	r1, #8
 80014c6:	f7ff fdd7 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario9, 	USUARIO_9,	"USUARIO 9", ">>>", 	&claveUsuario8, &claveUsuario1, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80014ca:	f507 7020 	add.w	r0, r7, #640	; 0x280
 80014ce:	2300      	movs	r3, #0
 80014d0:	9306      	str	r3, [sp, #24]
 80014d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014d6:	9305      	str	r3, [sp, #20]
 80014d8:	2300      	movs	r3, #0
 80014da:	9304      	str	r3, [sp, #16]
 80014dc:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80014e0:	9303      	str	r3, [sp, #12]
 80014e2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <t_Menu+0x37c>)
 80014f6:	4a3e      	ldr	r2, [pc, #248]	; (80015f0 <t_Menu+0x3a0>)
 80014f8:	2109      	movs	r1, #9
 80014fa:	f7ff fdbd 	bl	8001078 <MEN_BuildMenu>
    //MEN_BuildMenu(&claveUsuario9, 	USUARIO_9,	"USUARIO 9", ">>>", 	&claveUsuario8, &claveUsuario10, &claveMaestra, &claveUsuario1, 0, &menu, 0);
    MEN_BuildMenu(&claveUsuario10, USUARIO_10, "USUARIO 10", ">>>", 	&claveUsuario9, &claveUsuario1, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80014fe:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8001502:	2300      	movs	r3, #0
 8001504:	9306      	str	r3, [sp, #24]
 8001506:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800150a:	9305      	str	r3, [sp, #20]
 800150c:	2300      	movs	r3, #0
 800150e:	9304      	str	r3, [sp, #16]
 8001510:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001514:	9303      	str	r3, [sp, #12]
 8001516:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <t_Menu+0x37c>)
 800152a:	4a32      	ldr	r2, [pc, #200]	; (80015f4 <t_Menu+0x3a4>)
 800152c:	210a      	movs	r1, #10
 800152e:	f7ff fda3 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&claveMaestra, 			0,"CLAVE MAESTRA", ">>>", 	0, 			   0, 			  0, &claveUsuario1, 0, &menu, 0);
 8001532:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 8001536:	2300      	movs	r3, #0
 8001538:	9306      	str	r3, [sp, #24]
 800153a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800153e:	9305      	str	r3, [sp, #20]
 8001540:	2300      	movs	r3, #0
 8001542:	9304      	str	r3, [sp, #16]
 8001544:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001548:	9303      	str	r3, [sp, #12]
 800154a:	2300      	movs	r3, #0
 800154c:	9302      	str	r3, [sp, #8]
 800154e:	2300      	movs	r3, #0
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	2300      	movs	r3, #0
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <t_Menu+0x37c>)
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <t_Menu+0x3a8>)
 800155a:	2100      	movs	r1, #0
 800155c:	f7ff fd8c 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&menu,		 			0,"MENU CONFIG.", "<<< >>>",&borrarUsuario, &agregarUsuario, 			  0, &claveUsuario1, 0, 	0, 0);
 8001560:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001564:	2300      	movs	r3, #0
 8001566:	9306      	str	r3, [sp, #24]
 8001568:	2300      	movs	r3, #0
 800156a:	9305      	str	r3, [sp, #20]
 800156c:	2300      	movs	r3, #0
 800156e:	9304      	str	r3, [sp, #16]
 8001570:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001574:	9303      	str	r3, [sp, #12]
 8001576:	2300      	movs	r3, #0
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <t_Menu+0x3ac>)
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <t_Menu+0x3b0>)
 800158a:	2100      	movs	r1, #0
 800158c:	f7ff fd74 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&agregarUsuario, 			11,"AGREGAR USUARIO", ">>>",&borrarUsuario, &borrarUsuario, 			  0, &claveUsuario1, 0, 	0, 0);
 8001590:	f507 70d4 	add.w	r0, r7, #424	; 0x1a8
 8001594:	2300      	movs	r3, #0
 8001596:	9306      	str	r3, [sp, #24]
 8001598:	2300      	movs	r3, #0
 800159a:	9305      	str	r3, [sp, #20]
 800159c:	2300      	movs	r3, #0
 800159e:	9304      	str	r3, [sp, #16]
 80015a0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80015a4:	9303      	str	r3, [sp, #12]
 80015a6:	2300      	movs	r3, #0
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	e028      	b.n	8001604 <t_Menu+0x3b4>
 80015b2:	bf00      	nop
 80015b4:	20000350 	.word	0x20000350
 80015b8:	20000458 	.word	0x20000458
 80015bc:	20000404 	.word	0x20000404
 80015c0:	2000045c 	.word	0x2000045c
 80015c4:	200003fc 	.word	0x200003fc
 80015c8:	200001d4 	.word	0x200001d4
 80015cc:	0800cfb8 	.word	0x0800cfb8
 80015d0:	0800cfbc 	.word	0x0800cfbc
 80015d4:	0800cfc8 	.word	0x0800cfc8
 80015d8:	0800cfd4 	.word	0x0800cfd4
 80015dc:	0800cfe0 	.word	0x0800cfe0
 80015e0:	0800cfec 	.word	0x0800cfec
 80015e4:	0800cff8 	.word	0x0800cff8
 80015e8:	0800d004 	.word	0x0800d004
 80015ec:	0800d010 	.word	0x0800d010
 80015f0:	0800d01c 	.word	0x0800d01c
 80015f4:	0800d028 	.word	0x0800d028
 80015f8:	0800d034 	.word	0x0800d034
 80015fc:	0800d044 	.word	0x0800d044
 8001600:	0800d04c 	.word	0x0800d04c
 8001604:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	4bbc      	ldr	r3, [pc, #752]	; (80018fc <t_Menu+0x6ac>)
 800160c:	4abc      	ldr	r2, [pc, #752]	; (8001900 <t_Menu+0x6b0>)
 800160e:	210b      	movs	r1, #11
 8001610:	f7ff fd32 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&borrarUsuario, 			12,"BORRAR USUARIO", ">>>",	&agregarUsuario, &agregarUsuario, 		  0, &claveUsuario1, 0, 	0, 0);
 8001614:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8001618:	2300      	movs	r3, #0
 800161a:	9306      	str	r3, [sp, #24]
 800161c:	2300      	movs	r3, #0
 800161e:	9305      	str	r3, [sp, #20]
 8001620:	2300      	movs	r3, #0
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001628:	9303      	str	r3, [sp, #12]
 800162a:	2300      	movs	r3, #0
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	4bb0      	ldr	r3, [pc, #704]	; (80018fc <t_Menu+0x6ac>)
 800163c:	4ab1      	ldr	r2, [pc, #708]	; (8001904 <t_Menu+0x6b4>)
 800163e:	210c      	movs	r1, #12
 8001640:	f7ff fd1a 	bl	8001078 <MEN_BuildMenu>
    MEN_BuildMenu(&resetFabrica, 			13,"RESET FABRICA", ">>>", 	&agregarUsuario, &borrarUsuario, 			  0, &claveUsuario1, 0, 	0, 0);
 8001644:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001648:	2300      	movs	r3, #0
 800164a:	9306      	str	r3, [sp, #24]
 800164c:	2300      	movs	r3, #0
 800164e:	9305      	str	r3, [sp, #20]
 8001650:	2300      	movs	r3, #0
 8001652:	9304      	str	r3, [sp, #16]
 8001654:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	2300      	movs	r3, #0
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	4ba4      	ldr	r3, [pc, #656]	; (80018fc <t_Menu+0x6ac>)
 800166c:	4aa6      	ldr	r2, [pc, #664]	; (8001908 <t_Menu+0x6b8>)
 800166e:	210d      	movs	r1, #13
 8001670:	f7ff fd02 	bl	8001078 <MEN_BuildMenu>

	char lcdStr[16] = ">>>";
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4aa4      	ldr	r2, [pc, #656]	; (800190c <t_Menu+0x6bc>)
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	3304      	adds	r3, #4
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
	uint32_t claveIngresada = 0, contDig = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
	lcd_init(lcdSize);
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff fafa 	bl	8000c8c <HD44780_Init>

    currentM = &claveUsuario1;
 8001698:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800169c:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80016a0:	601a      	str	r2, [r3, #0]
    MEN_Last(&currentM);
 80016a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fd9b 	bl	80011e2 <MEN_Last>
	display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80016ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1d19      	adds	r1, r3, #4
 80016b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3314      	adds	r3, #20
 80016bc:	461a      	mov	r2, r3
 80016be:	2006      	movs	r0, #6
 80016c0:	f7ff fda0 	bl	8001204 <display_Print>

    tecla_t tecla;

	for(;;){
		xQueueReceive(tecla_q, &tecla, blockForever);
 80016c4:	4b92      	ldr	r3, [pc, #584]	; (8001910 <t_Menu+0x6c0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f107 0108 	add.w	r1, r7, #8
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	4618      	mov	r0, r3
 80016d2:	f006 fe71 	bl	80083b8 <xQueueReceive>
		switch(tecla.accion){
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	3b0a      	subs	r3, #10
 80016de:	2b06      	cmp	r3, #6
 80016e0:	f200 84cd 	bhi.w	800207e <t_Menu+0xe2e>
 80016e4:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <t_Menu+0x49c>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	0800203d 	.word	0x0800203d
 80016f0:	080017b7 	.word	0x080017b7
 80016f4:	08001833 	.word	0x08001833
 80016f8:	08001fd1 	.word	0x08001fd1
 80016fc:	080018ad 	.word	0x080018ad
 8001700:	08001929 	.word	0x08001929
 8001704:	08001709 	.word	0x08001709
			case NUM:

				if(contDig < 8){
 8001708:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 800170c:	2b07      	cmp	r3, #7
 800170e:	d844      	bhi.n	800179a <t_Menu+0x54a>
					claveIngresada += tecla.tecla * pow(10, contDig);
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fe74 	bl	8000404 <__aeabi_i2d>
 800171c:	4604      	mov	r4, r0
 800171e:	460d      	mov	r5, r1
 8001720:	f8d7 050c 	ldr.w	r0, [r7, #1292]	; 0x50c
 8001724:	f7fe fe5e 	bl	80003e4 <__aeabi_ui2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	4978      	ldr	r1, [pc, #480]	; (8001914 <t_Menu+0x6c4>)
 8001732:	f00a fc9d 	bl	800c070 <pow>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fecb 	bl	80004d8 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 800174e:	f7fe fe49 	bl	80003e4 <__aeabi_ui2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4620      	mov	r0, r4
 8001758:	4629      	mov	r1, r5
 800175a:	f7fe fd07 	bl	800016c <__adddf3>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff f967 	bl	8000a38 <__aeabi_d2uiz>
 800176a:	4603      	mov	r3, r0
 800176c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
					contDig++;
 8001770:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8001774:	3301      	adds	r3, #1
 8001776:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
					strcat(lcdStr,"*");
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fce6 	bl	8000150 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4413      	add	r3, r2
 800178e:	4962      	ldr	r1, [pc, #392]	; (8001918 <t_Menu+0x6c8>)
 8001790:	461a      	mov	r2, r3
 8001792:	460b      	mov	r3, r1
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	8013      	strh	r3, [r2, #0]
 8001798:	e004      	b.n	80017a4 <t_Menu+0x554>
				}
				else
					display_Print(TEMPORARY_PRINTING, '\0', "ERROR 5");
 800179a:	4a60      	ldr	r2, [pc, #384]	; (800191c <t_Menu+0x6cc>)
 800179c:	2100      	movs	r1, #0
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff fd30 	bl	8001204 <display_Print>

				display_Print(PRINT, '\0', lcdStr);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	461a      	mov	r2, r3
 80017aa:	2100      	movs	r1, #0
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff fd29 	bl	8001204 <display_Print>
				break;
 80017b2:	f000 bc64 	b.w	800207e <t_Menu+0xe2e>
			case ARRIBA:
				MEN_Prev(&currentM);
 80017b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fca9 	bl	8001112 <MEN_Prev>
				if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR)
 80017c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f107 021c 	add.w	r2, r7, #28
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b0a      	cmp	r3, #10
 80017d4:	d109      	bne.n	80017ea <t_Menu+0x59a>
					display_Print(CLEAR_PRINT, currentM->row1, "Sin asignar");
 80017d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3304      	adds	r3, #4
 80017de:	4a50      	ldr	r2, [pc, #320]	; (8001920 <t_Menu+0x6d0>)
 80017e0:	4619      	mov	r1, r3
 80017e2:	2006      	movs	r0, #6
 80017e4:	f7ff fd0e 	bl	8001204 <display_Print>
 80017e8:	e00b      	b.n	8001802 <t_Menu+0x5b2>
				else display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80017ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	1d19      	adds	r1, r3, #4
 80017f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3314      	adds	r3, #20
 80017fa:	461a      	mov	r2, r3
 80017fc:	2006      	movs	r0, #6
 80017fe:	f7ff fd01 	bl	8001204 <display_Print>
				if(menu.privilege == MASTER)
 8001802:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800180a:	2b01      	cmp	r3, #1
 800180c:	d105      	bne.n	800181a <t_Menu+0x5ca>
					currentM->last = &borrarUsuario;
 800180e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001818:	63da      	str	r2, [r3, #60]	; 0x3c
				reset_values();
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4a38      	ldr	r2, [pc, #224]	; (800190c <t_Menu+0x6bc>)
 800182c:	601a      	str	r2, [r3, #0]
				break;
 800182e:	f000 bc26 	b.w	800207e <t_Menu+0xe2e>

			case ABAJO:
				MEN_Next(&currentM);
 8001832:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fc51 	bl	80010de <MEN_Next>
				if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR)
 800183c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f107 021c 	add.w	r2, r7, #28
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b0a      	cmp	r3, #10
 8001850:	d109      	bne.n	8001866 <t_Menu+0x616>
					display_Print(CLEAR_PRINT, currentM->row1, "Sin asignar");
 8001852:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3304      	adds	r3, #4
 800185a:	4a31      	ldr	r2, [pc, #196]	; (8001920 <t_Menu+0x6d0>)
 800185c:	4619      	mov	r1, r3
 800185e:	2006      	movs	r0, #6
 8001860:	f7ff fcd0 	bl	8001204 <display_Print>
 8001864:	e00b      	b.n	800187e <t_Menu+0x62e>
				else display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001866:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	1d19      	adds	r1, r3, #4
 800186e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3314      	adds	r3, #20
 8001876:	461a      	mov	r2, r3
 8001878:	2006      	movs	r0, #6
 800187a:	f7ff fcc3 	bl	8001204 <display_Print>
				if(menu.privilege == MASTER)
 800187e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001886:	2b01      	cmp	r3, #1
 8001888:	d105      	bne.n	8001896 <t_Menu+0x646>
					currentM->last = &borrarUsuario;
 800188a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001894:	63da      	str	r2, [r3, #60]	; 0x3c
				reset_values();
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4a19      	ldr	r2, [pc, #100]	; (800190c <t_Menu+0x6bc>)
 80018a8:	601a      	str	r2, [r3, #0]
				break;
 80018aa:	e3e8      	b.n	800207e <t_Menu+0xe2e>

			case MENU:
				MEN_Maestra(&currentM);
 80018ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc48 	bl	8001146 <MEN_Maestra>
				currentM->last = &menu;
 80018b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80018c0:	63da      	str	r2, [r3, #60]	; 0x3c
				display_Print(TEMPORARY_PRINTING, "MENU CONFIG.", 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	4917      	ldr	r1, [pc, #92]	; (8001924 <t_Menu+0x6d4>)
 80018c6:	2001      	movs	r0, #1
 80018c8:	f7ff fc9c 	bl	8001204 <display_Print>
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80018cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	1d19      	adds	r1, r3, #4
 80018d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3314      	adds	r3, #20
 80018dc:	461a      	mov	r2, r3
 80018de:	2006      	movs	r0, #6
 80018e0:	f7ff fc90 	bl	8001204 <display_Print>
				reset_values();
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <t_Menu+0x6bc>)
 80018f6:	601a      	str	r2, [r3, #0]
				break;
 80018f8:	e3c1      	b.n	800207e <t_Menu+0xe2e>
 80018fa:	bf00      	nop
 80018fc:	0800cfb8 	.word	0x0800cfb8
 8001900:	0800d05c 	.word	0x0800d05c
 8001904:	0800d06c 	.word	0x0800d06c
 8001908:	0800d07c 	.word	0x0800d07c
 800190c:	003e3e3e 	.word	0x003e3e3e
 8001910:	20000400 	.word	0x20000400
 8001914:	40240000 	.word	0x40240000
 8001918:	0800d08c 	.word	0x0800d08c
 800191c:	0800d090 	.word	0x0800d090
 8001920:	0800d098 	.word	0x0800d098
 8001924:	0800d04c 	.word	0x0800d04c

			case ACEPTAR:

				if((currentM == &claveUsuario1 || currentM == &claveUsuario2 || currentM == &claveUsuario3 || currentM == &claveUsuario4 || currentM == &claveMaestra) && menu.privilege == USER){
 8001928:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001932:	429a      	cmp	r2, r3
 8001934:	d01c      	beq.n	8001970 <t_Menu+0x720>
 8001936:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001940:	429a      	cmp	r2, r3
 8001942:	d015      	beq.n	8001970 <t_Menu+0x720>
 8001944:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800194e:	429a      	cmp	r2, r3
 8001950:	d00e      	beq.n	8001970 <t_Menu+0x720>
 8001952:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800195c:	429a      	cmp	r2, r3
 800195e:	d007      	beq.n	8001970 <t_Menu+0x720>
 8001960:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800196a:	429a      	cmp	r2, r3
 800196c:	f040 818c 	bne.w	8001c88 <t_Menu+0xa38>
 8001970:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 8185 	bne.w	8001c88 <t_Menu+0xa38>
					if(currentM->userNo == 0){
 800197e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 80e3 	bne.w	8001b52 <t_Menu+0x902>
						//clave maestra
						if(contDig != 8) display_Print(TEMPORARY_PRINTING, 0, "Error de digitos");
 800198c:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8001990:	2b08      	cmp	r3, #8
 8001992:	d005      	beq.n	80019a0 <t_Menu+0x750>
 8001994:	4aca      	ldr	r2, [pc, #808]	; (8001cc0 <t_Menu+0xa70>)
 8001996:	2100      	movs	r1, #0
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fc33 	bl	8001204 <display_Print>
					if(currentM->userNo == 0){
 800199e:	e30c      	b.n	8001fba <t_Menu+0xd6a>
						else{
							//cantidad correcta de digitos
							usuario[currentM->userNo].clave = claveIngresada;
 80019a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f107 021c 	add.w	r2, r7, #28
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	3304      	adds	r3, #4
 80019b2:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 80019b6:	601a      	str	r2, [r3, #0]
							usuario[currentM->userNo].accion = READ;
 80019b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f107 021c 	add.w	r2, r7, #28
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	4413      	add	r3, r2
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]

							xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 80019cc:	4bbd      	ldr	r3, [pc, #756]	; (8001cc4 <t_Menu+0xa74>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f107 021c 	add.w	r2, r7, #28
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	18d1      	adds	r1, r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	f006 fb37 	bl	8008058 <xQueueGenericSend>
#ifdef EGB
							xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], nonBlocking);
 80019ea:	4bb7      	ldr	r3, [pc, #732]	; (8001cc8 <t_Menu+0xa78>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f107 021c 	add.w	r2, r7, #28
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	18d1      	adds	r1, r2, r3
 80019fe:	2300      	movs	r3, #0
 8001a00:	2200      	movs	r2, #0
 8001a02:	f006 fb29 	bl	8008058 <xQueueGenericSend>
#endif
							xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 8001a06:	4bb1      	ldr	r3, [pc, #708]	; (8001ccc <t_Menu+0xa7c>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f107 021c 	add.w	r2, r7, #28
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f006 fcca 	bl	80083b8 <xQueueReceive>
							reset_values();
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4aa6      	ldr	r2, [pc, #664]	; (8001cd0 <t_Menu+0xa80>)
 8001a36:	601a      	str	r2, [r3, #0]

							switch(usuario[currentM->userNo].accion){
 8001a38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f107 021c 	add.w	r2, r7, #28
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d061      	beq.n	8001b12 <t_Menu+0x8c2>
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	f300 8114 	bgt.w	8001c7c <t_Menu+0xa2c>
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	d002      	beq.n	8001a5e <t_Menu+0x80e>
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d048      	beq.n	8001aee <t_Menu+0x89e>
									reset_values();
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
									break;

								default:
									break;
 8001a5c:	e10e      	b.n	8001c7c <t_Menu+0xa2c>
									if(currentM->last == &menu){
 8001a5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d11e      	bne.n	8001aac <t_Menu+0x85c>
										MEN_Menu(&currentM);
 8001a6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fb9b 	bl	80011ae <MEN_Menu>
										display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001a78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1d19      	adds	r1, r3, #4
 8001a80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3314      	adds	r3, #20
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2006      	movs	r0, #6
 8001a8c:	f7ff fbba 	bl	8001204 <display_Print>
										menu.privilege = MASTER;
 8001a90:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
										agregarUsuario.state = 0;
 8001a9a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
										borrarUsuario.state = 0;
 8001aa2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
									break;
 8001aaa:	e0ec      	b.n	8001c86 <t_Menu+0xa36>
										display_Print(TEMPORARY_PRINTING, 0, "Acceso maestro");
 8001aac:	4a89      	ldr	r2, [pc, #548]	; (8001cd4 <t_Menu+0xa84>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff fba7 	bl	8001204 <display_Print>
										reset_values();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	4a82      	ldr	r2, [pc, #520]	; (8001cd0 <t_Menu+0xa80>)
 8001ac8:	601a      	str	r2, [r3, #0]
										currentM = &claveUsuario1;
 8001aca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ace:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8001ad2:	601a      	str	r2, [r3, #0]
										display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001ad4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	1d19      	adds	r1, r3, #4
 8001adc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3314      	adds	r3, #20
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2006      	movs	r0, #6
 8001ae8:	f7ff fb8c 	bl	8001204 <display_Print>
									break;
 8001aec:	e0cb      	b.n	8001c86 <t_Menu+0xa36>
									display_Print(TEMPORARY_PRINTING, 0, "Acceso denegado");
 8001aee:	4a7a      	ldr	r2, [pc, #488]	; (8001cd8 <t_Menu+0xa88>)
 8001af0:	2100      	movs	r1, #0
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fb86 	bl	8001204 <display_Print>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001af8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1d19      	adds	r1, r3, #4
 8001b00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3314      	adds	r3, #20
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2006      	movs	r0, #6
 8001b0c:	f7ff fb7a 	bl	8001204 <display_Print>
									break;
 8001b10:	e0b9      	b.n	8001c86 <t_Menu+0xa36>
									display_Print(TEMPORARY_PRINTING_10s, "Espere 10 seg", "Acceso denegado");
 8001b12:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <t_Menu+0xa88>)
 8001b14:	4971      	ldr	r1, [pc, #452]	; (8001cdc <t_Menu+0xa8c>)
 8001b16:	2002      	movs	r0, #2
 8001b18:	f7ff fb74 	bl	8001204 <display_Print>
									vTaskDelay(sleep_10s);
 8001b1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b20:	f007 f846 	bl	8008bb0 <vTaskDelay>
									reset_values();
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <t_Menu+0xa80>)
 8001b36:	601a      	str	r2, [r3, #0]
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001b38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1d19      	adds	r1, r3, #4
 8001b40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3314      	adds	r3, #20
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2006      	movs	r0, #6
 8001b4c:	f7ff fb5a 	bl	8001204 <display_Print>
									break;
 8001b50:	e099      	b.n	8001c86 <t_Menu+0xa36>
							}
						}
					}
					else{
						if(contDig != 4) display_Print(TEMPORARY_PRINTING, 0, "ERROR 3");
 8001b52:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d005      	beq.n	8001b66 <t_Menu+0x916>
 8001b5a:	4a61      	ldr	r2, [pc, #388]	; (8001ce0 <t_Menu+0xa90>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff fb50 	bl	8001204 <display_Print>
					if(currentM->userNo == 0){
 8001b64:	e229      	b.n	8001fba <t_Menu+0xd6a>
						else{
							//cantidad correcta de digitos
							usuario[currentM->userNo].clave = claveIngresada;
 8001b66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f107 021c 	add.w	r2, r7, #28
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8001b7c:	601a      	str	r2, [r3, #0]
							usuario[currentM->userNo].accion = READ;
 8001b7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f107 021c 	add.w	r2, r7, #28
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]

							xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001b92:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <t_Menu+0xa74>)
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f107 021c 	add.w	r2, r7, #28
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	18d1      	adds	r1, r2, r3
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	f006 fa54 	bl	8008058 <xQueueGenericSend>
#ifdef EGB
							xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], nonBlocking);
 8001bb0:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <t_Menu+0xa78>)
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f107 021c 	add.w	r2, r7, #28
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	18d1      	adds	r1, r2, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f006 fa46 	bl	8008058 <xQueueGenericSend>
#endif
							xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <t_Menu+0xa7c>)
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f107 021c 	add.w	r2, r7, #28
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	4619      	mov	r1, r3
 8001be6:	f006 fbe7 	bl	80083b8 <xQueueReceive>
							reset_values();
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4a35      	ldr	r2, [pc, #212]	; (8001cd0 <t_Menu+0xa80>)
 8001bfc:	601a      	str	r2, [r3, #0]

							switch(usuario[currentM->userNo].accion){
 8001bfe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f107 021c 	add.w	r2, r7, #28
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	d035      	beq.n	8001c80 <t_Menu+0xa30>
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	dc35      	bgt.n	8001c84 <t_Menu+0xa34>
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d002      	beq.n	8001c22 <t_Menu+0x9d2>
 8001c1c:	2b06      	cmp	r3, #6
 8001c1e:	d01b      	beq.n	8001c58 <t_Menu+0xa08>
									break;
								case ACC_ERROR:

									break;
								default:
									break;
 8001c20:	e030      	b.n	8001c84 <t_Menu+0xa34>
									display_Print(TEMPORARY_PRINTING, 0, "Acceso permitido");
 8001c22:	4a30      	ldr	r2, [pc, #192]	; (8001ce4 <t_Menu+0xa94>)
 8001c24:	2100      	movs	r1, #0
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff faec 	bl	8001204 <display_Print>
									vTaskDelay(sleep_2s);
 8001c2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c30:	f006 ffbe 	bl	8008bb0 <vTaskDelay>
									MEN_Last(&currentM);
 8001c34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fad2 	bl	80011e2 <MEN_Last>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001c3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1d19      	adds	r1, r3, #4
 8001c46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3314      	adds	r3, #20
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2006      	movs	r0, #6
 8001c52:	f7ff fad7 	bl	8001204 <display_Print>
									break;
 8001c56:	e016      	b.n	8001c86 <t_Menu+0xa36>
									display_Print(TEMPORARY_PRINTING, 0, "Acceso denegado");
 8001c58:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <t_Menu+0xa88>)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f7ff fad1 	bl	8001204 <display_Print>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001c62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1d19      	adds	r1, r3, #4
 8001c6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3314      	adds	r3, #20
 8001c72:	461a      	mov	r2, r3
 8001c74:	2006      	movs	r0, #6
 8001c76:	f7ff fac5 	bl	8001204 <display_Print>
									break;
 8001c7a:	e004      	b.n	8001c86 <t_Menu+0xa36>
									break;
 8001c7c:	bf00      	nop
 8001c7e:	e19c      	b.n	8001fba <t_Menu+0xd6a>
									break;
 8001c80:	bf00      	nop
 8001c82:	e19a      	b.n	8001fba <t_Menu+0xd6a>
									break;
 8001c84:	bf00      	nop
					if(currentM->userNo == 0){
 8001c86:	e198      	b.n	8001fba <t_Menu+0xd6a>
							}
						}
					}
				}
				else if(menu.privilege == MASTER){
 8001c88:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	f040 8192 	bne.w	8001fba <t_Menu+0xd6a>
					if(currentM == &agregarUsuario){
 8001c96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 80ad 	bne.w	8001e00 <t_Menu+0xbb0>
						switch(agregarUsuario.state){
 8001ca6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <t_Menu+0xa66>
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d050      	beq.n	8001d56 <t_Menu+0xb06>
 8001cb4:	e181      	b.n	8001fba <t_Menu+0xd6a>
						case 0:
							i = 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
							while(usuario[i].accion != ACC_SIN_ASIGNAR){
 8001cbc:	e024      	b.n	8001d08 <t_Menu+0xab8>
 8001cbe:	bf00      	nop
 8001cc0:	0800d0a4 	.word	0x0800d0a4
 8001cc4:	20000350 	.word	0x20000350
 8001cc8:	20000404 	.word	0x20000404
 8001ccc:	20000458 	.word	0x20000458
 8001cd0:	003e3e3e 	.word	0x003e3e3e
 8001cd4:	0800d0b8 	.word	0x0800d0b8
 8001cd8:	0800d0c8 	.word	0x0800d0c8
 8001cdc:	0800d0d8 	.word	0x0800d0d8
 8001ce0:	0800d0e8 	.word	0x0800d0e8
 8001ce4:	0800d0f0 	.word	0x0800d0f0
								if(i < CANT_MAX_USUARIOS) i++;
 8001ce8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001cec:	2b0a      	cmp	r3, #10
 8001cee:	d805      	bhi.n	8001cfc <t_Menu+0xaac>
 8001cf0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8001cfa:	e005      	b.n	8001d08 <t_Menu+0xab8>
								else {
									display_Print(TEMPORARY_PRINTING, 0, "Sin espacio");
 8001cfc:	4ac5      	ldr	r2, [pc, #788]	; (8002014 <t_Menu+0xdc4>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff fa7f 	bl	8001204 <display_Print>
									break;
 8001d06:	e008      	b.n	8001d1a <t_Menu+0xaca>
							while(usuario[i].accion != ACC_SIN_ASIGNAR){
 8001d08:	f107 021c 	add.w	r2, r7, #28
 8001d0c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	d1e6      	bne.n	8001ce8 <t_Menu+0xa98>
								}
							}
							if(usuario[i].accion == ACC_SIN_ASIGNAR){
 8001d1a:	f107 021c 	add.w	r2, r7, #28
 8001d1e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b0a      	cmp	r3, #10
 8001d2a:	f040 8145 	bne.w	8001fb8 <t_Menu+0xd68>
								sprintf(lcdStr, "Usuario %u libre", i);
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 8001d36:	49b8      	ldr	r1, [pc, #736]	; (8002018 <t_Menu+0xdc8>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f008 ffb1 	bl	800aca0 <siprintf>
								display_Print(TEMPORARY_PRINTING, 0, lcdStr);
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	461a      	mov	r2, r3
 8001d44:	2100      	movs	r1, #0
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff fa5c 	bl	8001204 <display_Print>
								agregarUsuario.state = 1;
 8001d4c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d50:	2201      	movs	r2, #1
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
							}
							break;
 8001d54:	e130      	b.n	8001fb8 <t_Menu+0xd68>
						case 1:
							usuario[i].clave = claveIngresada;
 8001d56:	f107 021c 	add.w	r2, r7, #28
 8001d5a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	3304      	adds	r3, #4
 8001d64:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8001d68:	601a      	str	r2, [r3, #0]
							usuario[i].accion = WRITE;
 8001d6a:	f107 021c 	add.w	r2, r7, #28
 8001d6e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	4413      	add	r3, r2
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
							usuario[i].nroUsuario = i;
 8001d7a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d7e:	b2d9      	uxtb	r1, r3
 8001d80:	f107 021c 	add.w	r2, r7, #28
 8001d84:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	460a      	mov	r2, r1
 8001d90:	701a      	strb	r2, [r3, #0]

							xQueueSendToBack(reqAcceso_q, &usuario[i], blockForever);
 8001d92:	4ba2      	ldr	r3, [pc, #648]	; (800201c <t_Menu+0xdcc>)
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	f107 021c 	add.w	r2, r7, #28
 8001d9a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	18d1      	adds	r1, r2, r3
 8001da2:	2300      	movs	r3, #0
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	f006 f956 	bl	8008058 <xQueueGenericSend>
							sprintf(lcdStr, "Usuario %u", i);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 8001db4:	499a      	ldr	r1, [pc, #616]	; (8002020 <t_Menu+0xdd0>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f008 ff72 	bl	800aca0 <siprintf>
							display_Print(TEMPORARY_PRINTING, lcdStr, "Guardado");
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4a98      	ldr	r2, [pc, #608]	; (8002024 <t_Menu+0xdd4>)
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff fa1d 	bl	8001204 <display_Print>
						    currentM = &claveUsuario1;
 8001dca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dce:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8001dd2:	601a      	str	r2, [r3, #0]
							display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001dd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1d19      	adds	r1, r3, #4
 8001ddc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3314      	adds	r3, #20
 8001de4:	461a      	mov	r2, r3
 8001de6:	2006      	movs	r0, #6
 8001de8:	f7ff fa0c 	bl	8001204 <display_Print>
							agregarUsuario.state = 0;
 8001dec:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
							menu.privilege = USER;
 8001df4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
							break;
 8001dfe:	e0dc      	b.n	8001fba <t_Menu+0xd6a>
						}

					}
					else if(currentM == &borrarUsuario){
 8001e00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d121      	bne.n	8001e52 <t_Menu+0xc02>
						currentM = &claveUsuario1;
 8001e0e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e12:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8001e16:	601a      	str	r2, [r3, #0]
						display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001e18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1d19      	adds	r1, r3, #4
 8001e20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3314      	adds	r3, #20
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2006      	movs	r0, #6
 8001e2c:	f7ff f9ea 	bl	8001204 <display_Print>
						display_Print(TEMPORARY_PRINTING, currentM->row1, currentM->row2);
 8001e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	1d19      	adds	r1, r3, #4
 8001e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3314      	adds	r3, #20
 8001e40:	461a      	mov	r2, r3
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff f9de 	bl	8001204 <display_Print>
						borrarUsuario.state = 1;
 8001e48:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e50:	e0b3      	b.n	8001fba <t_Menu+0xd6a>
					}
					else if(currentM->last == &borrarUsuario){
 8001e52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e5a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	f040 80ab 	bne.w	8001fba <t_Menu+0xd6a>
						usuario[currentM->userNo].clave = 0;
 8001e64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f107 021c 	add.w	r2, r7, #28
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
						usuario[currentM->userNo].accion = WRITE;
 8001e7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f107 021c 	add.w	r2, r7, #28
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4413      	add	r3, r2
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]

						xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001e8e:	4b63      	ldr	r3, [pc, #396]	; (800201c <t_Menu+0xdcc>)
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f107 021c 	add.w	r2, r7, #28
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	18d1      	adds	r1, r2, r3
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	f006 f8d6 	bl	8008058 <xQueueGenericSend>
#ifdef EGB
						xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], nonBlocking);
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <t_Menu+0xdd8>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f107 021c 	add.w	r2, r7, #28
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	18d1      	adds	r1, r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f006 f8c8 	bl	8008058 <xQueueGenericSend>
#endif
						usuario[currentM->userNo].accion = SCANN;
 8001ec8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f107 021c 	add.w	r2, r7, #28
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	4413      	add	r3, r2
 8001ed8:	2202      	movs	r2, #2
 8001eda:	701a      	strb	r2, [r3, #0]

						xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <t_Menu+0xdcc>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f107 021c 	add.w	r2, r7, #28
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	18d1      	adds	r1, r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef6:	f006 f8af 	bl	8008058 <xQueueGenericSend>
#ifdef EGB
						xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], nonBlocking);
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <t_Menu+0xdd8>)
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f107 021c 	add.w	r2, r7, #28
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	18d1      	adds	r1, r2, r3
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2200      	movs	r2, #0
 8001f12:	f006 f8a1 	bl	8008058 <xQueueGenericSend>
#endif
						xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 8001f16:	4b45      	ldr	r3, [pc, #276]	; (800202c <t_Menu+0xddc>)
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f107 021c 	add.w	r2, r7, #28
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	4413      	add	r3, r2
 8001f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f006 fa42 	bl	80083b8 <xQueueReceive>

						if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR){
 8001f34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f107 021c 	add.w	r2, r7, #28
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b0a      	cmp	r3, #10
 8001f48:	d111      	bne.n	8001f6e <t_Menu+0xd1e>
							sprintf(lcdStr, "Usuario %u", currentM->userNo);
 8001f4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4932      	ldr	r1, [pc, #200]	; (8002020 <t_Menu+0xdd0>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f008 fea1 	bl	800aca0 <siprintf>
							display_Print(TEMPORARY_PRINTING, lcdStr, "Borrado");
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4a33      	ldr	r2, [pc, #204]	; (8002030 <t_Menu+0xde0>)
 8001f64:	4619      	mov	r1, r3
 8001f66:	2001      	movs	r0, #1
 8001f68:	f7ff f94c 	bl	8001204 <display_Print>
 8001f6c:	e004      	b.n	8001f78 <t_Menu+0xd28>
						}
						else
							display_Print(TEMPORARY_PRINTING, 0, "Error en borrado");
 8001f6e:	4a31      	ldr	r2, [pc, #196]	; (8002034 <t_Menu+0xde4>)
 8001f70:	2100      	movs	r1, #0
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7ff f946 	bl	8001204 <display_Print>
					    currentM = &claveUsuario1;
 8001f78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f7c:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8001f80:	601a      	str	r2, [r3, #0]
						display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001f82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1d19      	adds	r1, r3, #4
 8001f8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3314      	adds	r3, #20
 8001f92:	461a      	mov	r2, r3
 8001f94:	2006      	movs	r0, #6
 8001f96:	f7ff f935 	bl	8001204 <display_Print>

						borrarUsuario.state = 0;
 8001f9a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
						menu.privilege = USER;
 8001fa2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
						MEN_Last(&currentM);
 8001fac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f916 	bl	80011e2 <MEN_Last>
 8001fb6:	e000      	b.n	8001fba <t_Menu+0xd6a>
							break;
 8001fb8:	bf00      	nop
					}
				}
				reset_values();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <t_Menu+0xde8>)
 8001fcc:	601a      	str	r2, [r3, #0]
				break;
 8001fce:	e056      	b.n	800207e <t_Menu+0xe2e>
			case CANCELAR:
				MEN_Cancelar(&currentM);
 8001fd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f8d0 	bl	800117a <MEN_Cancelar>
				reset_values();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <t_Menu+0xde8>)
 8001fec:	601a      	str	r2, [r3, #0]
				menu.privilege = USER;
 8001fee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001ff8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1d19      	adds	r1, r3, #4
 8002000:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3314      	adds	r3, #20
 8002008:	461a      	mov	r2, r3
 800200a:	2006      	movs	r0, #6
 800200c:	f7ff f8fa 	bl	8001204 <display_Print>

				break;
 8002010:	e035      	b.n	800207e <t_Menu+0xe2e>
 8002012:	bf00      	nop
 8002014:	0800d104 	.word	0x0800d104
 8002018:	0800d110 	.word	0x0800d110
 800201c:	20000350 	.word	0x20000350
 8002020:	0800d124 	.word	0x0800d124
 8002024:	0800d130 	.word	0x0800d130
 8002028:	20000404 	.word	0x20000404
 800202c:	20000458 	.word	0x20000458
 8002030:	0800d13c 	.word	0x0800d13c
 8002034:	0800d144 	.word	0x0800d144
 8002038:	003e3e3e 	.word	0x003e3e3e

			case MAESTRA:
				MEN_Maestra(&currentM);
 800203c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f880 	bl	8001146 <MEN_Maestra>
				reset_values();
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	4a0d      	ldr	r2, [pc, #52]	; (800208c <t_Menu+0xe3c>)
 8002058:	601a      	str	r2, [r3, #0]
				menu.privilege = USER;
 800205a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8002064:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1d19      	adds	r1, r3, #4
 800206c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3314      	adds	r3, #20
 8002074:	461a      	mov	r2, r3
 8002076:	2006      	movs	r0, #6
 8002078:	f7ff f8c4 	bl	8001204 <display_Print>
				break;
 800207c:	bf00      	nop
		}


		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800207e:	2000      	movs	r0, #0
 8002080:	f007 fd42 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002084:	f8c7 0508 	str.w	r0, [r7, #1288]	; 0x508
		xQueueReceive(tecla_q, &tecla, blockForever);
 8002088:	f7ff bb1c 	b.w	80016c4 <t_Menu+0x474>
 800208c:	003e3e3e 	.word	0x003e3e3e

08002090 <t_Display>:


//display----------------------------------------------------------------------------------------------------------------------------------------------------------------------


static void t_Display (void *pvParameters){
 8002090:	b580      	push	{r7, lr}
 8002092:	b094      	sub	sp, #80	; 0x50
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	display_t display;
	uint8_t lastRow1[16], lastRow2[16];

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002098:	2000      	movs	r0, #0
 800209a:	f007 fd35 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 800209e:	64f8      	str	r0, [r7, #76]	; 0x4c

	for(;;){
		if(strcmp(display.linea1,"\0") != 0) strcpy(lastRow1, display.linea1);
 80020a0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <t_Display+0x2a>
 80020a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	f107 0318 	add.w	r3, r7, #24
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f008 fe22 	bl	800acfe <strcpy>
		if(strcmp(display.linea2,"\0") != 0) strcpy(lastRow2, display.linea2);
 80020ba:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <t_Display+0x46>
 80020c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c6:	f103 0211 	add.w	r2, r3, #17
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f008 fe14 	bl	800acfe <strcpy>

		xQueueReceive(display_q, &display, blockForever);
 80020d6:	4b68      	ldr	r3, [pc, #416]	; (8002278 <t_Display+0x1e8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020de:	f04f 32ff 	mov.w	r2, #4294967295
 80020e2:	4618      	mov	r0, r3
 80020e4:	f006 f968 	bl	80083b8 <xQueueReceive>
		switch(display.accion){
 80020e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	f200 80ae 	bhi.w	800224e <t_Display+0x1be>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <t_Display+0x68>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002115 	.word	0x08002115
 80020fc:	0800213f 	.word	0x0800213f
 8002100:	0800219d 	.word	0x0800219d
 8002104:	080021fb 	.word	0x080021fb
 8002108:	08002201 	.word	0x08002201
 800210c:	08002211 	.word	0x08002211
 8002110:	08002221 	.word	0x08002221
			case PRINT:
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 8002114:	2100      	movs	r1, #0
 8002116:	2000      	movs	r0, #0
 8002118:	f7fe fe52 	bl	8000dc0 <HD44780_SetCursor>
 800211c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002120:	3301      	adds	r3, #1
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe febd 	bl	8000ea2 <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 8002128:	2101      	movs	r1, #1
 800212a:	2000      	movs	r0, #0
 800212c:	f7fe fe48 	bl	8000dc0 <HD44780_SetCursor>
 8002130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002134:	3311      	adds	r3, #17
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe feb3 	bl	8000ea2 <HD44780_PrintStr>
				}
				break;
 800213c:	e097      	b.n	800226e <t_Display+0x1de>
			case TEMPORARY_PRINTING:
				lcd_clear();
 800213e:	f7fe fe29 	bl	8000d94 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 8002142:	2100      	movs	r1, #0
 8002144:	2000      	movs	r0, #0
 8002146:	f7fe fe3b 	bl	8000dc0 <HD44780_SetCursor>
 800214a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214e:	3301      	adds	r3, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fea6 	bl	8000ea2 <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 8002156:	2101      	movs	r1, #1
 8002158:	2000      	movs	r0, #0
 800215a:	f7fe fe31 	bl	8000dc0 <HD44780_SetCursor>
 800215e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002162:	3311      	adds	r3, #17
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fe9c 	bl	8000ea2 <HD44780_PrintStr>
				}
				vTaskDelay(sleep_2s);
 800216a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800216e:	f006 fd1f 	bl	8008bb0 <vTaskDelay>
				lcd_clear();
 8002172:	f7fe fe0f 	bl	8000d94 <HD44780_Clear>
				lcd_msgPrint(0, 0, lastRow1);
 8002176:	2100      	movs	r1, #0
 8002178:	2000      	movs	r0, #0
 800217a:	f7fe fe21 	bl	8000dc0 <HD44780_SetCursor>
 800217e:	f107 0318 	add.w	r3, r7, #24
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fe8d 	bl	8000ea2 <HD44780_PrintStr>
				lcd_msgPrint(0, 1, lastRow2);
 8002188:	2101      	movs	r1, #1
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe fe18 	bl	8000dc0 <HD44780_SetCursor>
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fe84 	bl	8000ea2 <HD44780_PrintStr>
				break;
 800219a:	e068      	b.n	800226e <t_Display+0x1de>
			case TEMPORARY_PRINTING_10s:
				lcd_clear();
 800219c:	f7fe fdfa 	bl	8000d94 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 80021a0:	2100      	movs	r1, #0
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7fe fe0c 	bl	8000dc0 <HD44780_SetCursor>
 80021a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ac:	3301      	adds	r3, #1
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fe77 	bl	8000ea2 <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 80021b4:	2101      	movs	r1, #1
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fe02 	bl	8000dc0 <HD44780_SetCursor>
 80021bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c0:	3311      	adds	r3, #17
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fe6d 	bl	8000ea2 <HD44780_PrintStr>
				}
				vTaskDelay(sleep_10s);
 80021c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80021cc:	f006 fcf0 	bl	8008bb0 <vTaskDelay>
				lcd_clear();
 80021d0:	f7fe fde0 	bl	8000d94 <HD44780_Clear>
				lcd_msgPrint(0, 0, lastRow1);
 80021d4:	2100      	movs	r1, #0
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fdf2 	bl	8000dc0 <HD44780_SetCursor>
 80021dc:	f107 0318 	add.w	r3, r7, #24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fe5e 	bl	8000ea2 <HD44780_PrintStr>
				lcd_msgPrint(0, 1, lastRow2);
 80021e6:	2101      	movs	r1, #1
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7fe fde9 	bl	8000dc0 <HD44780_SetCursor>
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fe55 	bl	8000ea2 <HD44780_PrintStr>
				break;
 80021f8:	e039      	b.n	800226e <t_Display+0x1de>
			case CLEAR:
				lcd_clear();
 80021fa:	f7fe fdcb 	bl	8000d94 <HD44780_Clear>
				break;
 80021fe:	e036      	b.n	800226e <t_Display+0x1de>
			case CLEAR_1:
				lcd_msgPrint(0, 0, "                ");
 8002200:	2100      	movs	r1, #0
 8002202:	2000      	movs	r0, #0
 8002204:	f7fe fddc 	bl	8000dc0 <HD44780_SetCursor>
 8002208:	481c      	ldr	r0, [pc, #112]	; (800227c <t_Display+0x1ec>)
 800220a:	f7fe fe4a 	bl	8000ea2 <HD44780_PrintStr>
				break;
 800220e:	e02e      	b.n	800226e <t_Display+0x1de>
			case CLEAR_2:
				lcd_msgPrint(0, 1, "                ");
 8002210:	2101      	movs	r1, #1
 8002212:	2000      	movs	r0, #0
 8002214:	f7fe fdd4 	bl	8000dc0 <HD44780_SetCursor>
 8002218:	4818      	ldr	r0, [pc, #96]	; (800227c <t_Display+0x1ec>)
 800221a:	f7fe fe42 	bl	8000ea2 <HD44780_PrintStr>
				break;
 800221e:	e026      	b.n	800226e <t_Display+0x1de>
			case CLEAR_PRINT:
				lcd_clear();
 8002220:	f7fe fdb8 	bl	8000d94 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 8002224:	2100      	movs	r1, #0
 8002226:	2000      	movs	r0, #0
 8002228:	f7fe fdca 	bl	8000dc0 <HD44780_SetCursor>
 800222c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002230:	3301      	adds	r3, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fe35 	bl	8000ea2 <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 8002238:	2101      	movs	r1, #1
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fdc0 	bl	8000dc0 <HD44780_SetCursor>
 8002240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002244:	3311      	adds	r3, #17
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fe2b 	bl	8000ea2 <HD44780_PrintStr>
				}
				break;
 800224c:	e00f      	b.n	800226e <t_Display+0x1de>
			default:
				lcd_clear();
 800224e:	f7fe fda1 	bl	8000d94 <HD44780_Clear>
				lcd_msgPrint(0, 1, "ERROR 1");
 8002252:	2101      	movs	r1, #1
 8002254:	2000      	movs	r0, #0
 8002256:	f7fe fdb3 	bl	8000dc0 <HD44780_SetCursor>
 800225a:	4809      	ldr	r0, [pc, #36]	; (8002280 <t_Display+0x1f0>)
 800225c:	f7fe fe21 	bl	8000ea2 <HD44780_PrintStr>
				vTaskDelay(sleep_1s);
 8002260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002264:	f006 fca4 	bl	8008bb0 <vTaskDelay>
				lcd_clear();
 8002268:	f7fe fd94 	bl	8000d94 <HD44780_Clear>
				break;
 800226c:	bf00      	nop
		}
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800226e:	2000      	movs	r0, #0
 8002270:	f007 fc4a 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002274:	64f8      	str	r0, [r7, #76]	; 0x4c
		if(strcmp(display.linea1,"\0") != 0) strcpy(lastRow1, display.linea1);
 8002276:	e713      	b.n	80020a0 <t_Display+0x10>
 8002278:	20000460 	.word	0x20000460
 800227c:	0800d158 	.word	0x0800d158
 8002280:	0800d16c 	.word	0x0800d16c

08002284 <t_Flash>:
}

//flash----------------------------------------------------------------------------------------------------------------------------------------------------------------------


static void t_Flash (void *pvParameters){
 8002284:	b580      	push	{r7, lr}
 8002286:	b0aa      	sub	sp, #168	; 0xa8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	 * la mitad de FLASH_BUFFER_SIZE sera el numero maximo de usuarios permitidos. FLASH_BUFFER_SIZE debe ser un numero par.
	 * el maximo teorico de usuarios pemitidos es 512 (la mitad del tamaño de una pagina de la memoria flash)
	 *
	 */

	uint32_t index = 0, nroUsuario;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	usuario_t value;
	uint32_t buffer[FLASH_BUFFER_SIZE];

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002292:	2000      	movs	r0, #0
 8002294:	f007 fc38 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002298:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	for(;;){
		xQueueReceive(flashcmd_q, &value, blockForever);
 800229c:	4b37      	ldr	r3, [pc, #220]	; (800237c <t_Flash+0xf8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	4618      	mov	r0, r3
 80022aa:	f006 f885 	bl	80083b8 <xQueueReceive>
		switch(value.accion){
 80022ae:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <t_Flash+0x38>
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d02c      	beq.n	8002314 <t_Flash+0x90>
			buffer[index + 1] = value.clave;					//se escrive el codigo en el indice impar

			Flash_Write_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
			break;
		default:
			break;
 80022ba:	e058      	b.n	800236e <t_Flash+0xea>
			index = (2 * (value.nroUsuario));							//se calcula el indice del usuario solicitado
 80022bc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			Flash_Read_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);	//se realiza la lectura de la memoria
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	2220      	movs	r2, #32
 80022cc:	4619      	mov	r1, r3
 80022ce:	482c      	ldr	r0, [pc, #176]	; (8002380 <t_Flash+0xfc>)
 80022d0:	f7fe fc54 	bl	8000b7c <Flash_Read_Data>
			value.nroUsuario = buffer[index];								//se asigna a la estructura el nro de usuario, si esta vacio se asigna "SIN_ASIGNAR"
 80022d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022de:	4413      	add	r3, r2
 80022e0:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			value.clave = buffer[index + 1];								//se asigna a la estructura de usuario la clave correspondiente
 80022ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ee:	3301      	adds	r3, #1
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022f6:	4413      	add	r3, r2
 80022f8:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80022fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			xQueueSend(flashdata_q,&value,blockForever);
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <t_Flash+0x100>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002308:	2300      	movs	r3, #0
 800230a:	f04f 32ff 	mov.w	r2, #4294967295
 800230e:	f005 fea3 	bl	8008058 <xQueueGenericSend>
			break;
 8002312:	e02c      	b.n	800236e <t_Flash+0xea>
			index = (value.nroUsuario)*2;
 8002314:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			nroUsuario = value.nroUsuario;
 800231e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			Flash_Read_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	2220      	movs	r2, #32
 800232c:	4619      	mov	r1, r3
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <t_Flash+0xfc>)
 8002330:	f7fe fc24 	bl	8000b7c <Flash_Read_Data>
			buffer[index] = nroUsuario;				//se escrive el numero de usuario en el indice par
 8002334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800233e:	4413      	add	r3, r2
 8002340:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002344:	f843 2c9c 	str.w	r2, [r3, #-156]
			buffer[index + 1] = value.clave;					//se escrive el codigo en el indice impar
 8002348:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800234c:	3301      	adds	r3, #1
 800234e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002358:	440b      	add	r3, r1
 800235a:	f843 2c9c 	str.w	r2, [r3, #-156]
			Flash_Write_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	2220      	movs	r2, #32
 8002364:	4619      	mov	r1, r3
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <t_Flash+0xfc>)
 8002368:	f7fe fbae 	bl	8000ac8 <Flash_Write_Data>
			break;
 800236c:	bf00      	nop
		}
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800236e:	2000      	movs	r0, #0
 8002370:	f007 fbca 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002374:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		xQueueReceive(flashcmd_q, &value, blockForever);
 8002378:	e790      	b.n	800229c <t_Flash+0x18>
 800237a:	bf00      	nop
 800237c:	20000348 	.word	0x20000348
 8002380:	0801fc00 	.word	0x0801fc00
 8002384:	2000034c 	.word	0x2000034c

08002388 <t_ControlAcceso>:
	}
}

//control de acceso----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_ControlAcceso (void *pvParameters){
 8002388:	b580      	push	{r7, lr}
 800238a:	b0b8      	sub	sp, #224	; 0xe0
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	usuario_t usuario[CANT_MAX_USUARIOS], usuarioAux;
	nroUsuario_t nroUsuario;
	actuador_t actuador;

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002390:	2000      	movs	r0, #0
 8002392:	f007 fbb9 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002396:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80023a0:	e00d      	b.n	80023be <t_ControlAcceso+0x36>
		usuario[i].intentosDisp = CANT_MAX_INTENTOS;
 80023a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80023ac:	4413      	add	r3, r2
 80023ae:	3bb8      	subs	r3, #184	; 0xb8
 80023b0:	2203      	movs	r2, #3
 80023b2:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 80023b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023b8:	3301      	adds	r3, #1
 80023ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80023be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023c2:	2b0a      	cmp	r3, #10
 80023c4:	d9ed      	bls.n	80023a2 <t_ControlAcceso+0x1a>
	}

	for(;;){
		if(xQueueReceive(reqAcceso_q, &usuarioAux, blockForever) == pdPASS){
 80023c6:	4bda      	ldr	r3, [pc, #872]	; (8002730 <t_ControlAcceso+0x3a8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f107 0110 	add.w	r1, r7, #16
 80023ce:	f04f 32ff 	mov.w	r2, #4294967295
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 fff0 	bl	80083b8 <xQueueReceive>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f040 8213 	bne.w	8002806 <t_ControlAcceso+0x47e>

			nroUsuario = usuarioAux.nroUsuario;
 80023e0:	7c7b      	ldrb	r3, [r7, #17]
 80023e2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
			usuario[nroUsuario].nroUsuario = usuarioAux.nroUsuario;
 80023e6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80023ea:	7c7a      	ldrb	r2, [r7, #17]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80023f2:	440b      	add	r3, r1
 80023f4:	3bbf      	subs	r3, #191	; 0xbf
 80023f6:	701a      	strb	r2, [r3, #0]
			usuario[nroUsuario].clave = usuarioAux.clave;
 80023f8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002404:	440b      	add	r3, r1
 8002406:	3bbc      	subs	r3, #188	; 0xbc
 8002408:	601a      	str	r2, [r3, #0]
			usuario[nroUsuario].accion = usuarioAux.accion;
 800240a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800240e:	7c3a      	ldrb	r2, [r7, #16]
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002416:	440b      	add	r3, r1
 8002418:	3bc0      	subs	r3, #192	; 0xc0
 800241a:	701a      	strb	r2, [r3, #0]

			switch(usuario[nroUsuario].accion){
 800241c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002426:	4413      	add	r3, r2
 8002428:	3bc0      	subs	r3, #192	; 0xc0
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b02      	cmp	r3, #2
 800242e:	f000 819b 	beq.w	8002768 <t_ControlAcceso+0x3e0>
 8002432:	2b02      	cmp	r3, #2
 8002434:	f300 81e9 	bgt.w	800280a <t_ControlAcceso+0x482>
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <t_ControlAcceso+0xbc>
 800243c:	2b01      	cmp	r3, #1
 800243e:	f000 8185 	beq.w	800274c <t_ControlAcceso+0x3c4>
#ifdef EGB
					xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
#endif
					break;
				default:
					break;
 8002442:	e1e2      	b.n	800280a <t_ControlAcceso+0x482>
					if(nroUsuario == MAESTRO){
 8002444:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 8082 	bne.w	8002552 <t_ControlAcceso+0x1ca>
						usuario[nroUsuario].accion = READ;
 800244e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002458:	4413      	add	r3, r2
 800245a:	3bc0      	subs	r3, #192	; 0xc0
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
						xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 8002460:	4bb4      	ldr	r3, [pc, #720]	; (8002734 <t_ControlAcceso+0x3ac>)
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002468:	f107 0220 	add.w	r2, r7, #32
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	18d1      	adds	r1, r2, r3
 8002470:	2300      	movs	r3, #0
 8002472:	f04f 32ff 	mov.w	r2, #4294967295
 8002476:	f005 fdef 	bl	8008058 <xQueueGenericSend>
						xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 800247a:	4baf      	ldr	r3, [pc, #700]	; (8002738 <t_ControlAcceso+0x3b0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f107 0110 	add.w	r1, r7, #16
 8002482:	f04f 32ff 	mov.w	r2, #4294967295
 8002486:	4618      	mov	r0, r3
 8002488:	f005 ff96 	bl	80083b8 <xQueueReceive>
						if(usuarioAux.clave == usuario[nroUsuario].clave){
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002498:	440b      	add	r3, r1
 800249a:	3bbc      	subs	r3, #188	; 0xbc
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d123      	bne.n	80024ea <t_ControlAcceso+0x162>
							usuario[nroUsuario].accion = ACC_OK;
 80024a2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80024ac:	4413      	add	r3, r2
 80024ae:	3bc0      	subs	r3, #192	; 0xc0
 80024b0:	2205      	movs	r2, #5
 80024b2:	701a      	strb	r2, [r3, #0]
							actuador.tipo = PUERTA;
 80024b4:	2301      	movs	r3, #1
 80024b6:	723b      	strb	r3, [r7, #8]
							actuador.accion = ACC_MASTER;
 80024b8:	230c      	movs	r3, #12
 80024ba:	727b      	strb	r3, [r7, #9]
							for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024c2:	e00d      	b.n	80024e0 <t_ControlAcceso+0x158>
								usuario[i].intentosDisp = CANT_MAX_INTENTOS;
 80024c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80024ce:	4413      	add	r3, r2
 80024d0:	3bb8      	subs	r3, #184	; 0xb8
 80024d2:	2203      	movs	r2, #3
 80024d4:	601a      	str	r2, [r3, #0]
							for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 80024d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024da:	3301      	adds	r3, #1
 80024dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024e4:	2b0a      	cmp	r3, #10
 80024e6:	d9ed      	bls.n	80024c4 <t_ControlAcceso+0x13c>
 80024e8:	e008      	b.n	80024fc <t_ControlAcceso+0x174>
							usuario[nroUsuario].accion = ACC_ERROR;
 80024ea:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80024f4:	4413      	add	r3, r2
 80024f6:	3bc0      	subs	r3, #192	; 0xc0
 80024f8:	2207      	movs	r2, #7
 80024fa:	701a      	strb	r2, [r3, #0]
						xQueueSend(actuador_q, &actuador, blockForever);
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <t_ControlAcceso+0x3b4>)
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f107 0108 	add.w	r1, r7, #8
 8002504:	2300      	movs	r3, #0
 8002506:	f04f 32ff 	mov.w	r2, #4294967295
 800250a:	f005 fda5 	bl	8008058 <xQueueGenericSend>
						xQueueSendToBack(actuador_aux_q, &actuador, nonBlocking);
 800250e:	4b8c      	ldr	r3, [pc, #560]	; (8002740 <t_ControlAcceso+0x3b8>)
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	f107 0108 	add.w	r1, r7, #8
 8002516:	2300      	movs	r3, #0
 8002518:	2200      	movs	r2, #0
 800251a:	f005 fd9d 	bl	8008058 <xQueueGenericSend>
						xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 800251e:	4b89      	ldr	r3, [pc, #548]	; (8002744 <t_ControlAcceso+0x3bc>)
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002526:	f107 0220 	add.w	r2, r7, #32
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	18d1      	adds	r1, r2, r3
 800252e:	2300      	movs	r3, #0
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	f005 fd90 	bl	8008058 <xQueueGenericSend>
						xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
 8002538:	4b83      	ldr	r3, [pc, #524]	; (8002748 <t_ControlAcceso+0x3c0>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002540:	f107 0220 	add.w	r2, r7, #32
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	18d1      	adds	r1, r2, r3
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	f005 fd84 	bl	8008058 <xQueueGenericSend>
					break;
 8002550:	e15d      	b.n	800280e <t_ControlAcceso+0x486>
					else if(nroUsuario != MAESTRO && nroUsuario != SIN_ASIGNAR){
 8002552:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8159 	beq.w	800280e <t_ControlAcceso+0x486>
 800255c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002560:	2b0b      	cmp	r3, #11
 8002562:	f000 8154 	beq.w	800280e <t_ControlAcceso+0x486>
						if(usuario[nroUsuario].intentosDisp != SIN_INTENTOS_DISP){
 8002566:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002570:	4413      	add	r3, r2
 8002572:	3bb8      	subs	r3, #184	; 0xb8
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80a2 	beq.w	80026c0 <t_ControlAcceso+0x338>
							usuario[nroUsuario].accion = READ;
 800257c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002586:	4413      	add	r3, r2
 8002588:	3bc0      	subs	r3, #192	; 0xc0
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
							xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 800258e:	4b69      	ldr	r3, [pc, #420]	; (8002734 <t_ControlAcceso+0x3ac>)
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002596:	f107 0220 	add.w	r2, r7, #32
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	18d1      	adds	r1, r2, r3
 800259e:	2300      	movs	r3, #0
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	f005 fd58 	bl	8008058 <xQueueGenericSend>
							xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <t_ControlAcceso+0x3b0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f107 0110 	add.w	r1, r7, #16
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	4618      	mov	r0, r3
 80025b6:	f005 feff 	bl	80083b8 <xQueueReceive>
							if(usuarioAux.clave == usuario[nroUsuario].clave){
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80025c6:	440b      	add	r3, r1
 80025c8:	3bbc      	subs	r3, #188	; 0xbc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d127      	bne.n	8002620 <t_ControlAcceso+0x298>
								usuario[nroUsuario].accion = ACC_OK;
 80025d0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80025da:	4413      	add	r3, r2
 80025dc:	3bc0      	subs	r3, #192	; 0xc0
 80025de:	2205      	movs	r2, #5
 80025e0:	701a      	strb	r2, [r3, #0]
								actuador.tipo = PUERTA;
 80025e2:	2301      	movs	r3, #1
 80025e4:	723b      	strb	r3, [r7, #8]
								actuador.accion = ACC_OK;
 80025e6:	2305      	movs	r3, #5
 80025e8:	727b      	strb	r3, [r7, #9]
								usuario[nroUsuario].intentosDisp = CANT_MAX_INTENTOS;
 80025ea:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80025f4:	4413      	add	r3, r2
 80025f6:	3bb8      	subs	r3, #184	; 0xb8
 80025f8:	2203      	movs	r2, #3
 80025fa:	601a      	str	r2, [r3, #0]
								xQueueSend(actuador_q, &actuador, blockForever);
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <t_ControlAcceso+0x3b4>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	f107 0108 	add.w	r1, r7, #8
 8002604:	2300      	movs	r3, #0
 8002606:	f04f 32ff 	mov.w	r2, #4294967295
 800260a:	f005 fd25 	bl	8008058 <xQueueGenericSend>
								xQueueSendToBack(actuador_aux_q, &actuador, nonBlocking);
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <t_ControlAcceso+0x3b8>)
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	f107 0108 	add.w	r1, r7, #8
 8002616:	2300      	movs	r3, #0
 8002618:	2200      	movs	r2, #0
 800261a:	f005 fd1d 	bl	8008058 <xQueueGenericSend>
 800261e:	e035      	b.n	800268c <t_ControlAcceso+0x304>
								usuario[nroUsuario].accion = ACC_DENEGADO;
 8002620:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800262a:	4413      	add	r3, r2
 800262c:	3bc0      	subs	r3, #192	; 0xc0
 800262e:	2206      	movs	r2, #6
 8002630:	701a      	strb	r2, [r3, #0]
								usuario[nroUsuario].intentosDisp--;
 8002632:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002636:	011a      	lsls	r2, r3, #4
 8002638:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800263c:	440a      	add	r2, r1
 800263e:	3ab8      	subs	r2, #184	; 0xb8
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	3a01      	subs	r2, #1
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800264a:	440b      	add	r3, r1
 800264c:	3bb8      	subs	r3, #184	; 0xb8
 800264e:	601a      	str	r2, [r3, #0]
								if(usuario[nroUsuario].intentosDisp == SIN_INTENTOS_DISP){
 8002650:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800265a:	4413      	add	r3, r2
 800265c:	3bb8      	subs	r3, #184	; 0xb8
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d113      	bne.n	800268c <t_ControlAcceso+0x304>
									actuador.tipo = PUERTA;
 8002664:	2301      	movs	r3, #1
 8002666:	723b      	strb	r3, [r7, #8]
									actuador.accion = ACC_DENEGADO;
 8002668:	2306      	movs	r3, #6
 800266a:	727b      	strb	r3, [r7, #9]
									xQueueSend(actuador_q, &actuador, nonBlocking);
 800266c:	4b33      	ldr	r3, [pc, #204]	; (800273c <t_ControlAcceso+0x3b4>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	f107 0108 	add.w	r1, r7, #8
 8002674:	2300      	movs	r3, #0
 8002676:	2200      	movs	r2, #0
 8002678:	f005 fcee 	bl	8008058 <xQueueGenericSend>
									xQueueSendToBack(actuador_aux_q, &actuador, nonBlocking);
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <t_ControlAcceso+0x3b8>)
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	f107 0108 	add.w	r1, r7, #8
 8002684:	2300      	movs	r3, #0
 8002686:	2200      	movs	r2, #0
 8002688:	f005 fce6 	bl	8008058 <xQueueGenericSend>
							xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <t_ControlAcceso+0x3bc>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002694:	f107 0220 	add.w	r2, r7, #32
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	18d1      	adds	r1, r2, r3
 800269c:	2300      	movs	r3, #0
 800269e:	f04f 32ff 	mov.w	r2, #4294967295
 80026a2:	f005 fcd9 	bl	8008058 <xQueueGenericSend>
							xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
 80026a6:	4b28      	ldr	r3, [pc, #160]	; (8002748 <t_ControlAcceso+0x3c0>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026ae:	f107 0220 	add.w	r2, r7, #32
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	18d1      	adds	r1, r2, r3
 80026b6:	2300      	movs	r3, #0
 80026b8:	2200      	movs	r2, #0
 80026ba:	f005 fccd 	bl	8008058 <xQueueGenericSend>
					break;
 80026be:	e0a6      	b.n	800280e <t_ControlAcceso+0x486>
							usuario[nroUsuario].accion = ACC_DENEGADO;
 80026c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80026ca:	4413      	add	r3, r2
 80026cc:	3bc0      	subs	r3, #192	; 0xc0
 80026ce:	2206      	movs	r2, #6
 80026d0:	701a      	strb	r2, [r3, #0]
							actuador.tipo = PUERTA;
 80026d2:	2301      	movs	r3, #1
 80026d4:	723b      	strb	r3, [r7, #8]
							actuador.accion = ACC_DENEGADO;
 80026d6:	2306      	movs	r3, #6
 80026d8:	727b      	strb	r3, [r7, #9]
							xQueueSend(actuador_q, &actuador, nonBlocking);
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <t_ControlAcceso+0x3b4>)
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	f107 0108 	add.w	r1, r7, #8
 80026e2:	2300      	movs	r3, #0
 80026e4:	2200      	movs	r2, #0
 80026e6:	f005 fcb7 	bl	8008058 <xQueueGenericSend>
							xQueueSendToBack(actuador_aux_q, &actuador, nonBlocking);
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <t_ControlAcceso+0x3b8>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f107 0108 	add.w	r1, r7, #8
 80026f2:	2300      	movs	r3, #0
 80026f4:	2200      	movs	r2, #0
 80026f6:	f005 fcaf 	bl	8008058 <xQueueGenericSend>
							xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <t_ControlAcceso+0x3bc>)
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002702:	f107 0220 	add.w	r2, r7, #32
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	18d1      	adds	r1, r2, r3
 800270a:	2300      	movs	r3, #0
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	f005 fca2 	bl	8008058 <xQueueGenericSend>
							xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <t_ControlAcceso+0x3c0>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800271c:	f107 0220 	add.w	r2, r7, #32
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	18d1      	adds	r1, r2, r3
 8002724:	2300      	movs	r3, #0
 8002726:	2200      	movs	r2, #0
 8002728:	f005 fc96 	bl	8008058 <xQueueGenericSend>
					break;
 800272c:	e06f      	b.n	800280e <t_ControlAcceso+0x486>
 800272e:	bf00      	nop
 8002730:	20000350 	.word	0x20000350
 8002734:	20000348 	.word	0x20000348
 8002738:	2000034c 	.word	0x2000034c
 800273c:	20000454 	.word	0x20000454
 8002740:	200003fc 	.word	0x200003fc
 8002744:	20000458 	.word	0x20000458
 8002748:	2000045c 	.word	0x2000045c
					xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 800274c:	4b33      	ldr	r3, [pc, #204]	; (800281c <t_ControlAcceso+0x494>)
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002754:	f107 0220 	add.w	r2, r7, #32
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	18d1      	adds	r1, r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	f04f 32ff 	mov.w	r2, #4294967295
 8002762:	f005 fc79 	bl	8008058 <xQueueGenericSend>
					break;
 8002766:	e053      	b.n	8002810 <t_ControlAcceso+0x488>
					usuario[nroUsuario].accion = READ;
 8002768:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002772:	4413      	add	r3, r2
 8002774:	3bc0      	subs	r3, #192	; 0xc0
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
					xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 800277a:	4b28      	ldr	r3, [pc, #160]	; (800281c <t_ControlAcceso+0x494>)
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002782:	f107 0220 	add.w	r2, r7, #32
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	18d1      	adds	r1, r2, r3
 800278a:	2300      	movs	r3, #0
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	f005 fc62 	bl	8008058 <xQueueGenericSend>
					xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <t_ControlAcceso+0x498>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f107 0110 	add.w	r1, r7, #16
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	4618      	mov	r0, r3
 80027a2:	f005 fe09 	bl	80083b8 <xQueueReceive>
					if(usuarioAux.clave == 0)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <t_ControlAcceso+0x438>
						usuario[nroUsuario].accion = ACC_SIN_ASIGNAR;
 80027ac:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80027b6:	4413      	add	r3, r2
 80027b8:	3bc0      	subs	r3, #192	; 0xc0
 80027ba:	220a      	movs	r2, #10
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	e008      	b.n	80027d2 <t_ControlAcceso+0x44a>
						usuario[nroUsuario].accion = ACC_ASIGNADO;
 80027c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80027ca:	4413      	add	r3, r2
 80027cc:	3bc0      	subs	r3, #192	; 0xc0
 80027ce:	220b      	movs	r2, #11
 80027d0:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <t_ControlAcceso+0x49c>)
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80027da:	f107 0220 	add.w	r2, r7, #32
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	18d1      	adds	r1, r2, r3
 80027e2:	2300      	movs	r3, #0
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	f005 fc36 	bl	8008058 <xQueueGenericSend>
					xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], nonBlocking);
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <t_ControlAcceso+0x4a0>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80027f4:	f107 0220 	add.w	r2, r7, #32
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	18d1      	adds	r1, r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	2200      	movs	r2, #0
 8002800:	f005 fc2a 	bl	8008058 <xQueueGenericSend>
					break;
 8002804:	e004      	b.n	8002810 <t_ControlAcceso+0x488>
			}
		}
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <t_ControlAcceso+0x488>
					break;
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <t_ControlAcceso+0x488>
					break;
 800280e:	bf00      	nop
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002810:	2000      	movs	r0, #0
 8002812:	f007 f979 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002816:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if(xQueueReceive(reqAcceso_q, &usuarioAux, blockForever) == pdPASS){
 800281a:	e5d4      	b.n	80023c6 <t_ControlAcceso+0x3e>
 800281c:	20000348 	.word	0x20000348
 8002820:	2000034c 	.word	0x2000034c
 8002824:	20000458 	.word	0x20000458
 8002828:	2000045c 	.word	0x2000045c

0800282c <t_Actuadores>:
	}
}

//actuadores----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Actuadores (void *pvParameters){
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	actuador_t actuador;
	accion_t acceso = ACC_DENEGADO;
 8002834:	2306      	movs	r3, #6
 8002836:	77fb      	strb	r3, [r7, #31]
#ifdef LOG_APERTURA
	apertura_t apertura;
#endif
	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002838:	2000      	movs	r0, #0
 800283a:	f007 f965 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 800283e:	61b8      	str	r0, [r7, #24]

	for(;;){
		xQueueReceive(actuador_q, &actuador, blockForever);
 8002840:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <t_Actuadores+0x1e4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f107 0110 	add.w	r1, r7, #16
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	4618      	mov	r0, r3
 800284e:	f005 fdb3 	bl	80083b8 <xQueueReceive>
		if(actuador.tipo == PUERTA){
 8002852:	7c3b      	ldrb	r3, [r7, #16]
 8002854:	2b01      	cmp	r3, #1
 8002856:	f040 80d0 	bne.w	80029fa <t_Actuadores+0x1ce>
			switch (actuador.accion){
 800285a:	7c7b      	ldrb	r3, [r7, #17]
 800285c:	3b05      	subs	r3, #5
 800285e:	2b08      	cmp	r3, #8
 8002860:	f200 80cd 	bhi.w	80029fe <t_Actuadores+0x1d2>
 8002864:	a201      	add	r2, pc, #4	; (adr r2, 800286c <t_Actuadores+0x40>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	08002891 	.word	0x08002891
 8002870:	08002913 	.word	0x08002913
 8002874:	080029ff 	.word	0x080029ff
 8002878:	080029ff 	.word	0x080029ff
 800287c:	080029ff 	.word	0x080029ff
 8002880:	080029ff 	.word	0x080029ff
 8002884:	080029ff 	.word	0x080029ff
 8002888:	08002931 	.word	0x08002931
 800288c:	08002967 	.word	0x08002967
				case ACC_OK:
					acceso = ACC_OK;
 8002890:	2305      	movs	r3, #5
 8002892:	77fb      	strb	r3, [r7, #31]
					hal_digitalOutput(LOW, ledVerde);
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289a:	485e      	ldr	r0, [pc, #376]	; (8002a14 <t_Actuadores+0x1e8>)
 800289c:	f001 ffef 	bl	800487e <HAL_GPIO_WritePin>
					hal_digitalOutput(HIGH, acPuerta);
 80028a0:	2201      	movs	r2, #1
 80028a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a6:	485b      	ldr	r0, [pc, #364]	; (8002a14 <t_Actuadores+0x1e8>)
 80028a8:	f001 ffe9 	bl	800487e <HAL_GPIO_WritePin>
					vTaskDelay(sleep_10s);
 80028ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80028b0:	f006 f97e 	bl	8008bb0 <vTaskDelay>
					if(hal_digitalInput(PA) == LOW){
 80028b4:	2102      	movs	r1, #2
 80028b6:	4857      	ldr	r0, [pc, #348]	; (8002a14 <t_Actuadores+0x1e8>)
 80028b8:	f001 ffca 	bl	8004850 <HAL_GPIO_ReadPin>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d118      	bne.n	80028f4 <t_Actuadores+0xc8>
						hal_digitalOutput(LOW, ledRojo);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028c8:	4852      	ldr	r0, [pc, #328]	; (8002a14 <t_Actuadores+0x1e8>)
 80028ca:	f001 ffd8 	bl	800487e <HAL_GPIO_WritePin>
#ifdef SONIDO_ACTIVADO
						hal_digitalOutput(HIGH, acAlarma);
 80028ce:	2201      	movs	r2, #1
 80028d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d4:	484f      	ldr	r0, [pc, #316]	; (8002a14 <t_Actuadores+0x1e8>)
 80028d6:	f001 ffd2 	bl	800487e <HAL_GPIO_WritePin>
#endif
#ifdef LOG_APERTURA
						apertura.accion = ACC_TIMEOUT;
 80028da:	230e      	movs	r3, #14
 80028dc:	733b      	strb	r3, [r7, #12]
						apertura.estado = ABIERTA;
 80028de:	2301      	movs	r3, #1
 80028e0:	737b      	strb	r3, [r7, #13]
						xQueueSendToBack(apertura_q, &apertura, nonBlocking);
 80028e2:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <t_Actuadores+0x1ec>)
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	f107 0108 	add.w	r1, r7, #8
 80028ea:	2300      	movs	r3, #0
 80028ec:	2200      	movs	r2, #0
 80028ee:	f005 fbb3 	bl	8008058 <xQueueGenericSend>
 80028f2:	e00b      	b.n	800290c <t_Actuadores+0xe0>
#endif
					}
					else{
						hal_digitalOutput(HIGH, ledVerde);
 80028f4:	2201      	movs	r2, #1
 80028f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028fa:	4846      	ldr	r0, [pc, #280]	; (8002a14 <t_Actuadores+0x1e8>)
 80028fc:	f001 ffbf 	bl	800487e <HAL_GPIO_WritePin>
						hal_digitalOutput(LOW, acPuerta);
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002906:	4843      	ldr	r0, [pc, #268]	; (8002a14 <t_Actuadores+0x1e8>)
 8002908:	f001 ffb9 	bl	800487e <HAL_GPIO_WritePin>
					}
					acceso = ACC_DENEGADO;
 800290c:	2306      	movs	r3, #6
 800290e:	77fb      	strb	r3, [r7, #31]
					break;
 8002910:	e078      	b.n	8002a04 <t_Actuadores+0x1d8>
				case ACC_DENEGADO:
					acceso = ACC_DENEGADO;
 8002912:	2306      	movs	r3, #6
 8002914:	77fb      	strb	r3, [r7, #31]
					hal_digitalOutput(LOW, ledRojo);
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800291c:	483d      	ldr	r0, [pc, #244]	; (8002a14 <t_Actuadores+0x1e8>)
 800291e:	f001 ffae 	bl	800487e <HAL_GPIO_WritePin>
#ifdef SONIDO_ACTIVADO
					hal_digitalOutput(HIGH, acAlarma);
 8002922:	2201      	movs	r2, #1
 8002924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002928:	483a      	ldr	r0, [pc, #232]	; (8002a14 <t_Actuadores+0x1e8>)
 800292a:	f001 ffa8 	bl	800487e <HAL_GPIO_WritePin>
#endif
					break;
 800292e:	e069      	b.n	8002a04 <t_Actuadores+0x1d8>
				case ACC_MASTER:
					acceso = ACC_OK;
 8002930:	2305      	movs	r3, #5
 8002932:	77fb      	strb	r3, [r7, #31]
					hal_digitalOutput(HIGH, ledRojo);
 8002934:	2201      	movs	r2, #1
 8002936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800293a:	4836      	ldr	r0, [pc, #216]	; (8002a14 <t_Actuadores+0x1e8>)
 800293c:	f001 ff9f 	bl	800487e <HAL_GPIO_WritePin>
					hal_digitalOutput(LOW, acAlarma);
 8002940:	2200      	movs	r2, #0
 8002942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002946:	4833      	ldr	r0, [pc, #204]	; (8002a14 <t_Actuadores+0x1e8>)
 8002948:	f001 ff99 	bl	800487e <HAL_GPIO_WritePin>
					hal_digitalOutput(LOW, ledVerde);
 800294c:	2200      	movs	r2, #0
 800294e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002952:	4830      	ldr	r0, [pc, #192]	; (8002a14 <t_Actuadores+0x1e8>)
 8002954:	f001 ff93 	bl	800487e <HAL_GPIO_WritePin>
					hal_digitalOutput(HIGH, acPuerta);
 8002958:	2201      	movs	r2, #1
 800295a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800295e:	482d      	ldr	r0, [pc, #180]	; (8002a14 <t_Actuadores+0x1e8>)
 8002960:	f001 ff8d 	bl	800487e <HAL_GPIO_WritePin>
//					}
//					else{
//						hal_digitalOutput(HIGH, ledVerde);
//						hal_digitalOutput(LOW, acPuerta);
//					}
					break;
 8002964:	e04e      	b.n	8002a04 <t_Actuadores+0x1d8>
				case CAMBIO_ESTADO:
					vTaskDelay(sleep_100ms);
 8002966:	2064      	movs	r0, #100	; 0x64
 8002968:	f006 f922 	bl	8008bb0 <vTaskDelay>
					if(hal_digitalInput(PA) == LOW){
 800296c:	2102      	movs	r1, #2
 800296e:	4829      	ldr	r0, [pc, #164]	; (8002a14 <t_Actuadores+0x1e8>)
 8002970:	f001 ff6e 	bl	8004850 <HAL_GPIO_ReadPin>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11b      	bne.n	80029b2 <t_Actuadores+0x186>
						if(acceso == ACC_DENEGADO){
 800297a:	7ffb      	ldrb	r3, [r7, #31]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d140      	bne.n	8002a02 <t_Actuadores+0x1d6>
							hal_digitalOutput(LOW, ledRojo);
 8002980:	2200      	movs	r2, #0
 8002982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002986:	4823      	ldr	r0, [pc, #140]	; (8002a14 <t_Actuadores+0x1e8>)
 8002988:	f001 ff79 	bl	800487e <HAL_GPIO_WritePin>
#ifdef SONIDO_ACTIVADO
							hal_digitalOutput(HIGH, acAlarma);
 800298c:	2201      	movs	r2, #1
 800298e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002992:	4820      	ldr	r0, [pc, #128]	; (8002a14 <t_Actuadores+0x1e8>)
 8002994:	f001 ff73 	bl	800487e <HAL_GPIO_WritePin>
#endif
#ifdef LOG_APERTURA
							apertura.accion = ACC_DENEGADO;
 8002998:	2306      	movs	r3, #6
 800299a:	733b      	strb	r3, [r7, #12]
							apertura.estado = ABIERTA;
 800299c:	2301      	movs	r3, #1
 800299e:	737b      	strb	r3, [r7, #13]
							xQueueSendToBack(apertura_q, &apertura, nonBlocking);
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <t_Actuadores+0x1ec>)
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	f107 0108 	add.w	r1, r7, #8
 80029a8:	2300      	movs	r3, #0
 80029aa:	2200      	movs	r2, #0
 80029ac:	f005 fb54 	bl	8008058 <xQueueGenericSend>
							xQueueSendToBack(apertura_q, &apertura, nonBlocking);
#endif

						}
					}
					break;
 80029b0:	e027      	b.n	8002a02 <t_Actuadores+0x1d6>
						if(acceso == ACC_OK){
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d124      	bne.n	8002a02 <t_Actuadores+0x1d6>
							acceso = ACC_DENEGADO;
 80029b8:	2306      	movs	r3, #6
 80029ba:	77fb      	strb	r3, [r7, #31]
							hal_digitalOutput(HIGH, ledRojo);
 80029bc:	2201      	movs	r2, #1
 80029be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029c2:	4814      	ldr	r0, [pc, #80]	; (8002a14 <t_Actuadores+0x1e8>)
 80029c4:	f001 ff5b 	bl	800487e <HAL_GPIO_WritePin>
							hal_digitalOutput(LOW, acAlarma);
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ce:	4811      	ldr	r0, [pc, #68]	; (8002a14 <t_Actuadores+0x1e8>)
 80029d0:	f001 ff55 	bl	800487e <HAL_GPIO_WritePin>
							hal_digitalOutput(HIGH, ledVerde);
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029da:	480e      	ldr	r0, [pc, #56]	; (8002a14 <t_Actuadores+0x1e8>)
 80029dc:	f001 ff4f 	bl	800487e <HAL_GPIO_WritePin>
							apertura.accion = ACC_OK;
 80029e0:	2305      	movs	r3, #5
 80029e2:	733b      	strb	r3, [r7, #12]
							apertura.estado = ABIERTA;
 80029e4:	2301      	movs	r3, #1
 80029e6:	737b      	strb	r3, [r7, #13]
							xQueueSendToBack(apertura_q, &apertura, nonBlocking);
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <t_Actuadores+0x1ec>)
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	f107 0108 	add.w	r1, r7, #8
 80029f0:	2300      	movs	r3, #0
 80029f2:	2200      	movs	r2, #0
 80029f4:	f005 fb30 	bl	8008058 <xQueueGenericSend>
					break;
 80029f8:	e003      	b.n	8002a02 <t_Actuadores+0x1d6>
				default:
					break;
			}
		}
 80029fa:	bf00      	nop
 80029fc:	e002      	b.n	8002a04 <t_Actuadores+0x1d8>
					break;
 80029fe:	bf00      	nop
 8002a00:	e000      	b.n	8002a04 <t_Actuadores+0x1d8>
					break;
 8002a02:	bf00      	nop
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002a04:	2000      	movs	r0, #0
 8002a06:	f007 f87f 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002a0a:	61b8      	str	r0, [r7, #24]
		xQueueReceive(actuador_q, &actuador, blockForever);
 8002a0c:	e718      	b.n	8002840 <t_Actuadores+0x14>
 8002a0e:	bf00      	nop
 8002a10:	20000454 	.word	0x20000454
 8002a14:	40010c00 	.word	0x40010c00
 8002a18:	200001dc 	.word	0x200001dc

08002a1c <t_Teclado>:
	}
}

//teclado----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Teclado (void *pvParameters){
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b08b      	sub	sp, #44	; 0x2c
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	columna_t columna;
	fila_t fila;
	tecla_t tecla;
	uint8_t teclado[4][4] = {{1,4,7,MENU},{2,5,8,0},{3,6,9,ACEPTAR},{MAESTRA,ARRIBA,ABAJO,CANCELAR}};
 8002a24:	4b72      	ldr	r3, [pc, #456]	; (8002bf0 <t_Teclado+0x1d4>)
 8002a26:	f107 040c 	add.w	r4, r7, #12
 8002a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002a30:	2000      	movs	r0, #0
 8002a32:	f007 f869 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002a36:	6238      	str	r0, [r7, #32]

	hal_digitalOutput(LOW, fil1);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2110      	movs	r1, #16
 8002a3c:	486d      	ldr	r0, [pc, #436]	; (8002bf4 <t_Teclado+0x1d8>)
 8002a3e:	f001 ff1e 	bl	800487e <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil2);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2108      	movs	r1, #8
 8002a46:	486b      	ldr	r0, [pc, #428]	; (8002bf4 <t_Teclado+0x1d8>)
 8002a48:	f001 ff19 	bl	800487e <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil3);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a52:	4869      	ldr	r0, [pc, #420]	; (8002bf8 <t_Teclado+0x1dc>)
 8002a54:	f001 ff13 	bl	800487e <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil4);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a5e:	4866      	ldr	r0, [pc, #408]	; (8002bf8 <t_Teclado+0x1dc>)
 8002a60:	f001 ff0d 	bl	800487e <HAL_GPIO_WritePin>

	for(;;){
		xQueueReceive(columna_q, &columna, blockForever);
 8002a64:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <t_Teclado+0x1e0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f107 011f 	add.w	r1, r7, #31
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 fca1 	bl	80083b8 <xQueueReceive>

		hal_digitalOutput(HIGH, fil1);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2110      	movs	r1, #16
 8002a7a:	485e      	ldr	r0, [pc, #376]	; (8002bf4 <t_Teclado+0x1d8>)
 8002a7c:	f001 feff 	bl	800487e <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil2);
 8002a80:	2201      	movs	r2, #1
 8002a82:	2108      	movs	r1, #8
 8002a84:	485b      	ldr	r0, [pc, #364]	; (8002bf4 <t_Teclado+0x1d8>)
 8002a86:	f001 fefa 	bl	800487e <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil3);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a90:	4859      	ldr	r0, [pc, #356]	; (8002bf8 <t_Teclado+0x1dc>)
 8002a92:	f001 fef4 	bl	800487e <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil4);
 8002a96:	2201      	movs	r2, #1
 8002a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a9c:	4856      	ldr	r0, [pc, #344]	; (8002bf8 <t_Teclado+0x1dc>)
 8002a9e:	f001 feee 	bl	800487e <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil1);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	4853      	ldr	r0, [pc, #332]	; (8002bf4 <t_Teclado+0x1d8>)
 8002aa8:	f001 fee9 	bl	800487e <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <t_Teclado+0x1e0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f107 011f 	add.w	r1, r7, #31
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f005 fc7e 	bl	80083b8 <xQueueReceive>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d102      	bne.n	8002ac8 <t_Teclado+0xac>
			fila = FILA_1;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		hal_digitalOutput(HIGH, fil1);
 8002ac8:	2201      	movs	r2, #1
 8002aca:	2110      	movs	r1, #16
 8002acc:	4849      	ldr	r0, [pc, #292]	; (8002bf4 <t_Teclado+0x1d8>)
 8002ace:	f001 fed6 	bl	800487e <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil2);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2108      	movs	r1, #8
 8002ad6:	4847      	ldr	r0, [pc, #284]	; (8002bf4 <t_Teclado+0x1d8>)
 8002ad8:	f001 fed1 	bl	800487e <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002adc:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <t_Teclado+0x1e0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f107 011f 	add.w	r1, r7, #31
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f005 fc66 	bl	80083b8 <xQueueReceive>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <t_Teclado+0xdc>
			fila = FILA_2;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		hal_digitalOutput(HIGH, fil2);
 8002af8:	2201      	movs	r2, #1
 8002afa:	2108      	movs	r1, #8
 8002afc:	483d      	ldr	r0, [pc, #244]	; (8002bf4 <t_Teclado+0x1d8>)
 8002afe:	f001 febe 	bl	800487e <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil3);
 8002b02:	2200      	movs	r2, #0
 8002b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b08:	483b      	ldr	r0, [pc, #236]	; (8002bf8 <t_Teclado+0x1dc>)
 8002b0a:	f001 feb8 	bl	800487e <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <t_Teclado+0x1e0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f107 011f 	add.w	r1, r7, #31
 8002b16:	2200      	movs	r2, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f005 fc4d 	bl	80083b8 <xQueueReceive>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d102      	bne.n	8002b2a <t_Teclado+0x10e>
			fila = FILA_3;
 8002b24:	2302      	movs	r3, #2
 8002b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		hal_digitalOutput(HIGH, fil3);
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b30:	4831      	ldr	r0, [pc, #196]	; (8002bf8 <t_Teclado+0x1dc>)
 8002b32:	f001 fea4 	bl	800487e <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil4);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b3c:	482e      	ldr	r0, [pc, #184]	; (8002bf8 <t_Teclado+0x1dc>)
 8002b3e:	f001 fe9e 	bl	800487e <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <t_Teclado+0x1e0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f107 011f 	add.w	r1, r7, #31
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f005 fc33 	bl	80083b8 <xQueueReceive>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d102      	bne.n	8002b5e <t_Teclado+0x142>
			fila = FILA_4;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		hal_digitalOutput(HIGH, fil4);
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b64:	4824      	ldr	r0, [pc, #144]	; (8002bf8 <t_Teclado+0x1dc>)
 8002b66:	f001 fe8a 	bl	800487e <HAL_GPIO_WritePin>

		tecla.tecla = teclado[columna][fila];
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002b78:	440a      	add	r2, r1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b1c      	subs	r3, #28
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	777b      	strb	r3, [r7, #29]
		if(tecla.tecla < 10) tecla.accion = NUM;
 8002b82:	7f7b      	ldrb	r3, [r7, #29]
 8002b84:	2b09      	cmp	r3, #9
 8002b86:	d802      	bhi.n	8002b8e <t_Teclado+0x172>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	773b      	strb	r3, [r7, #28]
 8002b8c:	e001      	b.n	8002b92 <t_Teclado+0x176>
		else tecla.accion = tecla.tecla;
 8002b8e:	7f7b      	ldrb	r3, [r7, #29]
 8002b90:	773b      	strb	r3, [r7, #28]

		xQueueSendToBack(tecla_q, &tecla, blockForever);
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <t_Teclado+0x1e4>)
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	f107 011c 	add.w	r1, r7, #28
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	f005 fa5a 	bl	8008058 <xQueueGenericSend>

		vTaskDelay(sleep_500ms);
 8002ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ba8:	f006 f802 	bl	8008bb0 <vTaskDelay>
		xQueueReset(columna_q);
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <t_Teclado+0x1e0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f005 f94e 	bl	8007e54 <xQueueGenericReset>
		hal_digitalOutput(LOW, fil1);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2110      	movs	r1, #16
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <t_Teclado+0x1d8>)
 8002bbe:	f001 fe5e 	bl	800487e <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil2);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2108      	movs	r1, #8
 8002bc6:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <t_Teclado+0x1d8>)
 8002bc8:	f001 fe59 	bl	800487e <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil3);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bd2:	4809      	ldr	r0, [pc, #36]	; (8002bf8 <t_Teclado+0x1dc>)
 8002bd4:	f001 fe53 	bl	800487e <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil4);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bde:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <t_Teclado+0x1dc>)
 8002be0:	f001 fe4d 	bl	800487e <HAL_GPIO_WritePin>

		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002be4:	2000      	movs	r0, #0
 8002be6:	f006 ff8f 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002bea:	6238      	str	r0, [r7, #32]
		xQueueReceive(columna_q, &columna, blockForever);
 8002bec:	e73a      	b.n	8002a64 <t_Teclado+0x48>
 8002bee:	bf00      	nop
 8002bf0:	0800d174 	.word	0x0800d174
 8002bf4:	40010c00 	.word	0x40010c00
 8002bf8:	40010800 	.word	0x40010800
 8002bfc:	20000464 	.word	0x20000464
 8002c00:	20000400 	.word	0x20000400

08002c04 <parse_csv_to_struct>:
	}
}

#ifdef EGB
//comunicaccion externa----------------------------------------------------------------------------------------------------------------------------------------------------------------------
static uint8_t parse_csv_to_struct(const char *input, usuario_t *usuario, actuador_t *actuador, log_t *log){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b0a8      	sub	sp, #160	; 0xa0
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
    uint8_t identificator;
	char buffer[rxBUFFER_SIZE]; // Buffer para manipular el string de entrada
    strncpy(buffer, input, sizeof(buffer) - 1);
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	227f      	movs	r2, #127	; 0x7f
 8002c18:	68f9      	ldr	r1, [r7, #12]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f008 f877 	bl	800ad0e <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Asegurar terminación nula
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    char *token = strtok(buffer, ",");
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	4953      	ldr	r1, [pc, #332]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f008 f881 	bl	800ad34 <strtok>
 8002c32:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    size_t index = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t n, invertido = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    //00(idglobal),p(identificador),1(user),1111(password),0(nroIntentos),0(accion_t),$
    //00(idglobal),a(identificador),1(tipo),xxxx(relleno),0(accion),0(accion_anterior),$

    //idglobal lo descarto
    token = strtok(NULL, ",");
 8002c42:	494d      	ldr	r1, [pc, #308]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002c44:	2000      	movs	r0, #0
 8002c46:	f008 f875 	bl	800ad34 <strtok>
 8002c4a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    identificator = buffer[3];
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    if(identificator == 'l'){
 8002c54:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002c58:	2b6c      	cmp	r3, #108	; 0x6c
 8002c5a:	d10f      	bne.n	8002c7c <parse_csv_to_struct+0x78>
    	//log->accion = atoi(buffer[16]);
    	if(buffer[16] == '2')
 8002c5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c60:	2b32      	cmp	r3, #50	; 0x32
 8002c62:	d103      	bne.n	8002c6c <parse_csv_to_struct+0x68>
    		log->accion = SCANN;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2202      	movs	r2, #2
 8002c68:	705a      	strb	r2, [r3, #1]
 8002c6a:	e07e      	b.n	8002d6a <parse_csv_to_struct+0x166>
    	else if(buffer[16] == '0')
 8002c6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c70:	2b30      	cmp	r3, #48	; 0x30
 8002c72:	d17a      	bne.n	8002d6a <parse_csv_to_struct+0x166>
    		log->accion = READ;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	705a      	strb	r2, [r3, #1]
 8002c7a:	e076      	b.n	8002d6a <parse_csv_to_struct+0x166>
    }
    else if(identificator == 'p'){
 8002c7c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002c80:	2b70      	cmp	r3, #112	; 0x70
 8002c82:	d13b      	bne.n	8002cfc <parse_csv_to_struct+0xf8>
        token = strtok(NULL, ",");
 8002c84:	493c      	ldr	r1, [pc, #240]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002c86:	2000      	movs	r0, #0
 8002c88:	f008 f854 	bl	800ad34 <strtok>
 8002c8c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        usuario->nroUsuario = atoi(token);
 8002c90:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002c94:	f007 fec6 	bl	800aa24 <atoi>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	705a      	strb	r2, [r3, #1]
        token = strtok(NULL, ",");
 8002ca0:	4935      	ldr	r1, [pc, #212]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f008 f846 	bl	800ad34 <strtok>
 8002ca8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        usuario->clave = atoi(token);
 8002cac:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002cb0:	f007 feb8 	bl	800aa24 <atoi>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	605a      	str	r2, [r3, #4]
        token = strtok(NULL, ",");
 8002cbc:	492e      	ldr	r1, [pc, #184]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f008 f838 	bl	800ad34 <strtok>
 8002cc4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        usuario->intentosDisp = atoi(token);
 8002cc8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002ccc:	f007 feaa 	bl	800aa24 <atoi>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
        token = strtok(NULL, ",");
 8002cd8:	4927      	ldr	r1, [pc, #156]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f008 f82a 	bl	800ad34 <strtok>
 8002ce0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        usuario->accion = atoi(token);
 8002ce4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002ce8:	f007 fe9c 	bl	800aa24 <atoi>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	701a      	strb	r2, [r3, #0]
        usuario->id = 0;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	e036      	b.n	8002d6a <parse_csv_to_struct+0x166>
//            invertido = invertido * 10 + digito;
//            n = n / 10;
//        }
//        usuario->clave = invertido;
    }
    else if(identificator == 'a'){
 8002cfc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002d00:	2b61      	cmp	r3, #97	; 0x61
 8002d02:	d132      	bne.n	8002d6a <parse_csv_to_struct+0x166>
        token = strtok(NULL, ",");
 8002d04:	491c      	ldr	r1, [pc, #112]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002d06:	2000      	movs	r0, #0
 8002d08:	f008 f814 	bl	800ad34 <strtok>
 8002d0c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        actuador->tipo = atoi(token);
 8002d10:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002d14:	f007 fe86 	bl	800aa24 <atoi>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	701a      	strb	r2, [r3, #0]
        token = strtok(NULL, ",");
 8002d20:	4915      	ldr	r1, [pc, #84]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002d22:	2000      	movs	r0, #0
 8002d24:	f008 f806 	bl	800ad34 <strtok>
 8002d28:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        //descarto bytes relleno
        token = strtok(NULL, ",");
 8002d2c:	4912      	ldr	r1, [pc, #72]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f008 f800 	bl	800ad34 <strtok>
 8002d34:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        actuador->accion = atoi(token);
 8002d38:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002d3c:	f007 fe72 	bl	800aa24 <atoi>
 8002d40:	4603      	mov	r3, r0
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	705a      	strb	r2, [r3, #1]
        token = strtok(NULL, ",");
 8002d48:	490b      	ldr	r1, [pc, #44]	; (8002d78 <parse_csv_to_struct+0x174>)
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f007 fff2 	bl	800ad34 <strtok>
 8002d50:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        actuador->anterior = atoi(token);
 8002d54:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002d58:	f007 fe64 	bl	800aa24 <atoi>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	709a      	strb	r2, [r3, #2]
        actuador->id = 0;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	605a      	str	r2, [r3, #4]
    }

    return identificator;
 8002d6a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	37a0      	adds	r7, #160	; 0xa0
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	0800d184 	.word	0x0800d184

08002d7c <i2c_slave_rx_process>:

void i2c_slave_rx_process(uint8_t* data, uint16_t size) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0a4      	sub	sp, #144	; 0x90
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint8_t dataBuf[rxBUFFER_SIZE];
	strcpy(dataBuf, data);
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f007 ffb2 	bl	800acfe <strcpy>

	xQueueSendFromISR(i2c_rx_q, &dataBuf, &xHigherPriorityTaskWoken);
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <i2c_slave_rx_process+0x50>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002da2:	f107 010c 	add.w	r1, r7, #12
 8002da6:	2300      	movs	r3, #0
 8002da8:	f005 fa54 	bl	8008254 <xQueueGenericSendFromISR>

	//i2c_set_txBuffer((uint8_t *) MSG, strlen(MSG));

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <i2c_slave_rx_process+0x48>
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <i2c_slave_rx_process+0x54>)
 8002db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
}
 8002dc4:	bf00      	nop
 8002dc6:	3790      	adds	r7, #144	; 0x90
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000408 	.word	0x20000408
 8002dd0:	e000ed04 	.word	0xe000ed04

08002dd4 <dataLog>:
//uint8_t datalog (log_t log, uint8_t *str, size_t strSize){
//	if(log->status < 4){
//		memcpy(log->strLog, str, strSize);
//	}
//}
void dataLog(log_t *log, const uint8_t *str) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]

    size_t longitudActual = strlen((const char *)log->strLog);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3302      	adds	r3, #2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd f9b4 	bl	8000150 <strlen>
 8002de8:	60f8      	str	r0, [r7, #12]
    size_t longitudNueva = strlen((const char *)str);
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f7fd f9b0 	bl	8000150 <strlen>
 8002df0:	60b8      	str	r0, [r7, #8]

    if (longitudActual + longitudNueva < txBUFFER_SIZE) {
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4413      	add	r3, r2
 8002df8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dfa:	d80b      	bhi.n	8002e14 <dataLog+0x40>
		strcat((char *)log->strLog, (const char *)str);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3302      	adds	r3, #2
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f007 ff6c 	bl	800ace0 <strcat>
		log->status++;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	701a      	strb	r2, [r3, #0]
    }
    else{
    }
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <t_Comextern>:
/*
 *tarea para la comunicacion con la raspberry
 */
static void t_Comextern (void *pvParameters){
 8002e1c:	b5b0      	push	{r4, r5, r7, lr}
 8002e1e:	b0fc      	sub	sp, #496	; 0x1f0
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	6018      	str	r0, [r3, #0]

	UBaseType_t uxHighWaterMark;
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8002e26:	2000      	movs	r0, #0
 8002e28:	f006 fe6e 	bl	8009b08 <uxTaskGetStackHighWaterMark>
 8002e2c:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8

	actuador_t aux_actuador, i2c_rx_actuador;
	usuario_t aux_usuario, i2c_rx_usuario;
	uint8_t identificator = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
	log_t log = {0, WRITE, ""};
 8002e36:	4ad5      	ldr	r2, [pc, #852]	; (800318c <t_Comextern+0x370>)
 8002e38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	2282      	movs	r2, #130	; 0x82
 8002e40:	4618      	mov	r0, r3
 8002e42:	f007 fe2d 	bl	800aaa0 <memcpy>
	uint8_t log_flag = 0, count = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de

#ifdef LOG_APERTURA
	apertura_t apertura;
#endif

	uint8_t globalID = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
	while(1){
//*limitar cantidad de logs
//*corregir id global
//*que tarea menu funcione bien

		if(xQueueReceive(i2c_rx_q, &i2c_rx_buf, nonBlocking) == pdTRUE){
 8002e58:	4bcd      	ldr	r3, [pc, #820]	; (8003190 <t_Comextern+0x374>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002e60:	2200      	movs	r2, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f005 faa8 	bl	80083b8 <xQueueReceive>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	f040 8092 	bne.w	8002f94 <t_Comextern+0x178>
			//trama usuario -> 00(idglobal),p(identificador),1(user),xxxx1111(password),0(nroIntentos),00(accion_t),$
			//trama maestra -> 00(idglobal),p(identificador),0(maestro),12345678,0(password),0(nroIntentos,00(accion_t),$
			//trama actuador -> 00(idglobal),a(identificador),1(tipo),xxxx(relleno),0(accion),00(accion_anterior),$
			//pedido de log -> 00(idglobal),l(identificador),x(relleno),xxxxxxxx(relleno),x(relleno),xx(relleno),$

			identificator = parse_csv_to_struct(i2c_rx_buf, &i2c_rx_usuario, &i2c_rx_actuador, &log);
 8002e70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e74:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8002e78:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8002e7c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002e80:	f7ff fec0 	bl	8002c04 <parse_csv_to_struct>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df

			if(identificator == 'l'){
 8002e8a:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8002e8e:	2b6c      	cmp	r3, #108	; 0x6c
 8002e90:	d173      	bne.n	8002f7a <t_Comextern+0x15e>
				if(log.accion == SCANN){
 8002e92:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d125      	bne.n	8002ee6 <t_Comextern+0xca>
					if(log.status != 0)
 8002e9a:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <t_Comextern+0x8e>
						log.accion = ACC_OK;
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 8002ea8:	e002      	b.n	8002eb0 <t_Comextern+0x94>
					else
						log.accion = ACC_DENEGADO;
 8002eaa:	2306      	movs	r3, #6
 8002eac:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

					snprintf(i2c_tx_buf, txBUFFER_SIZE, "00,l,x,xxxxxxxx,%01d,%02d,$", log.accion, log.status);
 8002eb0:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8002eba:	f107 0010 	add.w	r0, r7, #16
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	4ab4      	ldr	r2, [pc, #720]	; (8003194 <t_Comextern+0x378>)
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	f007 feb7 	bl	800ac38 <sniprintf>
					//xQueueSendToBack(i2c_tx_q, &i2c_tx_buf, nonBlocking);
					i2c_set_txBuffer(i2c_tx_buf, strlen(i2c_tx_buf));
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd f93e 	bl	8000150 <strlen>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd febc 	bl	8000c5c <i2c_set_txBuffer>
 8002ee4:	e045      	b.n	8002f72 <t_Comextern+0x156>
				}
				else if(log.accion == READ && log.status > 0){
 8002ee6:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d141      	bne.n	8002f72 <t_Comextern+0x156>
 8002eee:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03d      	beq.n	8002f72 <t_Comextern+0x156>
					memset(i2c_tx_buf, '\0', i2cFRAME_SIZE);
 8002ef6:	f107 0310 	add.w	r3, r7, #16
 8002efa:	2216      	movs	r2, #22
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f007 fddc 	bl	800aabc <memset>
					memcpy(i2c_tx_buf, log.strLog+(count * i2cFRAME_SIZE), i2cFRAME_SIZE);
 8002f04:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8002f08:	2216      	movs	r2, #22
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f14:	3302      	adds	r3, #2
 8002f16:	1899      	adds	r1, r3, r2
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	2216      	movs	r2, #22
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f007 fdbe 	bl	800aaa0 <memcpy>

					//xQueueSendToBack(i2c_tx_q, &i2c_tx_buf, nonBlocking);
		    		i2c_set_txBuffer(i2c_tx_buf, strlen(i2c_tx_buf));
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd f911 	bl	8000150 <strlen>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fe8f 	bl	8000c5c <i2c_set_txBuffer>
		    		log.status--;
 8002f3e:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		    		count++;
 8002f4a:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de
		    		if(log.status == 0){
 8002f54:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <t_Comextern+0x156>
						count = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de
						memset(log.strLog, '\0', txBUFFER_SIZE);
 8002f62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f66:	3302      	adds	r3, #2
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f007 fda5 	bl	800aabc <memset>
		    		}
		    	}
		    	log.accion = WRITE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 8002f78:	e00c      	b.n	8002f94 <t_Comextern+0x178>
			}
			else if(identificator == 'p'){
 8002f7a:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8002f7e:	2b70      	cmp	r3, #112	; 0x70
 8002f80:	d108      	bne.n	8002f94 <t_Comextern+0x178>
				//display_Print(TEMPORARY_PRINTING, "CONEXION REMOTA", 0);
				xQueueSendToBack(reqAcceso_q, &i2c_rx_usuario, blockForever);
 8002f82:	4b85      	ldr	r3, [pc, #532]	; (8003198 <t_Comextern+0x37c>)
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	f005 f862 	bl	8008058 <xQueueGenericSend>
			else{
				//error de identificador
			}

		}
		if(uxQueueMessagesWaiting(respAcceso_aux_q)){
 8002f94:	4b81      	ldr	r3, [pc, #516]	; (800319c <t_Comextern+0x380>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f005 faed 	bl	8008578 <uxQueueMessagesWaiting>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d050      	beq.n	8003046 <t_Comextern+0x22a>
			xQueueReceive(respAcceso_aux_q, &aux_usuario, blockForever);
 8002fa4:	4b7d      	ldr	r3, [pc, #500]	; (800319c <t_Comextern+0x380>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f005 fa01 	bl	80083b8 <xQueueReceive>

			aux_usuario.id = globalID++;
 8002fb6:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	f887 21dd 	strb.w	r2, [r7, #477]	; 0x1dd
 8002fc0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			snprintf(i2c_tx_buf, txBUFFER_SIZE, "%02d,r,%01d,%08d,%01d,%02d,$", aux_usuario.id, aux_usuario.nroUsuario, aux_usuario.clave, aux_usuario.intentosDisp, aux_usuario.accion);
 8002fc4:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8002fc8:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8002fcc:	461c      	mov	r4, r3
 8002fce:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002fd2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002fd6:	f897 01b4 	ldrb.w	r0, [r7, #436]	; 0x1b4
 8002fda:	4605      	mov	r5, r0
 8002fdc:	f107 0010 	add.w	r0, r7, #16
 8002fe0:	9503      	str	r5, [sp, #12]
 8002fe2:	9202      	str	r2, [sp, #8]
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	9400      	str	r4, [sp, #0]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4a6d      	ldr	r2, [pc, #436]	; (80031a0 <t_Comextern+0x384>)
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	f007 fe23 	bl	800ac38 <sniprintf>
			if(identificator == 'p')
 8002ff2:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8002ff6:	2b70      	cmp	r3, #112	; 0x70
 8002ff8:	d10c      	bne.n	8003014 <t_Comextern+0x1f8>
				i2c_set_txBuffer(i2c_tx_buf, strlen(i2c_tx_buf));
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd f8a6 	bl	8000150 <strlen>
 8003004:	4603      	mov	r3, r0
 8003006:	b2da      	uxtb	r2, r3
 8003008:	f107 0310 	add.w	r3, r7, #16
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fe24 	bl	8000c5c <i2c_set_txBuffer>

			dataLog(&log, (uint8_t *)i2c_tx_buf);
 8003014:	f107 0210 	add.w	r2, r7, #16
 8003018:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fed8 	bl	8002dd4 <dataLog>

			identificator = 't';
 8003024:	2374      	movs	r3, #116	; 0x74
 8003026:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
			portYIELD();
 800302a:	4b5e      	ldr	r3, [pc, #376]	; (80031a4 <t_Comextern+0x388>)
 800302c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	f3bf 8f6f 	isb	sy
			xQueueReset(respAcceso_q);
 800303a:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <t_Comextern+0x38c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f004 ff07 	bl	8007e54 <xQueueGenericReset>
		}
		if(uxQueueMessagesWaiting(reqAcceso_aux_q)){
 8003046:	4b59      	ldr	r3, [pc, #356]	; (80031ac <t_Comextern+0x390>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f005 fa94 	bl	8008578 <uxQueueMessagesWaiting>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d02e      	beq.n	80030b4 <t_Comextern+0x298>
			xQueueReceive(reqAcceso_aux_q, &aux_usuario, blockForever);
 8003056:	4b55      	ldr	r3, [pc, #340]	; (80031ac <t_Comextern+0x390>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 800305e:	f04f 32ff 	mov.w	r2, #4294967295
 8003062:	4618      	mov	r0, r3
 8003064:	f005 f9a8 	bl	80083b8 <xQueueReceive>

			aux_usuario.id = globalID++;
 8003068:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	f887 21dd 	strb.w	r2, [r7, #477]	; 0x1dd
 8003072:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			snprintf(i2c_tx_buf, txBUFFER_SIZE, "%02d,p,%01d,%08d,%01d,%02d,$", aux_usuario.id, aux_usuario.nroUsuario, aux_usuario.clave, aux_usuario.intentosDisp, aux_usuario.accion);
 8003076:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800307a:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800307e:	461c      	mov	r4, r3
 8003080:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003084:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003088:	f897 01b4 	ldrb.w	r0, [r7, #436]	; 0x1b4
 800308c:	4605      	mov	r5, r0
 800308e:	f107 0010 	add.w	r0, r7, #16
 8003092:	9503      	str	r5, [sp, #12]
 8003094:	9202      	str	r2, [sp, #8]
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	9400      	str	r4, [sp, #0]
 800309a:	460b      	mov	r3, r1
 800309c:	4a44      	ldr	r2, [pc, #272]	; (80031b0 <t_Comextern+0x394>)
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	f007 fdca 	bl	800ac38 <sniprintf>

			dataLog(&log, (uint8_t *)i2c_tx_buf);
 80030a4:	f107 0210 	add.w	r2, r7, #16
 80030a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fe90 	bl	8002dd4 <dataLog>
		}
		if(uxQueueMessagesWaiting(actuador_aux_q)){
 80030b4:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <t_Comextern+0x398>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f005 fa5d 	bl	8008578 <uxQueueMessagesWaiting>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d025      	beq.n	8003110 <t_Comextern+0x2f4>
			xQueueReceive(actuador_aux_q, &aux_actuador, blockForever);
 80030c4:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <t_Comextern+0x398>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	4618      	mov	r0, r3
 80030d2:	f005 f971 	bl	80083b8 <xQueueReceive>

			aux_actuador.id = globalID++;
 80030d6:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	f887 21dd 	strb.w	r2, [r7, #477]	; 0x1dd
 80030e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
			snprintf(i2c_tx_buf, txBUFFER_SIZE, "%02d,a,%01d,xxxxxxxx,0,%02d,$", aux_actuador.id, aux_actuador.tipo, aux_actuador.accion);
 80030e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80030e8:	f897 21cc 	ldrb.w	r2, [r7, #460]	; 0x1cc
 80030ec:	f897 11cd 	ldrb.w	r1, [r7, #461]	; 0x1cd
 80030f0:	f107 0010 	add.w	r0, r7, #16
 80030f4:	9101      	str	r1, [sp, #4]
 80030f6:	9200      	str	r2, [sp, #0]
 80030f8:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <t_Comextern+0x39c>)
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	f007 fd9c 	bl	800ac38 <sniprintf>

			dataLog(&log, (uint8_t *)i2c_tx_buf);
 8003100:	f107 0210 	add.w	r2, r7, #16
 8003104:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe62 	bl	8002dd4 <dataLog>
		}
#ifdef LOG_APERTURA
		if(uxQueueMessagesWaiting(apertura_q)){
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <t_Comextern+0x3a0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f005 fa2f 	bl	8008578 <uxQueueMessagesWaiting>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02c      	beq.n	800317a <t_Comextern+0x35e>
			xQueueReceive(apertura_q, &apertura, blockForever);
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <t_Comextern+0x3a0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f107 0108 	add.w	r1, r7, #8
 8003128:	f04f 32ff 	mov.w	r2, #4294967295
 800312c:	4618      	mov	r0, r3
 800312e:	f005 f943 	bl	80083b8 <xQueueReceive>

			apertura.id = globalID++;
 8003132:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	f887 21dd 	strb.w	r2, [r7, #477]	; 0x1dd
 800313c:	461a      	mov	r2, r3
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	601a      	str	r2, [r3, #0]
			snprintf(i2c_tx_buf, txBUFFER_SIZE, "%02d,d,0,xxxxxxxx,%01d,%02d,$", apertura.id, apertura.estado, apertura.accion);
 8003144:	f107 0308 	add.w	r3, r7, #8
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	795b      	ldrb	r3, [r3, #5]
 8003150:	4619      	mov	r1, r3
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	791b      	ldrb	r3, [r3, #4]
 8003158:	f107 0010 	add.w	r0, r7, #16
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	9100      	str	r1, [sp, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <t_Comextern+0x3a4>)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	f007 fd67 	bl	800ac38 <sniprintf>

			dataLog(&log, (uint8_t *)i2c_tx_buf);
 800316a:	f107 0210 	add.w	r2, r7, #16
 800316e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fe2d 	bl	8002dd4 <dataLog>
		}
#endif
		if(globalID > 99) globalID = 0;
 800317a:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 800317e:	2b63      	cmp	r3, #99	; 0x63
 8003180:	f67f ae6a 	bls.w	8002e58 <t_Comextern+0x3c>
 8003184:	2300      	movs	r3, #0
 8003186:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
		if(xQueueReceive(i2c_rx_q, &i2c_rx_buf, nonBlocking) == pdTRUE){
 800318a:	e665      	b.n	8002e58 <t_Comextern+0x3c>
 800318c:	0800d224 	.word	0x0800d224
 8003190:	20000408 	.word	0x20000408
 8003194:	0800d188 	.word	0x0800d188
 8003198:	20000350 	.word	0x20000350
 800319c:	2000045c 	.word	0x2000045c
 80031a0:	0800d1a4 	.word	0x0800d1a4
 80031a4:	e000ed04 	.word	0xe000ed04
 80031a8:	20000458 	.word	0x20000458
 80031ac:	20000404 	.word	0x20000404
 80031b0:	0800d1c4 	.word	0x0800d1c4
 80031b4:	200003fc 	.word	0x200003fc
 80031b8:	0800d1e4 	.word	0x0800d1e4
 80031bc:	200001dc 	.word	0x200001dc
 80031c0:	0800d204 	.word	0x0800d204

080031c4 <err>:
}
#endif


//Debugging function
static void err (uint8_t errCode){
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
	while(1);
 80031ce:	e7fe      	b.n	80031ce <err+0xa>

080031d0 <HAL_GPIO_EXTI_Callback>:
}

//ISR
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
	columna_t columna;
	actuador_t actuador;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]

	if(GPIO_Pin != PA_Pin){
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d029      	beq.n	8003238 <HAL_GPIO_EXTI_Callback+0x68>
		switch(GPIO_Pin){
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ea:	d00f      	beq.n	800320c <HAL_GPIO_EXTI_Callback+0x3c>
 80031ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f0:	dc18      	bgt.n	8003224 <HAL_GPIO_EXTI_Callback+0x54>
 80031f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f6:	d00c      	beq.n	8003212 <HAL_GPIO_EXTI_Callback+0x42>
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fc:	dc12      	bgt.n	8003224 <HAL_GPIO_EXTI_Callback+0x54>
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d00c      	beq.n	800321e <HAL_GPIO_EXTI_Callback+0x4e>
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d006      	beq.n	8003218 <HAL_GPIO_EXTI_Callback+0x48>
 800320a:	e00b      	b.n	8003224 <HAL_GPIO_EXTI_Callback+0x54>
			case col1_Pin:
				columna = COLUMNA_1;
 800320c:	2300      	movs	r3, #0
 800320e:	75fb      	strb	r3, [r7, #23]
				break;
 8003210:	e008      	b.n	8003224 <HAL_GPIO_EXTI_Callback+0x54>
			case col2_Pin:
				columna = COLUMNA_2;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
				break;
 8003216:	e005      	b.n	8003224 <HAL_GPIO_EXTI_Callback+0x54>
			case col3_Pin:
				columna = COLUMNA_3;
 8003218:	2302      	movs	r3, #2
 800321a:	75fb      	strb	r3, [r7, #23]
				break;
 800321c:	e002      	b.n	8003224 <HAL_GPIO_EXTI_Callback+0x54>
			case col4_Pin:
				columna = COLUMNA_4;
 800321e:	2303      	movs	r3, #3
 8003220:	75fb      	strb	r3, [r7, #23]
				break;
 8003222:	bf00      	nop
		}
		xQueueSendFromISR(columna_q, &columna, &xHigherPriorityTaskWoken);
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	f107 0208 	add.w	r2, r7, #8
 800322c:	f107 0117 	add.w	r1, r7, #23
 8003230:	2300      	movs	r3, #0
 8003232:	f005 f80f 	bl	8008254 <xQueueGenericSendFromISR>
 8003236:	e00c      	b.n	8003252 <HAL_GPIO_EXTI_Callback+0x82>
	}
	else{
		actuador.tipo = PUERTA;
 8003238:	2301      	movs	r3, #1
 800323a:	733b      	strb	r3, [r7, #12]
		actuador.accion = CAMBIO_ESTADO;
 800323c:	230d      	movs	r3, #13
 800323e:	737b      	strb	r3, [r7, #13]
		xQueueSendFromISR(actuador_q, &actuador, &xHigherPriorityTaskWoken);
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	f107 0208 	add.w	r2, r7, #8
 8003248:	f107 010c 	add.w	r1, r7, #12
 800324c:	2300      	movs	r3, #0
 800324e:	f005 f801 	bl	8008254 <xQueueGenericSendFromISR>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_GPIO_EXTI_Callback+0x98>
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_GPIO_EXTI_Callback+0xa8>)
 800325a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	f3bf 8f6f 	isb	sy
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000464 	.word	0x20000464
 8003274:	20000454 	.word	0x20000454
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b0b6      	sub	sp, #216	; 0xd8
 8003280:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003282:	f000 fd9b 	bl	8003dbc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003286:	f000 f959 	bl	800353c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800328a:	f000 fa47 	bl	800371c <MX_GPIO_Init>
  MX_I2C1_Init();
 800328e:	f000 f99b 	bl	80035c8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003292:	f000 f9f5 	bl	8003680 <MX_TIM2_Init>
  MX_I2C2_Init();
 8003296:	f000 f9c5 	bl	8003624 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
#ifdef EGB
  i2c_start_listen_check(&hi2c2);
 800329a:	4888      	ldr	r0, [pc, #544]	; (80034bc <main+0x240>)
 800329c:	f001 fe5a 	bl	8004f54 <HAL_I2C_EnableListen_IT>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <main+0x2e>
 80032a6:	f000 fb03 	bl	80038b0 <Error_Handler>
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  hal_digitalOutput(LOW, acAlarma);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032b0:	4883      	ldr	r0, [pc, #524]	; (80034c0 <main+0x244>)
 80032b2:	f001 fae4 	bl	800487e <HAL_GPIO_WritePin>
  hal_digitalOutput(LOW, acPuerta);
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032bc:	4880      	ldr	r0, [pc, #512]	; (80034c0 <main+0x244>)
 80032be:	f001 fade 	bl	800487e <HAL_GPIO_WritePin>
  hal_digitalOutput(HIGH, ledRojo);
 80032c2:	2201      	movs	r2, #1
 80032c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032c8:	487d      	ldr	r0, [pc, #500]	; (80034c0 <main+0x244>)
 80032ca:	f001 fad8 	bl	800487e <HAL_GPIO_WritePin>
  hal_digitalOutput(HIGH, ledVerde);
 80032ce:	2201      	movs	r2, #1
 80032d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032d4:	487a      	ldr	r0, [pc, #488]	; (80034c0 <main+0x244>)
 80032d6:	f001 fad2 	bl	800487e <HAL_GPIO_WritePin>
  //dummyDataMemoryRecording();

  hal_digitalOutput(HIGH,builtinLed);
 80032da:	2201      	movs	r2, #1
 80032dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032e0:	4878      	ldr	r0, [pc, #480]	; (80034c4 <main+0x248>)
 80032e2:	f001 facc 	bl	800487e <HAL_GPIO_WritePin>

  columna_q = xQueueCreate(1, sizeof(columna));
 80032e6:	2200      	movs	r2, #0
 80032e8:	2101      	movs	r1, #1
 80032ea:	2001      	movs	r0, #1
 80032ec:	f004 fe42 	bl	8007f74 <xQueueGenericCreate>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <main+0x24c>)
 80032f4:	6013      	str	r3, [r2, #0]
  tecla_q = xQueueCreate(1, sizeof(tecla));
 80032f6:	2200      	movs	r2, #0
 80032f8:	2102      	movs	r1, #2
 80032fa:	2001      	movs	r0, #1
 80032fc:	f004 fe3a 	bl	8007f74 <xQueueGenericCreate>
 8003300:	4603      	mov	r3, r0
 8003302:	4a72      	ldr	r2, [pc, #456]	; (80034cc <main+0x250>)
 8003304:	6013      	str	r3, [r2, #0]
  display_q = xQueueCreate(2,sizeof(display));
 8003306:	2200      	movs	r2, #0
 8003308:	2121      	movs	r1, #33	; 0x21
 800330a:	2002      	movs	r0, #2
 800330c:	f004 fe32 	bl	8007f74 <xQueueGenericCreate>
 8003310:	4603      	mov	r3, r0
 8003312:	4a6f      	ldr	r2, [pc, #444]	; (80034d0 <main+0x254>)
 8003314:	6013      	str	r3, [r2, #0]
  actuador_q = xQueueCreate(1, sizeof(actuador));
 8003316:	2200      	movs	r2, #0
 8003318:	2108      	movs	r1, #8
 800331a:	2001      	movs	r0, #1
 800331c:	f004 fe2a 	bl	8007f74 <xQueueGenericCreate>
 8003320:	4603      	mov	r3, r0
 8003322:	4a6c      	ldr	r2, [pc, #432]	; (80034d4 <main+0x258>)
 8003324:	6013      	str	r3, [r2, #0]
  reqAcceso_q = xQueueCreate(1, sizeof(usuario));
 8003326:	2200      	movs	r2, #0
 8003328:	2110      	movs	r1, #16
 800332a:	2001      	movs	r0, #1
 800332c:	f004 fe22 	bl	8007f74 <xQueueGenericCreate>
 8003330:	4603      	mov	r3, r0
 8003332:	4a69      	ldr	r2, [pc, #420]	; (80034d8 <main+0x25c>)
 8003334:	6013      	str	r3, [r2, #0]
  respAcceso_q = xQueueCreate(1, sizeof(usuario));
 8003336:	2200      	movs	r2, #0
 8003338:	2110      	movs	r1, #16
 800333a:	2001      	movs	r0, #1
 800333c:	f004 fe1a 	bl	8007f74 <xQueueGenericCreate>
 8003340:	4603      	mov	r3, r0
 8003342:	4a66      	ldr	r2, [pc, #408]	; (80034dc <main+0x260>)
 8003344:	6013      	str	r3, [r2, #0]
  flashcmd_q = xQueueCreate(1,sizeof(usuario));
 8003346:	2200      	movs	r2, #0
 8003348:	2110      	movs	r1, #16
 800334a:	2001      	movs	r0, #1
 800334c:	f004 fe12 	bl	8007f74 <xQueueGenericCreate>
 8003350:	4603      	mov	r3, r0
 8003352:	4a63      	ldr	r2, [pc, #396]	; (80034e0 <main+0x264>)
 8003354:	6013      	str	r3, [r2, #0]
  flashdata_q = xQueueCreate(1,sizeof(usuario));
 8003356:	2200      	movs	r2, #0
 8003358:	2110      	movs	r1, #16
 800335a:	2001      	movs	r0, #1
 800335c:	f004 fe0a 	bl	8007f74 <xQueueGenericCreate>
 8003360:	4603      	mov	r3, r0
 8003362:	4a60      	ldr	r2, [pc, #384]	; (80034e4 <main+0x268>)
 8003364:	6013      	str	r3, [r2, #0]

#ifdef EGB
  actuador_aux_q = xQueueCreate(1, sizeof(actuador));
 8003366:	2200      	movs	r2, #0
 8003368:	2108      	movs	r1, #8
 800336a:	2001      	movs	r0, #1
 800336c:	f004 fe02 	bl	8007f74 <xQueueGenericCreate>
 8003370:	4603      	mov	r3, r0
 8003372:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <main+0x26c>)
 8003374:	6013      	str	r3, [r2, #0]
  reqAcceso_aux_q = xQueueCreate(1, sizeof(usuario));
 8003376:	2200      	movs	r2, #0
 8003378:	2110      	movs	r1, #16
 800337a:	2001      	movs	r0, #1
 800337c:	f004 fdfa 	bl	8007f74 <xQueueGenericCreate>
 8003380:	4603      	mov	r3, r0
 8003382:	4a5a      	ldr	r2, [pc, #360]	; (80034ec <main+0x270>)
 8003384:	6013      	str	r3, [r2, #0]
  respAcceso_aux_q = xQueueCreate(1, sizeof(usuario));
 8003386:	2200      	movs	r2, #0
 8003388:	2110      	movs	r1, #16
 800338a:	2001      	movs	r0, #1
 800338c:	f004 fdf2 	bl	8007f74 <xQueueGenericCreate>
 8003390:	4603      	mov	r3, r0
 8003392:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <main+0x274>)
 8003394:	6013      	str	r3, [r2, #0]
#ifdef LOG_APERTURA
  apertura_q = xQueueCreate(2, sizeof(apertura));
 8003396:	2200      	movs	r2, #0
 8003398:	2108      	movs	r1, #8
 800339a:	2002      	movs	r0, #2
 800339c:	f004 fdea 	bl	8007f74 <xQueueGenericCreate>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4a54      	ldr	r2, [pc, #336]	; (80034f4 <main+0x278>)
 80033a4:	6013      	str	r3, [r2, #0]
#endif

  i2c_rx_q = xQueueCreate(1, rxBUFFER_SIZE);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	2001      	movs	r0, #1
 80033ac:	f004 fde2 	bl	8007f74 <xQueueGenericCreate>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4a51      	ldr	r2, [pc, #324]	; (80034f8 <main+0x27c>)
 80033b4:	6013      	str	r3, [r2, #0]
  i2c_tx_q = xQueueCreate(1, txBUFFER_SIZE);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	2001      	movs	r0, #1
 80033bc:	f004 fdda 	bl	8007f74 <xQueueGenericCreate>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <main+0x280>)
 80033c4:	6013      	str	r3, [r2, #0]

#endif

  if(xTaskCreate(t_Menu, "", tMenu_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tMenu, &tMenu_h) != pdPASS)
 80033c6:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <main+0x284>)
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2301      	movs	r3, #1
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80033d4:	494b      	ldr	r1, [pc, #300]	; (8003504 <main+0x288>)
 80033d6:	484c      	ldr	r0, [pc, #304]	; (8003508 <main+0x28c>)
 80033d8:	f005 fa7e 	bl	80088d8 <xTaskCreate>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d002      	beq.n	80033e8 <main+0x16c>
	  err(0);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7ff feee 	bl	80031c4 <err>
  if(xTaskCreate(t_Teclado, "", tTeclado_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tTeclado, &tTeclado_h) != pdPASS)
 80033e8:	4b48      	ldr	r3, [pc, #288]	; (800350c <main+0x290>)
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	2302      	movs	r3, #2
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2300      	movs	r3, #0
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	4943      	ldr	r1, [pc, #268]	; (8003504 <main+0x288>)
 80033f6:	4846      	ldr	r0, [pc, #280]	; (8003510 <main+0x294>)
 80033f8:	f005 fa6e 	bl	80088d8 <xTaskCreate>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d002      	beq.n	8003408 <main+0x18c>
	  err(1);
 8003402:	2001      	movs	r0, #1
 8003404:	f7ff fede 	bl	80031c4 <err>
  if(xTaskCreate(t_Display, "", tDisplay_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tDisplay, &tDisplay_h) != pdPASS)
 8003408:	4b42      	ldr	r3, [pc, #264]	; (8003514 <main+0x298>)
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2301      	movs	r3, #1
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2300      	movs	r3, #0
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	493b      	ldr	r1, [pc, #236]	; (8003504 <main+0x288>)
 8003416:	4840      	ldr	r0, [pc, #256]	; (8003518 <main+0x29c>)
 8003418:	f005 fa5e 	bl	80088d8 <xTaskCreate>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d002      	beq.n	8003428 <main+0x1ac>
	  err(2);
 8003422:	2002      	movs	r0, #2
 8003424:	f7ff fece 	bl	80031c4 <err>
  if(xTaskCreate(t_Flash, "", tFlash_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tFlash, &tFlash_h) != pdPASS)
 8003428:	4b3c      	ldr	r3, [pc, #240]	; (800351c <main+0x2a0>)
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	2302      	movs	r3, #2
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2300      	movs	r3, #0
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	4933      	ldr	r1, [pc, #204]	; (8003504 <main+0x288>)
 8003436:	483a      	ldr	r0, [pc, #232]	; (8003520 <main+0x2a4>)
 8003438:	f005 fa4e 	bl	80088d8 <xTaskCreate>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d002      	beq.n	8003448 <main+0x1cc>
	  err(3);
 8003442:	2003      	movs	r0, #3
 8003444:	f7ff febe 	bl	80031c4 <err>
  if(xTaskCreate(t_ControlAcceso, "", tControlAcceso_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tControlAcceso, &tControlAcceso_h) != pdPASS)
 8003448:	4b36      	ldr	r3, [pc, #216]	; (8003524 <main+0x2a8>)
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	2301      	movs	r3, #1
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003456:	492b      	ldr	r1, [pc, #172]	; (8003504 <main+0x288>)
 8003458:	4833      	ldr	r0, [pc, #204]	; (8003528 <main+0x2ac>)
 800345a:	f005 fa3d 	bl	80088d8 <xTaskCreate>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d002      	beq.n	800346a <main+0x1ee>
	  err(4);
 8003464:	2004      	movs	r0, #4
 8003466:	f7ff fead 	bl	80031c4 <err>
  if(xTaskCreate(t_Actuadores, "", tActuadores_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tActuadores, &tActuadores_h) != pdPASS)
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <main+0x2b0>)
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2303      	movs	r3, #3
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2300      	movs	r3, #0
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	4923      	ldr	r1, [pc, #140]	; (8003504 <main+0x288>)
 8003478:	482d      	ldr	r0, [pc, #180]	; (8003530 <main+0x2b4>)
 800347a:	f005 fa2d 	bl	80088d8 <xTaskCreate>
 800347e:	4603      	mov	r3, r0
 8003480:	2b01      	cmp	r3, #1
 8003482:	d002      	beq.n	800348a <main+0x20e>
	  err(5);
 8003484:	2005      	movs	r0, #5
 8003486:	f7ff fe9d 	bl	80031c4 <err>
#ifdef EGB
  if(xTaskCreate(t_Comextern, "", tComextern_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tComextern, &tComextern_h) != pdPASS)
 800348a:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <main+0x2b8>)
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2301      	movs	r3, #1
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2300      	movs	r3, #0
 8003494:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003498:	491a      	ldr	r1, [pc, #104]	; (8003504 <main+0x288>)
 800349a:	4827      	ldr	r0, [pc, #156]	; (8003538 <main+0x2bc>)
 800349c:	f005 fa1c 	bl	80088d8 <xTaskCreate>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d002      	beq.n	80034ac <main+0x230>
  	  err(6);
 80034a6:	2006      	movs	r0, #6
 80034a8:	f7ff fe8c 	bl	80031c4 <err>
//  if(xTaskCreate(t_LedBlink, "", tLedBlink_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tLedBlink, &tLedBlink_h) != pdPASS)
//  	  err(7);
#endif
  vTaskStartScheduler();
 80034ac:	f005 fcec 	bl	8008e88 <vTaskStartScheduler>
 80034b0:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	37d0      	adds	r7, #208	; 0xd0
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200003a8 	.word	0x200003a8
 80034c0:	40010c00 	.word	0x40010c00
 80034c4:	40011000 	.word	0x40011000
 80034c8:	20000464 	.word	0x20000464
 80034cc:	20000400 	.word	0x20000400
 80034d0:	20000460 	.word	0x20000460
 80034d4:	20000454 	.word	0x20000454
 80034d8:	20000350 	.word	0x20000350
 80034dc:	20000458 	.word	0x20000458
 80034e0:	20000348 	.word	0x20000348
 80034e4:	2000034c 	.word	0x2000034c
 80034e8:	200003fc 	.word	0x200003fc
 80034ec:	20000404 	.word	0x20000404
 80034f0:	2000045c 	.word	0x2000045c
 80034f4:	200001dc 	.word	0x200001dc
 80034f8:	20000408 	.word	0x20000408
 80034fc:	200001d8 	.word	0x200001d8
 8003500:	200001bc 	.word	0x200001bc
 8003504:	0800d2f0 	.word	0x0800d2f0
 8003508:	08001251 	.word	0x08001251
 800350c:	200001c8 	.word	0x200001c8
 8003510:	08002a1d 	.word	0x08002a1d
 8003514:	200001c0 	.word	0x200001c0
 8003518:	08002091 	.word	0x08002091
 800351c:	200001c4 	.word	0x200001c4
 8003520:	08002285 	.word	0x08002285
 8003524:	200001cc 	.word	0x200001cc
 8003528:	08002389 	.word	0x08002389
 800352c:	200001d0 	.word	0x200001d0
 8003530:	0800282d 	.word	0x0800282d
 8003534:	200001d4 	.word	0x200001d4
 8003538:	08002e1d 	.word	0x08002e1d

0800353c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b090      	sub	sp, #64	; 0x40
 8003540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003542:	f107 0318 	add.w	r3, r7, #24
 8003546:	2228      	movs	r2, #40	; 0x28
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f007 fab6 	bl	800aabc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800356c:	2301      	movs	r3, #1
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003570:	2302      	movs	r3, #2
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800357a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003580:	f107 0318 	add.w	r3, r7, #24
 8003584:	4618      	mov	r0, r3
 8003586:	f003 fc29 	bl	8006ddc <HAL_RCC_OscConfig>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003590:	f000 f98e 	bl	80038b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003594:	230f      	movs	r3, #15
 8003596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003598:	2302      	movs	r3, #2
 800359a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	2102      	movs	r1, #2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 fe94 	bl	80072dc <HAL_RCC_ClockConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80035ba:	f000 f979 	bl	80038b0 <Error_Handler>
  }
}
 80035be:	bf00      	nop
 80035c0:	3740      	adds	r7, #64	; 0x40
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <MX_I2C1_Init+0x50>)
 80035ce:	4a13      	ldr	r2, [pc, #76]	; (800361c <MX_I2C1_Init+0x54>)
 80035d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <MX_I2C1_Init+0x50>)
 80035d4:	4a12      	ldr	r2, [pc, #72]	; (8003620 <MX_I2C1_Init+0x58>)
 80035d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <MX_I2C1_Init+0x50>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <MX_I2C1_Init+0x50>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <MX_I2C1_Init+0x50>)
 80035e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <MX_I2C1_Init+0x50>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <MX_I2C1_Init+0x50>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <MX_I2C1_Init+0x50>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <MX_I2C1_Init+0x50>)
 8003600:	2200      	movs	r2, #0
 8003602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003604:	4804      	ldr	r0, [pc, #16]	; (8003618 <MX_I2C1_Init+0x50>)
 8003606:	f001 f96b 	bl	80048e0 <HAL_I2C_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003610:	f000 f94e 	bl	80038b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000354 	.word	0x20000354
 800361c:	40005400 	.word	0x40005400
 8003620:	000186a0 	.word	0x000186a0

08003624 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <MX_I2C2_Init+0x50>)
 800362a:	4a13      	ldr	r2, [pc, #76]	; (8003678 <MX_I2C2_Init+0x54>)
 800362c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <MX_I2C2_Init+0x50>)
 8003630:	4a12      	ldr	r2, [pc, #72]	; (800367c <MX_I2C2_Init+0x58>)
 8003632:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <MX_I2C2_Init+0x50>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 42;
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <MX_I2C2_Init+0x50>)
 800363c:	222a      	movs	r2, #42	; 0x2a
 800363e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <MX_I2C2_Init+0x50>)
 8003642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003646:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <MX_I2C2_Init+0x50>)
 800364a:	2200      	movs	r2, #0
 800364c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <MX_I2C2_Init+0x50>)
 8003650:	2200      	movs	r2, #0
 8003652:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <MX_I2C2_Init+0x50>)
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <MX_I2C2_Init+0x50>)
 800365c:	2200      	movs	r2, #0
 800365e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003660:	4804      	ldr	r0, [pc, #16]	; (8003674 <MX_I2C2_Init+0x50>)
 8003662:	f001 f93d 	bl	80048e0 <HAL_I2C_Init>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800366c:	f000 f920 	bl	80038b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	200003a8 	.word	0x200003a8
 8003678:	40005800 	.word	0x40005800
 800367c:	000186a0 	.word	0x000186a0

08003680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003686:	f107 0308 	add.w	r3, r7, #8
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003694:	463b      	mov	r3, r7
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <MX_TIM2_Init+0x98>)
 800369e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <MX_TIM2_Init+0x98>)
 80036a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80036aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <MX_TIM2_Init+0x98>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <MX_TIM2_Init+0x98>)
 80036b4:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80036b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <MX_TIM2_Init+0x98>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <MX_TIM2_Init+0x98>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036c6:	4814      	ldr	r0, [pc, #80]	; (8003718 <MX_TIM2_Init+0x98>)
 80036c8:	f003 ffc6 	bl	8007658 <HAL_TIM_Base_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80036d2:	f000 f8ed 	bl	80038b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4619      	mov	r1, r3
 80036e2:	480d      	ldr	r0, [pc, #52]	; (8003718 <MX_TIM2_Init+0x98>)
 80036e4:	f004 f962 	bl	80079ac <HAL_TIM_ConfigClockSource>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80036ee:	f000 f8df 	bl	80038b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036fa:	463b      	mov	r3, r7
 80036fc:	4619      	mov	r1, r3
 80036fe:	4806      	ldr	r0, [pc, #24]	; (8003718 <MX_TIM2_Init+0x98>)
 8003700:	f004 fb38 	bl	8007d74 <HAL_TIMEx_MasterConfigSynchronization>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800370a:	f000 f8d1 	bl	80038b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000040c 	.word	0x2000040c

0800371c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003722:	f107 0310 	add.w	r3, r7, #16
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003730:	4b51      	ldr	r3, [pc, #324]	; (8003878 <MX_GPIO_Init+0x15c>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	4a50      	ldr	r2, [pc, #320]	; (8003878 <MX_GPIO_Init+0x15c>)
 8003736:	f043 0310 	orr.w	r3, r3, #16
 800373a:	6193      	str	r3, [r2, #24]
 800373c:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <MX_GPIO_Init+0x15c>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003748:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <MX_GPIO_Init+0x15c>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4a4a      	ldr	r2, [pc, #296]	; (8003878 <MX_GPIO_Init+0x15c>)
 800374e:	f043 0320 	orr.w	r3, r3, #32
 8003752:	6193      	str	r3, [r2, #24]
 8003754:	4b48      	ldr	r3, [pc, #288]	; (8003878 <MX_GPIO_Init+0x15c>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003760:	4b45      	ldr	r3, [pc, #276]	; (8003878 <MX_GPIO_Init+0x15c>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4a44      	ldr	r2, [pc, #272]	; (8003878 <MX_GPIO_Init+0x15c>)
 8003766:	f043 0308 	orr.w	r3, r3, #8
 800376a:	6193      	str	r3, [r2, #24]
 800376c:	4b42      	ldr	r3, [pc, #264]	; (8003878 <MX_GPIO_Init+0x15c>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <MX_GPIO_Init+0x15c>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	4a3e      	ldr	r2, [pc, #248]	; (8003878 <MX_GPIO_Init+0x15c>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6193      	str	r3, [r2, #24]
 8003784:	4b3c      	ldr	r3, [pc, #240]	; (8003878 <MX_GPIO_Init+0x15c>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(builtinLed_GPIO_Port, builtinLed_Pin, GPIO_PIN_RESET);
 8003790:	2200      	movs	r2, #0
 8003792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003796:	4839      	ldr	r0, [pc, #228]	; (800387c <MX_GPIO_Init+0x160>)
 8003798:	f001 f871 	bl	800487e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, acPuerta_Pin|acAlarma_Pin|ledRojo_Pin|ledVerde_Pin
 800379c:	2200      	movs	r2, #0
 800379e:	f24f 0118 	movw	r1, #61464	; 0xf018
 80037a2:	4837      	ldr	r0, [pc, #220]	; (8003880 <MX_GPIO_Init+0x164>)
 80037a4:	f001 f86b 	bl	800487e <HAL_GPIO_WritePin>
                          |fil2_Pin|fil1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, fil4_Pin|fil3_Pin, GPIO_PIN_RESET);
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80037ae:	4835      	ldr	r0, [pc, #212]	; (8003884 <MX_GPIO_Init+0x168>)
 80037b0:	f001 f865 	bl	800487e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : builtinLed_Pin */
  GPIO_InitStruct.Pin = builtinLed_Pin;
 80037b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ba:	2301      	movs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2302      	movs	r3, #2
 80037c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(builtinLed_GPIO_Port, &GPIO_InitStruct);
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	4619      	mov	r1, r3
 80037cc:	482b      	ldr	r0, [pc, #172]	; (800387c <MX_GPIO_Init+0x160>)
 80037ce:	f000 febb 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA_Pin */
  GPIO_InitStruct.Pin = PA_Pin;
 80037d2:	2302      	movs	r3, #2
 80037d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037d6:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <MX_GPIO_Init+0x16c>)
 80037d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037da:	2302      	movs	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PA_GPIO_Port, &GPIO_InitStruct);
 80037de:	f107 0310 	add.w	r3, r7, #16
 80037e2:	4619      	mov	r1, r3
 80037e4:	4826      	ldr	r0, [pc, #152]	; (8003880 <MX_GPIO_Init+0x164>)
 80037e6:	f000 feaf 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : acPuerta_Pin acAlarma_Pin ledRojo_Pin ledVerde_Pin
                           fil2_Pin fil1_Pin */
  GPIO_InitStruct.Pin = acPuerta_Pin|acAlarma_Pin|ledRojo_Pin|ledVerde_Pin
 80037ea:	f24f 0318 	movw	r3, #61464	; 0xf018
 80037ee:	613b      	str	r3, [r7, #16]
                          |fil2_Pin|fil1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f0:	2301      	movs	r3, #1
 80037f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	2302      	movs	r3, #2
 80037fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fc:	f107 0310 	add.w	r3, r7, #16
 8003800:	4619      	mov	r1, r3
 8003802:	481f      	ldr	r0, [pc, #124]	; (8003880 <MX_GPIO_Init+0x164>)
 8003804:	f000 fea0 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : col4_Pin col3_Pin col2_Pin col1_Pin */
  GPIO_InitStruct.Pin = col4_Pin|col3_Pin|col2_Pin|col1_Pin;
 8003808:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800380c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800380e:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <MX_GPIO_Init+0x16c>)
 8003810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003812:	2301      	movs	r3, #1
 8003814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	f107 0310 	add.w	r3, r7, #16
 800381a:	4619      	mov	r1, r3
 800381c:	4819      	ldr	r0, [pc, #100]	; (8003884 <MX_GPIO_Init+0x168>)
 800381e:	f000 fe93 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : fil4_Pin fil3_Pin */
  GPIO_InitStruct.Pin = fil4_Pin|fil3_Pin;
 8003822:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8003826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003830:	2302      	movs	r3, #2
 8003832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	4619      	mov	r1, r3
 800383a:	4812      	ldr	r0, [pc, #72]	; (8003884 <MX_GPIO_Init+0x168>)
 800383c:	f000 fe84 	bl	8004548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 8, 0);
 8003840:	2200      	movs	r2, #0
 8003842:	2108      	movs	r1, #8
 8003844:	2007      	movs	r0, #7
 8003846:	f000 fbc4 	bl	8003fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800384a:	2007      	movs	r0, #7
 800384c:	f000 fbdd 	bl	800400a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 8, 0);
 8003850:	2200      	movs	r2, #0
 8003852:	2108      	movs	r1, #8
 8003854:	2017      	movs	r0, #23
 8003856:	f000 fbbc 	bl	8003fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800385a:	2017      	movs	r0, #23
 800385c:	f000 fbd5 	bl	800400a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8003860:	2200      	movs	r2, #0
 8003862:	2108      	movs	r1, #8
 8003864:	2028      	movs	r0, #40	; 0x28
 8003866:	f000 fbb4 	bl	8003fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800386a:	2028      	movs	r0, #40	; 0x28
 800386c:	f000 fbcd 	bl	800400a <HAL_NVIC_EnableIRQ>

}
 8003870:	bf00      	nop
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	40011000 	.word	0x40011000
 8003880:	40010c00 	.word	0x40010c00
 8003884:	40010800 	.word	0x40010800
 8003888:	10210000 	.word	0x10210000

0800388c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	actuador_t acc2;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800389e:	f000 faa3 	bl	8003de8 <HAL_IncTick>
//	  xQueueSendFromISR(actuador_q, &acc2, &xHigherPriorityTaskWoken);
//	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
//  }

  /* USER CODE END Callback 1 */
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40012c00 	.word	0x40012c00

080038b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038b4:	b672      	cpsid	i
}
 80038b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <Error_Handler+0x8>
	...

080038bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_MspInit+0x5c>)
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_MspInit+0x5c>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6193      	str	r3, [r2, #24]
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_MspInit+0x5c>)
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_MspInit+0x5c>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <HAL_MspInit+0x5c>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	61d3      	str	r3, [r2, #28]
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_MspInit+0x5c>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_MspInit+0x60>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_MspInit+0x60>)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	40021000 	.word	0x40021000
 800391c:	40010000 	.word	0x40010000

08003920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 031c 	add.w	r3, r7, #28
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3a      	ldr	r2, [pc, #232]	; (8003a24 <HAL_I2C_MspInit+0x104>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d133      	bne.n	80039a8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003940:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 8003946:	f043 0308 	orr.w	r3, r3, #8
 800394a:	6193      	str	r3, [r2, #24]
 800394c:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003958:	f44f 7340 	mov.w	r3, #768	; 0x300
 800395c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800395e:	2312      	movs	r3, #18
 8003960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003962:	2303      	movs	r3, #3
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003966:	f107 031c 	add.w	r3, r7, #28
 800396a:	4619      	mov	r1, r3
 800396c:	482f      	ldr	r0, [pc, #188]	; (8003a2c <HAL_I2C_MspInit+0x10c>)
 800396e:	f000 fdeb 	bl	8004548 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003972:	4b2f      	ldr	r3, [pc, #188]	; (8003a30 <HAL_I2C_MspInit+0x110>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	f043 0302 	orr.w	r3, r3, #2
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003988:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <HAL_I2C_MspInit+0x110>)
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 8003994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003998:	61d3      	str	r3, [r2, #28]
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039a6:	e039      	b.n	8003a1c <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <HAL_I2C_MspInit+0x114>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d134      	bne.n	8003a1c <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 80039b8:	f043 0308 	orr.w	r3, r3, #8
 80039bc:	6193      	str	r3, [r2, #24]
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039d0:	2312      	movs	r3, #18
 80039d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039d4:	2303      	movs	r3, #3
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d8:	f107 031c 	add.w	r3, r7, #28
 80039dc:	4619      	mov	r1, r3
 80039de:	4813      	ldr	r0, [pc, #76]	; (8003a2c <HAL_I2C_MspInit+0x10c>)
 80039e0:	f000 fdb2 	bl	8004548 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039e4:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a0f      	ldr	r2, [pc, #60]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 80039ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_I2C_MspInit+0x108>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 8, 0);
 80039fc:	2200      	movs	r2, #0
 80039fe:	2108      	movs	r1, #8
 8003a00:	2021      	movs	r0, #33	; 0x21
 8003a02:	f000 fae6 	bl	8003fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003a06:	2021      	movs	r0, #33	; 0x21
 8003a08:	f000 faff 	bl	800400a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 8, 0);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2108      	movs	r1, #8
 8003a10:	2022      	movs	r0, #34	; 0x22
 8003a12:	f000 fade 	bl	8003fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003a16:	2022      	movs	r0, #34	; 0x22
 8003a18:	f000 faf7 	bl	800400a <HAL_NVIC_EnableIRQ>
}
 8003a1c:	bf00      	nop
 8003a1e:	3730      	adds	r7, #48	; 0x30
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40005400 	.word	0x40005400
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40010c00 	.word	0x40010c00
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40005800 	.word	0x40005800

08003a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d113      	bne.n	8003a72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a4a:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <HAL_TIM_Base_MspInit+0x44>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <HAL_TIM_Base_MspInit+0x44>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	61d3      	str	r3, [r2, #28]
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_TIM_Base_MspInit+0x44>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2108      	movs	r1, #8
 8003a66:	201c      	movs	r0, #28
 8003a68:	f000 fab3 	bl	8003fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a6c:	201c      	movs	r0, #28
 8003a6e:	f000 facc 	bl	800400a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08c      	sub	sp, #48	; 0x30
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003a90:	2200      	movs	r2, #0
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	2019      	movs	r0, #25
 8003a96:	f000 fa9c 	bl	8003fd2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003a9a:	2019      	movs	r0, #25
 8003a9c:	f000 fab5 	bl	800400a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_InitTick+0x9c>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_InitTick+0x9c>)
 8003aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003aaa:	6193      	str	r3, [r2, #24]
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_InitTick+0x9c>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ab8:	f107 0210 	add.w	r2, r7, #16
 8003abc:	f107 0314 	add.w	r3, r7, #20
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 fd7a 	bl	80075bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f003 fd64 	bl	8007594 <HAL_RCC_GetPCLK2Freq>
 8003acc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <HAL_InitTick+0xa0>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	0c9b      	lsrs	r3, r3, #18
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <HAL_InitTick+0xa4>)
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <HAL_InitTick+0xa8>)
 8003ae0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_InitTick+0xa4>)
 8003ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003aea:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <HAL_InitTick+0xa4>)
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <HAL_InitTick+0xa4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_InitTick+0xa4>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003afc:	4809      	ldr	r0, [pc, #36]	; (8003b24 <HAL_InitTick+0xa4>)
 8003afe:	f003 fdab 	bl	8007658 <HAL_TIM_Base_Init>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b08:	4806      	ldr	r0, [pc, #24]	; (8003b24 <HAL_InitTick+0xa4>)
 8003b0a:	f003 fdf5 	bl	80076f8 <HAL_TIM_Base_Start_IT>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	e000      	b.n	8003b14 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3730      	adds	r7, #48	; 0x30
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	431bde83 	.word	0x431bde83
 8003b24:	20000468 	.word	0x20000468
 8003b28:	40012c00 	.word	0x40012c00

08003b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <NMI_Handler+0x4>

08003b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <HardFault_Handler+0x4>

08003b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <MemManage_Handler+0x4>

08003b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b42:	e7fe      	b.n	8003b42 <BusFault_Handler+0x4>

08003b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <UsageFault_Handler+0x4>

08003b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b5a:	2002      	movs	r0, #2
 8003b5c:	f000 fea8 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b6c:	f000 fea0 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003b70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b74:	f000 fe9c 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <TIM1_UP_IRQHandler+0x10>)
 8003b82:	f003 fe0b 	bl	800779c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000468 	.word	0x20000468

08003b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <TIM2_IRQHandler+0x10>)
 8003b96:	f003 fe01 	bl	800779c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2000040c 	.word	0x2000040c

08003ba4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <I2C2_EV_IRQHandler+0x10>)
 8003baa:	f001 fa08 	bl	8004fbe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200003a8 	.word	0x200003a8

08003bb8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <I2C2_ER_IRQHandler+0x10>)
 8003bbe:	f001 fb6f 	bl	80052a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200003a8 	.word	0x200003a8

08003bcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003bd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003bd4:	f000 fe6c 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003bd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003bdc:	f000 fe68 	bl	80048b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
	return 1;
 8003be8:	2301      	movs	r3, #1
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <_kill>:

int _kill(int pid, int sig)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bfc:	f006 ff16 	bl	800aa2c <__errno>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2216      	movs	r2, #22
 8003c04:	601a      	str	r2, [r3, #0]
	return -1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_exit>:

void _exit (int status)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff ffe7 	bl	8003bf2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c24:	e7fe      	b.n	8003c24 <_exit+0x12>

08003c26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e00a      	b.n	8003c4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c38:	f3af 8000 	nop.w
 8003c3c:	4601      	mov	r1, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	60ba      	str	r2, [r7, #8]
 8003c44:	b2ca      	uxtb	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	dbf0      	blt.n	8003c38 <_read+0x12>
	}

return len;
 8003c56:	687b      	ldr	r3, [r7, #4]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e009      	b.n	8003c86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	60ba      	str	r2, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	dbf1      	blt.n	8003c72 <_write+0x12>
	}
	return len;
 8003c8e:	687b      	ldr	r3, [r7, #4]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_close>:

int _close(int file)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	return -1;
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <_isatty>:

int _isatty(int file)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	return 1;
 8003cd4:	2301      	movs	r3, #1
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
	return 0;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d00:	4a14      	ldr	r2, [pc, #80]	; (8003d54 <_sbrk+0x5c>)
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <_sbrk+0x60>)
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <_sbrk+0x64>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <_sbrk+0x64>)
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <_sbrk+0x68>)
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <_sbrk+0x64>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d207      	bcs.n	8003d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d28:	f006 fe80 	bl	800aa2c <__errno>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	220c      	movs	r2, #12
 8003d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	e009      	b.n	8003d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <_sbrk+0x64>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <_sbrk+0x64>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <_sbrk+0x64>)
 8003d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20005000 	.word	0x20005000
 8003d58:	00000400 	.word	0x00000400
 8003d5c:	200001e0 	.word	0x200001e0
 8003d60:	20000528 	.word	0x20000528

08003d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d70:	f7ff fff8 	bl	8003d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d74:	480b      	ldr	r0, [pc, #44]	; (8003da4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003d76:	490c      	ldr	r1, [pc, #48]	; (8003da8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003d78:	4a0c      	ldr	r2, [pc, #48]	; (8003dac <LoopFillZerobss+0x16>)
  movs r3, #0
 8003d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d7c:	e002      	b.n	8003d84 <LoopCopyDataInit>

08003d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d82:	3304      	adds	r3, #4

08003d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d88:	d3f9      	bcc.n	8003d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d8c:	4c09      	ldr	r4, [pc, #36]	; (8003db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d90:	e001      	b.n	8003d96 <LoopFillZerobss>

08003d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d94:	3204      	adds	r2, #4

08003d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d98:	d3fb      	bcc.n	8003d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d9a:	f006 fe4d 	bl	800aa38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d9e:	f7ff fa6d 	bl	800327c <main>
  bx lr
 8003da2:	4770      	bx	lr
  ldr r0, =_sdata
 8003da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003da8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003dac:	0800d5d0 	.word	0x0800d5d0
  ldr r2, =_sbss
 8003db0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003db4:	20000528 	.word	0x20000528

08003db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003db8:	e7fe      	b.n	8003db8 <ADC1_2_IRQHandler>
	...

08003dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <HAL_Init+0x28>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <HAL_Init+0x28>)
 8003dc6:	f043 0310 	orr.w	r3, r3, #16
 8003dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dcc:	2003      	movs	r0, #3
 8003dce:	f000 f8f5 	bl	8003fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f7ff fe54 	bl	8003a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dd8:	f7ff fd70 	bl	80038bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40022000 	.word	0x40022000

08003de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_IncTick+0x1c>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_IncTick+0x20>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <HAL_IncTick+0x20>)
 8003dfa:	6013      	str	r3, [r2, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	20000018 	.word	0x20000018
 8003e08:	200004b0 	.word	0x200004b0

08003e0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <HAL_GetTick+0x10>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	200004b0 	.word	0x200004b0

08003e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e28:	f7ff fff0 	bl	8003e0c <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d005      	beq.n	8003e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_Delay+0x44>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e46:	bf00      	nop
 8003e48:	f7ff ffe0 	bl	8003e0c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d8f7      	bhi.n	8003e48 <HAL_Delay+0x28>
  {
  }
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000018 	.word	0x20000018

08003e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <__NVIC_SetPriorityGrouping+0x44>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e84:	4013      	ands	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e9a:	4a04      	ldr	r2, [pc, #16]	; (8003eac <__NVIC_SetPriorityGrouping+0x44>)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	60d3      	str	r3, [r2, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 0307 	and.w	r3, r3, #7
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	db0b      	blt.n	8003ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	f003 021f 	and.w	r2, r3, #31
 8003ee4:	4906      	ldr	r1, [pc, #24]	; (8003f00 <__NVIC_EnableIRQ+0x34>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2001      	movs	r0, #1
 8003eee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	e000e100 	.word	0xe000e100

08003f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	db0a      	blt.n	8003f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	490c      	ldr	r1, [pc, #48]	; (8003f50 <__NVIC_SetPriority+0x4c>)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	440b      	add	r3, r1
 8003f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f2c:	e00a      	b.n	8003f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	4908      	ldr	r1, [pc, #32]	; (8003f54 <__NVIC_SetPriority+0x50>)
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	3b04      	subs	r3, #4
 8003f3c:	0112      	lsls	r2, r2, #4
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	440b      	add	r3, r1
 8003f42:	761a      	strb	r2, [r3, #24]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000e100 	.word	0xe000e100
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	; 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f1c3 0307 	rsb	r3, r3, #7
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	bf28      	it	cs
 8003f76:	2304      	movcs	r3, #4
 8003f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2b06      	cmp	r3, #6
 8003f80:	d902      	bls.n	8003f88 <NVIC_EncodePriority+0x30>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3b03      	subs	r3, #3
 8003f86:	e000      	b.n	8003f8a <NVIC_EncodePriority+0x32>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43da      	mvns	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	43d9      	mvns	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	4313      	orrs	r3, r2
         );
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3724      	adds	r7, #36	; 0x24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff4f 	bl	8003e68 <__NVIC_SetPriorityGrouping>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe4:	f7ff ff64 	bl	8003eb0 <__NVIC_GetPriorityGrouping>
 8003fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	6978      	ldr	r0, [r7, #20]
 8003ff0:	f7ff ffb2 	bl	8003f58 <NVIC_EncodePriority>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff81 	bl	8003f04 <__NVIC_SetPriority>
}
 8004002:	bf00      	nop
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	4603      	mov	r3, r0
 8004012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff57 	bl	8003ecc <__NVIC_EnableIRQ>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d005      	beq.n	800404c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e051      	b.n	80040f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 020e 	bic.w	r2, r2, #14
 800405a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <HAL_DMA_Abort_IT+0xd4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d029      	beq.n	80040ca <HAL_DMA_Abort_IT+0xa2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a21      	ldr	r2, [pc, #132]	; (8004100 <HAL_DMA_Abort_IT+0xd8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d022      	beq.n	80040c6 <HAL_DMA_Abort_IT+0x9e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_DMA_Abort_IT+0xdc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01a      	beq.n	80040c0 <HAL_DMA_Abort_IT+0x98>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_DMA_Abort_IT+0xe0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d012      	beq.n	80040ba <HAL_DMA_Abort_IT+0x92>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	; (800410c <HAL_DMA_Abort_IT+0xe4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00a      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x8c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_DMA_Abort_IT+0xe8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d102      	bne.n	80040ae <HAL_DMA_Abort_IT+0x86>
 80040a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040ac:	e00e      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040b2:	e00b      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b8:	e008      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040be:	e005      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040c4:	e002      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040c6:	2310      	movs	r3, #16
 80040c8:	e000      	b.n	80040cc <HAL_DMA_Abort_IT+0xa4>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4a11      	ldr	r2, [pc, #68]	; (8004114 <HAL_DMA_Abort_IT+0xec>)
 80040ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
    } 
  }
  return status;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40020008 	.word	0x40020008
 8004100:	4002001c 	.word	0x4002001c
 8004104:	40020030 	.word	0x40020030
 8004108:	40020044 	.word	0x40020044
 800410c:	40020058 	.word	0x40020058
 8004110:	4002006c 	.word	0x4002006c
 8004114:	40020000 	.word	0x40020000

08004118 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004126:	b2db      	uxtb	r3, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr
	...

08004134 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800414e:	4b2f      	ldr	r3, [pc, #188]	; (800420c <HAL_FLASH_Program+0xd8>)
 8004150:	7e1b      	ldrb	r3, [r3, #24]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_FLASH_Program+0x26>
 8004156:	2302      	movs	r3, #2
 8004158:	e054      	b.n	8004204 <HAL_FLASH_Program+0xd0>
 800415a:	4b2c      	ldr	r3, [pc, #176]	; (800420c <HAL_FLASH_Program+0xd8>)
 800415c:	2201      	movs	r2, #1
 800415e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004160:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004164:	f000 f8b2 	bl	80042cc <FLASH_WaitForLastOperation>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d144      	bne.n	80041fc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d102      	bne.n	800417e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004178:	2301      	movs	r3, #1
 800417a:	757b      	strb	r3, [r7, #21]
 800417c:	e007      	b.n	800418e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d102      	bne.n	800418a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004184:	2302      	movs	r3, #2
 8004186:	757b      	strb	r3, [r7, #21]
 8004188:	e001      	b.n	800418e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800418a:	2304      	movs	r3, #4
 800418c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800418e:	2300      	movs	r3, #0
 8004190:	75bb      	strb	r3, [r7, #22]
 8004192:	e02d      	b.n	80041f0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004194:	7dbb      	ldrb	r3, [r7, #22]
 8004196:	005a      	lsls	r2, r3, #1
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	eb02 0c03 	add.w	ip, r2, r3
 800419e:	7dbb      	ldrb	r3, [r7, #22]
 80041a0:	0119      	lsls	r1, r3, #4
 80041a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a6:	f1c1 0620 	rsb	r6, r1, #32
 80041aa:	f1a1 0020 	sub.w	r0, r1, #32
 80041ae:	fa22 f401 	lsr.w	r4, r2, r1
 80041b2:	fa03 f606 	lsl.w	r6, r3, r6
 80041b6:	4334      	orrs	r4, r6
 80041b8:	fa23 f000 	lsr.w	r0, r3, r0
 80041bc:	4304      	orrs	r4, r0
 80041be:	fa23 f501 	lsr.w	r5, r3, r1
 80041c2:	b2a3      	uxth	r3, r4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4660      	mov	r0, ip
 80041c8:	f000 f864 	bl	8004294 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041d0:	f000 f87c 	bl	80042cc <FLASH_WaitForLastOperation>
 80041d4:	4603      	mov	r3, r0
 80041d6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_FLASH_Program+0xdc>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <HAL_FLASH_Program+0xdc>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80041ea:	7dbb      	ldrb	r3, [r7, #22]
 80041ec:	3301      	adds	r3, #1
 80041ee:	75bb      	strb	r3, [r7, #22]
 80041f0:	7dba      	ldrb	r2, [r7, #22]
 80041f2:	7d7b      	ldrb	r3, [r7, #21]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3cd      	bcc.n	8004194 <HAL_FLASH_Program+0x60>
 80041f8:	e000      	b.n	80041fc <HAL_FLASH_Program+0xc8>
      {
        break;
 80041fa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_FLASH_Program+0xd8>)
 80041fe:	2200      	movs	r2, #0
 8004200:	761a      	strb	r2, [r3, #24]

  return status;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
}
 8004204:	4618      	mov	r0, r3
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800420c:	200004b8 	.word	0x200004b8
 8004210:	40022000 	.word	0x40022000

08004214 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_FLASH_Unlock+0x40>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00d      	beq.n	8004246 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_FLASH_Unlock+0x40>)
 800422c:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <HAL_FLASH_Unlock+0x44>)
 800422e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_FLASH_Unlock+0x40>)
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_FLASH_Unlock+0x48>)
 8004234:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <HAL_FLASH_Unlock+0x40>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004246:	79fb      	ldrb	r3, [r7, #7]
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40022000 	.word	0x40022000
 8004258:	45670123 	.word	0x45670123
 800425c:	cdef89ab 	.word	0xcdef89ab

08004260 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_FLASH_Lock+0x1c>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_FLASH_Lock+0x1c>)
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40022000 	.word	0x40022000

08004280 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004284:	4b02      	ldr	r3, [pc, #8]	; (8004290 <HAL_FLASH_GetError+0x10>)
 8004286:	69db      	ldr	r3, [r3, #28]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	200004b8 	.word	0x200004b8

08004294 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <FLASH_Program_HalfWord+0x30>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <FLASH_Program_HalfWord+0x34>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <FLASH_Program_HalfWord+0x34>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	887a      	ldrh	r2, [r7, #2]
 80042b6:	801a      	strh	r2, [r3, #0]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	200004b8 	.word	0x200004b8
 80042c8:	40022000 	.word	0x40022000

080042cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80042d4:	f7ff fd9a 	bl	8003e0c <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042da:	e010      	b.n	80042fe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d00c      	beq.n	80042fe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <FLASH_WaitForLastOperation+0x2e>
 80042ea:	f7ff fd8f 	bl	8003e0c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d201      	bcs.n	80042fe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e025      	b.n	800434a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <FLASH_WaitForLastOperation+0x88>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e8      	bne.n	80042dc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <FLASH_WaitForLastOperation+0x88>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004316:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <FLASH_WaitForLastOperation+0x88>)
 8004318:	2220      	movs	r2, #32
 800431a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <FLASH_WaitForLastOperation+0x88>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <FLASH_WaitForLastOperation+0x88>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <FLASH_WaitForLastOperation+0x88>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004340:	f000 f80a 	bl	8004358 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000

08004358 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <FLASH_SetErrorCode+0x98>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800436e:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <FLASH_SetErrorCode+0x9c>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <FLASH_SetErrorCode+0x9c>)
 8004378:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f043 0310 	orr.w	r3, r3, #16
 8004380:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004382:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <FLASH_SetErrorCode+0x98>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <FLASH_SetErrorCode+0x9c>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <FLASH_SetErrorCode+0x9c>)
 8004398:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80043a2:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <FLASH_SetErrorCode+0x98>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <FLASH_SetErrorCode+0x9c>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	4a0f      	ldr	r2, [pc, #60]	; (80043f4 <FLASH_SetErrorCode+0x9c>)
 80043b8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <FLASH_SetErrorCode+0x98>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <FLASH_SetErrorCode+0x98>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f240 1201 	movw	r2, #257	; 0x101
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d106      	bne.n	80043de <FLASH_SetErrorCode+0x86>
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <FLASH_SetErrorCode+0x98>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <FLASH_SetErrorCode+0x98>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	61d3      	str	r3, [r2, #28]
}  
 80043dc:	e002      	b.n	80043e4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <FLASH_SetErrorCode+0x98>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60d3      	str	r3, [r2, #12]
}  
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40022000 	.word	0x40022000
 80043f4:	200004b8 	.word	0x200004b8

080043f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800440a:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <HAL_FLASHEx_Erase+0xd0>)
 800440c:	7e1b      	ldrb	r3, [r3, #24]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_FLASHEx_Erase+0x1e>
 8004412:	2302      	movs	r3, #2
 8004414:	e053      	b.n	80044be <HAL_FLASHEx_Erase+0xc6>
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_FLASHEx_Erase+0xd0>)
 8004418:	2201      	movs	r2, #1
 800441a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d116      	bne.n	8004452 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004428:	f7ff ff50 	bl	80042cc <FLASH_WaitForLastOperation>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d141      	bne.n	80044b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004432:	2001      	movs	r0, #1
 8004434:	f000 f84c 	bl	80044d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800443c:	f7ff ff46 	bl	80042cc <FLASH_WaitForLastOperation>
 8004440:	4603      	mov	r3, r0
 8004442:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <HAL_FLASHEx_Erase+0xd4>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	4a20      	ldr	r2, [pc, #128]	; (80044cc <HAL_FLASHEx_Erase+0xd4>)
 800444a:	f023 0304 	bic.w	r3, r3, #4
 800444e:	6113      	str	r3, [r2, #16]
 8004450:	e031      	b.n	80044b6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004452:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004456:	f7ff ff39 	bl	80042cc <FLASH_WaitForLastOperation>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d12a      	bne.n	80044b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f04f 32ff 	mov.w	r2, #4294967295
 8004466:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	e019      	b.n	80044a4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004470:	68b8      	ldr	r0, [r7, #8]
 8004472:	f000 f849 	bl	8004508 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004476:	f24c 3050 	movw	r0, #50000	; 0xc350
 800447a:	f7ff ff27 	bl	80042cc <FLASH_WaitForLastOperation>
 800447e:	4603      	mov	r3, r0
 8004480:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_FLASHEx_Erase+0xd4>)
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4a11      	ldr	r2, [pc, #68]	; (80044cc <HAL_FLASHEx_Erase+0xd4>)
 8004488:	f023 0302 	bic.w	r3, r3, #2
 800448c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	601a      	str	r2, [r3, #0]
            break;
 800449a:	e00c      	b.n	80044b6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044a2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	029a      	lsls	r2, r3, #10
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d3dc      	bcc.n	8004470 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_FLASHEx_Erase+0xd0>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	761a      	strb	r2, [r3, #24]

  return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200004b8 	.word	0x200004b8
 80044cc:	40022000 	.word	0x40022000

080044d0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <FLASH_MassErase+0x30>)
 80044da:	2200      	movs	r2, #0
 80044dc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <FLASH_MassErase+0x34>)
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	4a08      	ldr	r2, [pc, #32]	; (8004504 <FLASH_MassErase+0x34>)
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <FLASH_MassErase+0x34>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <FLASH_MassErase+0x34>)
 80044f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	200004b8 	.word	0x200004b8
 8004504:	40022000 	.word	0x40022000

08004508 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <FLASH_PageErase+0x38>)
 8004512:	2200      	movs	r2, #0
 8004514:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <FLASH_PageErase+0x3c>)
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <FLASH_PageErase+0x3c>)
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <FLASH_PageErase+0x3c>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <FLASH_PageErase+0x3c>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	4a05      	ldr	r2, [pc, #20]	; (8004544 <FLASH_PageErase+0x3c>)
 800452e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004532:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	200004b8 	.word	0x200004b8
 8004544:	40022000 	.word	0x40022000

08004548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004548:	b480      	push	{r7}
 800454a:	b08b      	sub	sp, #44	; 0x2c
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004556:	2300      	movs	r3, #0
 8004558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455a:	e169      	b.n	8004830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800455c:	2201      	movs	r2, #1
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	429a      	cmp	r2, r3
 8004576:	f040 8158 	bne.w	800482a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a9a      	ldr	r2, [pc, #616]	; (80047e8 <HAL_GPIO_Init+0x2a0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d05e      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 8004584:	4a98      	ldr	r2, [pc, #608]	; (80047e8 <HAL_GPIO_Init+0x2a0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d875      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 800458a:	4a98      	ldr	r2, [pc, #608]	; (80047ec <HAL_GPIO_Init+0x2a4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d058      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 8004590:	4a96      	ldr	r2, [pc, #600]	; (80047ec <HAL_GPIO_Init+0x2a4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d86f      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 8004596:	4a96      	ldr	r2, [pc, #600]	; (80047f0 <HAL_GPIO_Init+0x2a8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d052      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 800459c:	4a94      	ldr	r2, [pc, #592]	; (80047f0 <HAL_GPIO_Init+0x2a8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d869      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 80045a2:	4a94      	ldr	r2, [pc, #592]	; (80047f4 <HAL_GPIO_Init+0x2ac>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d04c      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 80045a8:	4a92      	ldr	r2, [pc, #584]	; (80047f4 <HAL_GPIO_Init+0x2ac>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d863      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 80045ae:	4a92      	ldr	r2, [pc, #584]	; (80047f8 <HAL_GPIO_Init+0x2b0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d046      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 80045b4:	4a90      	ldr	r2, [pc, #576]	; (80047f8 <HAL_GPIO_Init+0x2b0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d85d      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 80045ba:	2b12      	cmp	r3, #18
 80045bc:	d82a      	bhi.n	8004614 <HAL_GPIO_Init+0xcc>
 80045be:	2b12      	cmp	r3, #18
 80045c0:	d859      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <HAL_GPIO_Init+0x80>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	08004643 	.word	0x08004643
 80045cc:	0800461d 	.word	0x0800461d
 80045d0:	0800462f 	.word	0x0800462f
 80045d4:	08004671 	.word	0x08004671
 80045d8:	08004677 	.word	0x08004677
 80045dc:	08004677 	.word	0x08004677
 80045e0:	08004677 	.word	0x08004677
 80045e4:	08004677 	.word	0x08004677
 80045e8:	08004677 	.word	0x08004677
 80045ec:	08004677 	.word	0x08004677
 80045f0:	08004677 	.word	0x08004677
 80045f4:	08004677 	.word	0x08004677
 80045f8:	08004677 	.word	0x08004677
 80045fc:	08004677 	.word	0x08004677
 8004600:	08004677 	.word	0x08004677
 8004604:	08004677 	.word	0x08004677
 8004608:	08004677 	.word	0x08004677
 800460c:	08004625 	.word	0x08004625
 8004610:	08004639 	.word	0x08004639
 8004614:	4a79      	ldr	r2, [pc, #484]	; (80047fc <HAL_GPIO_Init+0x2b4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800461a:	e02c      	b.n	8004676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	623b      	str	r3, [r7, #32]
          break;
 8004622:	e029      	b.n	8004678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	3304      	adds	r3, #4
 800462a:	623b      	str	r3, [r7, #32]
          break;
 800462c:	e024      	b.n	8004678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	3308      	adds	r3, #8
 8004634:	623b      	str	r3, [r7, #32]
          break;
 8004636:	e01f      	b.n	8004678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	330c      	adds	r3, #12
 800463e:	623b      	str	r3, [r7, #32]
          break;
 8004640:	e01a      	b.n	8004678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800464a:	2304      	movs	r3, #4
 800464c:	623b      	str	r3, [r7, #32]
          break;
 800464e:	e013      	b.n	8004678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004658:	2308      	movs	r3, #8
 800465a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	611a      	str	r2, [r3, #16]
          break;
 8004662:	e009      	b.n	8004678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004664:	2308      	movs	r3, #8
 8004666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	615a      	str	r2, [r3, #20]
          break;
 800466e:	e003      	b.n	8004678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004670:	2300      	movs	r3, #0
 8004672:	623b      	str	r3, [r7, #32]
          break;
 8004674:	e000      	b.n	8004678 <HAL_GPIO_Init+0x130>
          break;
 8004676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2bff      	cmp	r3, #255	; 0xff
 800467c:	d801      	bhi.n	8004682 <HAL_GPIO_Init+0x13a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	e001      	b.n	8004686 <HAL_GPIO_Init+0x13e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2bff      	cmp	r3, #255	; 0xff
 800468c:	d802      	bhi.n	8004694 <HAL_GPIO_Init+0x14c>
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	e002      	b.n	800469a <HAL_GPIO_Init+0x152>
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	3b08      	subs	r3, #8
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	210f      	movs	r1, #15
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	6a39      	ldr	r1, [r7, #32]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	fa01 f303 	lsl.w	r3, r1, r3
 80046b4:	431a      	orrs	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80b1 	beq.w	800482a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046c8:	4b4d      	ldr	r3, [pc, #308]	; (8004800 <HAL_GPIO_Init+0x2b8>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	4a4c      	ldr	r2, [pc, #304]	; (8004800 <HAL_GPIO_Init+0x2b8>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6193      	str	r3, [r2, #24]
 80046d4:	4b4a      	ldr	r3, [pc, #296]	; (8004800 <HAL_GPIO_Init+0x2b8>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046e0:	4a48      	ldr	r2, [pc, #288]	; (8004804 <HAL_GPIO_Init+0x2bc>)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	3302      	adds	r3, #2
 80046e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	220f      	movs	r2, #15
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4013      	ands	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a40      	ldr	r2, [pc, #256]	; (8004808 <HAL_GPIO_Init+0x2c0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <HAL_GPIO_Init+0x1ec>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3f      	ldr	r2, [pc, #252]	; (800480c <HAL_GPIO_Init+0x2c4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00d      	beq.n	8004730 <HAL_GPIO_Init+0x1e8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3e      	ldr	r2, [pc, #248]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <HAL_GPIO_Init+0x1e4>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3d      	ldr	r2, [pc, #244]	; (8004814 <HAL_GPIO_Init+0x2cc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_GPIO_Init+0x1e0>
 8004724:	2303      	movs	r3, #3
 8004726:	e006      	b.n	8004736 <HAL_GPIO_Init+0x1ee>
 8004728:	2304      	movs	r3, #4
 800472a:	e004      	b.n	8004736 <HAL_GPIO_Init+0x1ee>
 800472c:	2302      	movs	r3, #2
 800472e:	e002      	b.n	8004736 <HAL_GPIO_Init+0x1ee>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_GPIO_Init+0x1ee>
 8004734:	2300      	movs	r3, #0
 8004736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004738:	f002 0203 	and.w	r2, r2, #3
 800473c:	0092      	lsls	r2, r2, #2
 800473e:	4093      	lsls	r3, r2
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004746:	492f      	ldr	r1, [pc, #188]	; (8004804 <HAL_GPIO_Init+0x2bc>)
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	3302      	adds	r3, #2
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	492c      	ldr	r1, [pc, #176]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	4313      	orrs	r3, r2
 800476a:	608b      	str	r3, [r1, #8]
 800476c:	e006      	b.n	800477c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800476e:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	43db      	mvns	r3, r3
 8004776:	4928      	ldr	r1, [pc, #160]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 8004778:	4013      	ands	r3, r2
 800477a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d006      	beq.n	8004796 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004788:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	4922      	ldr	r1, [pc, #136]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	60cb      	str	r3, [r1, #12]
 8004794:	e006      	b.n	80047a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004796:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	43db      	mvns	r3, r3
 800479e:	491e      	ldr	r1, [pc, #120]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d006      	beq.n	80047be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	4918      	ldr	r1, [pc, #96]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
 80047bc:	e006      	b.n	80047cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	4914      	ldr	r1, [pc, #80]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d021      	beq.n	800481c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	490e      	ldr	r1, [pc, #56]	; (8004818 <HAL_GPIO_Init+0x2d0>)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
 80047e4:	e021      	b.n	800482a <HAL_GPIO_Init+0x2e2>
 80047e6:	bf00      	nop
 80047e8:	10320000 	.word	0x10320000
 80047ec:	10310000 	.word	0x10310000
 80047f0:	10220000 	.word	0x10220000
 80047f4:	10210000 	.word	0x10210000
 80047f8:	10120000 	.word	0x10120000
 80047fc:	10110000 	.word	0x10110000
 8004800:	40021000 	.word	0x40021000
 8004804:	40010000 	.word	0x40010000
 8004808:	40010800 	.word	0x40010800
 800480c:	40010c00 	.word	0x40010c00
 8004810:	40011000 	.word	0x40011000
 8004814:	40011400 	.word	0x40011400
 8004818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_GPIO_Init+0x304>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	43db      	mvns	r3, r3
 8004824:	4909      	ldr	r1, [pc, #36]	; (800484c <HAL_GPIO_Init+0x304>)
 8004826:	4013      	ands	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	3301      	adds	r3, #1
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	f47f ae8e 	bne.w	800455c <HAL_GPIO_Init+0x14>
  }
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	372c      	adds	r7, #44	; 0x2c
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	40010400 	.word	0x40010400

08004850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	887b      	ldrh	r3, [r7, #2]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	e001      	b.n	8004872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	807b      	strh	r3, [r7, #2]
 800488a:	4613      	mov	r3, r2
 800488c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800488e:	787b      	ldrb	r3, [r7, #1]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004894:	887a      	ldrh	r2, [r7, #2]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800489a:	e003      	b.n	80048a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800489c:	887b      	ldrh	r3, [r7, #2]
 800489e:	041a      	lsls	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	611a      	str	r2, [r3, #16]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048c6:	4a05      	ldr	r2, [pc, #20]	; (80048dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fc7e 	bl	80031d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40010400 	.word	0x40010400

080048e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e12b      	b.n	8004b4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff f80a 	bl	8003920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2224      	movs	r2, #36	; 0x24
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004944:	f002 fe12 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 8004948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4a81      	ldr	r2, [pc, #516]	; (8004b54 <HAL_I2C_Init+0x274>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d807      	bhi.n	8004964 <HAL_I2C_Init+0x84>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a80      	ldr	r2, [pc, #512]	; (8004b58 <HAL_I2C_Init+0x278>)
 8004958:	4293      	cmp	r3, r2
 800495a:	bf94      	ite	ls
 800495c:	2301      	movls	r3, #1
 800495e:	2300      	movhi	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e006      	b.n	8004972 <HAL_I2C_Init+0x92>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a7d      	ldr	r2, [pc, #500]	; (8004b5c <HAL_I2C_Init+0x27c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	bf94      	ite	ls
 800496c:	2301      	movls	r3, #1
 800496e:	2300      	movhi	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0e7      	b.n	8004b4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a78      	ldr	r2, [pc, #480]	; (8004b60 <HAL_I2C_Init+0x280>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	0c9b      	lsrs	r3, r3, #18
 8004984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4a6a      	ldr	r2, [pc, #424]	; (8004b54 <HAL_I2C_Init+0x274>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d802      	bhi.n	80049b4 <HAL_I2C_Init+0xd4>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	3301      	adds	r3, #1
 80049b2:	e009      	b.n	80049c8 <HAL_I2C_Init+0xe8>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	4a69      	ldr	r2, [pc, #420]	; (8004b64 <HAL_I2C_Init+0x284>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	099b      	lsrs	r3, r3, #6
 80049c6:	3301      	adds	r3, #1
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	495c      	ldr	r1, [pc, #368]	; (8004b54 <HAL_I2C_Init+0x274>)
 80049e4:	428b      	cmp	r3, r1
 80049e6:	d819      	bhi.n	8004a1c <HAL_I2C_Init+0x13c>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1e59      	subs	r1, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f6:	1c59      	adds	r1, r3, #1
 80049f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049fc:	400b      	ands	r3, r1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_I2C_Init+0x138>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1e59      	subs	r1, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a10:	3301      	adds	r3, #1
 8004a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a16:	e051      	b.n	8004abc <HAL_I2C_Init+0x1dc>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	e04f      	b.n	8004abc <HAL_I2C_Init+0x1dc>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d111      	bne.n	8004a48 <HAL_I2C_Init+0x168>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1e58      	subs	r0, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	440b      	add	r3, r1
 8004a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a36:	3301      	adds	r3, #1
 8004a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e012      	b.n	8004a6e <HAL_I2C_Init+0x18e>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1e58      	subs	r0, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	0099      	lsls	r1, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Init+0x196>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e022      	b.n	8004abc <HAL_I2C_Init+0x1dc>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <HAL_I2C_Init+0x1bc>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1e58      	subs	r0, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	440b      	add	r3, r1
 8004a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9a:	e00f      	b.n	8004abc <HAL_I2C_Init+0x1dc>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1e58      	subs	r0, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	0099      	lsls	r1, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	6809      	ldr	r1, [r1, #0]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69da      	ldr	r2, [r3, #28]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6911      	ldr	r1, [r2, #16]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68d2      	ldr	r2, [r2, #12]
 8004af6:	4311      	orrs	r1, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	000186a0 	.word	0x000186a0
 8004b58:	001e847f 	.word	0x001e847f
 8004b5c:	003d08ff 	.word	0x003d08ff
 8004b60:	431bde83 	.word	0x431bde83
 8004b64:	10624dd3 	.word	0x10624dd3

08004b68 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b80      	cmp	r3, #128	; 0x80
 8004b7c:	d103      	bne.n	8004b86 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	611a      	str	r2, [r3, #16]
  }
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	817b      	strh	r3, [r7, #10]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ba4:	f7ff f932 	bl	8003e0c <HAL_GetTick>
 8004ba8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	f040 80e0 	bne.w	8004d78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2319      	movs	r3, #25
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4970      	ldr	r1, [pc, #448]	; (8004d84 <HAL_I2C_Master_Transmit+0x1f4>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f001 fee6 	bl	8006994 <I2C_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e0d3      	b.n	8004d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_I2C_Master_Transmit+0x50>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e0cc      	b.n	8004d7a <HAL_I2C_Master_Transmit+0x1ea>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d007      	beq.n	8004c06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2221      	movs	r2, #33	; 0x21
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2210      	movs	r2, #16
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	893a      	ldrh	r2, [r7, #8]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a50      	ldr	r2, [pc, #320]	; (8004d88 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c48:	8979      	ldrh	r1, [r7, #10]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f001 fd76 	bl	8006740 <I2C_MasterRequestWrite>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e08d      	b.n	8004d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c74:	e066      	b.n	8004d44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	6a39      	ldr	r1, [r7, #32]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f001 ffa4 	bl	8006bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00d      	beq.n	8004ca2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d107      	bne.n	8004c9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e06b      	b.n	8004d7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	781a      	ldrb	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d11b      	bne.n	8004d18 <HAL_I2C_Master_Transmit+0x188>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d017      	beq.n	8004d18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	781a      	ldrb	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	6a39      	ldr	r1, [r7, #32]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f001 ff9b 	bl	8006c58 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00d      	beq.n	8004d44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d107      	bne.n	8004d40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e01a      	b.n	8004d7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d194      	bne.n	8004c76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	00100002 	.word	0x00100002
 8004d88:	ffff0000 	.word	0xffff0000

08004d8c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004da8:	2b28      	cmp	r3, #40	; 0x28
 8004daa:	d15b      	bne.n	8004e64 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e054      	b.n	8004e66 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e04d      	b.n	8004e66 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d007      	beq.n	8004df0 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2229      	movs	r2, #41	; 0x29
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	88fa      	ldrh	r2, [r7, #6]
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004e5e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e000      	b.n	8004e66 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
  }
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e8c:	2b28      	cmp	r3, #40	; 0x28
 8004e8e:	d15b      	bne.n	8004f48 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e054      	b.n	8004f4a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e04d      	b.n	8004f4a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d007      	beq.n	8004ed4 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	222a      	movs	r2, #42	; 0x2a
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004f42:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d124      	bne.n	8004fb2 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2228      	movs	r2, #40	; 0x28
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d007      	beq.n	8004f8e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f9c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fac:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e000      	b.n	8004fb4 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
  }
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b088      	sub	sp, #32
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d003      	beq.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x38>
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	f040 80c1 	bne.w	8005178 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_I2C_EV_IRQHandler+0x6e>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005016:	d003      	beq.n	8005020 <HAL_I2C_EV_IRQHandler+0x62>
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800501e:	d101      	bne.n	8005024 <HAL_I2C_EV_IRQHandler+0x66>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_I2C_EV_IRQHandler+0x68>
 8005024:	2300      	movs	r3, #0
 8005026:	2b01      	cmp	r3, #1
 8005028:	f000 8132 	beq.w	8005290 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00c      	beq.n	8005050 <HAL_I2C_EV_IRQHandler+0x92>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	0a5b      	lsrs	r3, r3, #9
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d006      	beq.n	8005050 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 feb0 	bl	8006da8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fd54 	bl	8005af6 <I2C_Master_SB>
 800504e:	e092      	b.n	8005176 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d009      	beq.n	8005070 <HAL_I2C_EV_IRQHandler+0xb2>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	0a5b      	lsrs	r3, r3, #9
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fdc9 	bl	8005c00 <I2C_Master_ADD10>
 800506e:	e082      	b.n	8005176 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <HAL_I2C_EV_IRQHandler+0xd2>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	0a5b      	lsrs	r3, r3, #9
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fde2 	bl	8005c52 <I2C_Master_ADDR>
 800508e:	e072      	b.n	8005176 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d03b      	beq.n	8005114 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050aa:	f000 80f3 	beq.w	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	09db      	lsrs	r3, r3, #7
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00f      	beq.n	80050da <HAL_I2C_EV_IRQHandler+0x11c>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	0a9b      	lsrs	r3, r3, #10
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_I2C_EV_IRQHandler+0x11c>
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	089b      	lsrs	r3, r3, #2
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f9c0 	bl	8005458 <I2C_MasterTransmit_TXE>
 80050d8:	e04d      	b.n	8005176 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 80d6 	beq.w	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	0a5b      	lsrs	r3, r3, #9
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80cf 	beq.w	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050f6:	7bbb      	ldrb	r3, [r7, #14]
 80050f8:	2b21      	cmp	r3, #33	; 0x21
 80050fa:	d103      	bne.n	8005104 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa47 	bl	8005590 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005102:	e0c7      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	f040 80c4 	bne.w	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fab5 	bl	800567c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005112:	e0bf      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005122:	f000 80b7 	beq.w	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	099b      	lsrs	r3, r3, #6
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00f      	beq.n	8005152 <HAL_I2C_EV_IRQHandler+0x194>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	0a9b      	lsrs	r3, r3, #10
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_I2C_EV_IRQHandler+0x194>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fb2e 	bl	80057ac <I2C_MasterReceive_RXNE>
 8005150:	e011      	b.n	8005176 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 809a 	beq.w	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	0a5b      	lsrs	r3, r3, #9
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8093 	beq.w	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fbd7 	bl	8005922 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005174:	e08e      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005176:	e08d      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	e007      	b.n	800519a <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d012      	beq.n	80051cc <HAL_I2C_EV_IRQHandler+0x20e>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	0a5b      	lsrs	r3, r3, #9
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 ff9b 	bl	8006100 <I2C_Slave_ADDR>
 80051ca:	e066      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <HAL_I2C_EV_IRQHandler+0x22e>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	0a5b      	lsrs	r3, r3, #9
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 ffd5 	bl	8006194 <I2C_Slave_STOPF>
 80051ea:	e056      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051ec:	7bbb      	ldrb	r3, [r7, #14]
 80051ee:	2b21      	cmp	r3, #33	; 0x21
 80051f0:	d002      	beq.n	80051f8 <HAL_I2C_EV_IRQHandler+0x23a>
 80051f2:	7bbb      	ldrb	r3, [r7, #14]
 80051f4:	2b29      	cmp	r3, #41	; 0x29
 80051f6:	d125      	bne.n	8005244 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	09db      	lsrs	r3, r3, #7
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00f      	beq.n	8005224 <HAL_I2C_EV_IRQHandler+0x266>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	0a9b      	lsrs	r3, r3, #10
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <HAL_I2C_EV_IRQHandler+0x266>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d103      	bne.n	8005224 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 feb3 	bl	8005f88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005222:	e039      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d033      	beq.n	8005298 <HAL_I2C_EV_IRQHandler+0x2da>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	0a5b      	lsrs	r3, r3, #9
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d02d      	beq.n	8005298 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fee0 	bl	8006002 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005242:	e029      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00f      	beq.n	8005270 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	0a9b      	lsrs	r3, r3, #10
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <HAL_I2C_EV_IRQHandler+0x2b2>
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	089b      	lsrs	r3, r3, #2
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 feea 	bl	8006042 <I2C_SlaveReceive_RXNE>
 800526e:	e014      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <HAL_I2C_EV_IRQHandler+0x2dc>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	0a5b      	lsrs	r3, r3, #9
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 ff18 	bl	80060be <I2C_SlaveReceive_BTF>
 800528e:	e004      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005298:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d016      	beq.n	80052fe <HAL_I2C_ER_IRQHandler+0x5e>
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d010      	beq.n	80052fe <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052ec:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052fc:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	0a5b      	lsrs	r3, r3, #9
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00e      	beq.n	8005328 <HAL_I2C_ER_IRQHandler+0x88>
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005326:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	0a9b      	lsrs	r3, r3, #10
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d03f      	beq.n	80053b4 <HAL_I2C_ER_IRQHandler+0x114>
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d039      	beq.n	80053b4 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005340:	7efb      	ldrb	r3, [r7, #27]
 8005342:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800535a:	7ebb      	ldrb	r3, [r7, #26]
 800535c:	2b20      	cmp	r3, #32
 800535e:	d112      	bne.n	8005386 <HAL_I2C_ER_IRQHandler+0xe6>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <HAL_I2C_ER_IRQHandler+0xe6>
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	2b21      	cmp	r3, #33	; 0x21
 800536a:	d008      	beq.n	800537e <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b29      	cmp	r3, #41	; 0x29
 8005370:	d005      	beq.n	800537e <HAL_I2C_ER_IRQHandler+0xde>
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b28      	cmp	r3, #40	; 0x28
 8005376:	d106      	bne.n	8005386 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b21      	cmp	r3, #33	; 0x21
 800537c:	d103      	bne.n	8005386 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f001 f838 	bl	80063f4 <I2C_Slave_AF>
 8005384:	e016      	b.n	80053b4 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800538e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005398:	7efb      	ldrb	r3, [r7, #27]
 800539a:	2b10      	cmp	r3, #16
 800539c:	d002      	beq.n	80053a4 <HAL_I2C_ER_IRQHandler+0x104>
 800539e:	7efb      	ldrb	r3, [r7, #27]
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d107      	bne.n	80053b4 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	0adb      	lsrs	r3, r3, #11
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00e      	beq.n	80053de <HAL_I2C_ER_IRQHandler+0x13e>
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	0a1b      	lsrs	r3, r3, #8
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	f043 0308 	orr.w	r3, r3, #8
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80053dc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 f873 	bl	80064dc <I2C_ITError>
  }
}
 80053f6:	bf00      	nop
 80053f8:	3728      	adds	r7, #40	; 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr

08005446 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800546e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547a:	2b00      	cmp	r3, #0
 800547c:	d150      	bne.n	8005520 <I2C_MasterTransmit_TXE+0xc8>
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b21      	cmp	r3, #33	; 0x21
 8005482:	d14d      	bne.n	8005520 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d01d      	beq.n	80054c6 <I2C_MasterTransmit_TXE+0x6e>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b20      	cmp	r3, #32
 800548e:	d01a      	beq.n	80054c6 <I2C_MasterTransmit_TXE+0x6e>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005496:	d016      	beq.n	80054c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2211      	movs	r2, #17
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ff9d 	bl	80053fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054c4:	e060      	b.n	8005588 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d107      	bne.n	8005510 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff8a 	bl	8005422 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800550e:	e03b      	b.n	8005588 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ff70 	bl	80053fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800551e:	e033      	b.n	8005588 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b21      	cmp	r3, #33	; 0x21
 8005524:	d005      	beq.n	8005532 <I2C_MasterTransmit_TXE+0xda>
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d12d      	bne.n	8005588 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b22      	cmp	r3, #34	; 0x22
 8005530:	d12a      	bne.n	8005588 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d108      	bne.n	800554e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800554c:	e01c      	b.n	8005588 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d103      	bne.n	8005562 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f88e 	bl	800567c <I2C_MemoryTransmit_TXE_BTF>
}
 8005560:	e012      	b.n	8005588 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	781a      	ldrb	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005586:	e7ff      	b.n	8005588 <I2C_MasterTransmit_TXE+0x130>
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b21      	cmp	r3, #33	; 0x21
 80055a8:	d164      	bne.n	8005674 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d012      	beq.n	80055da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80055d8:	e04c      	b.n	8005674 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d01d      	beq.n	800561c <I2C_MasterTransmit_BTF+0x8c>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d01a      	beq.n	800561c <I2C_MasterTransmit_BTF+0x8c>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055ec:	d016      	beq.n	800561c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2211      	movs	r2, #17
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fef2 	bl	80053fe <HAL_I2C_MasterTxCpltCallback>
}
 800561a:	e02b      	b.n	8005674 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800562a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d107      	bne.n	8005666 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff fedf 	bl	8005422 <HAL_I2C_MemTxCpltCallback>
}
 8005664:	e006      	b.n	8005674 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fec5 	bl	80053fe <HAL_I2C_MasterTxCpltCallback>
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11d      	bne.n	80056d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d10b      	bne.n	80056b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	1c9a      	adds	r2, r3, #2
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80056b2:	e077      	b.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	121b      	asrs	r3, r3, #8
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056ce:	e069      	b.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10b      	bne.n	80056f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056ee:	e059      	b.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d152      	bne.n	800579e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b22      	cmp	r3, #34	; 0x22
 80056fc:	d10d      	bne.n	800571a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800570c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005718:	e044      	b.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d015      	beq.n	8005750 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b21      	cmp	r3, #33	; 0x21
 8005728:	d112      	bne.n	8005750 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800574e:	e029      	b.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d124      	bne.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	2b21      	cmp	r3, #33	; 0x21
 800575e:	d121      	bne.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800576e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff fe43 	bl	8005422 <HAL_I2C_MemTxCpltCallback>
}
 800579c:	e002      	b.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff f9e2 	bl	8004b68 <I2C_Flush_DR>
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b22      	cmp	r3, #34	; 0x22
 80057be:	f040 80ac 	bne.w	800591a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d921      	bls.n	8005814 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	f040 808c 	bne.w	800591a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005812:	e082      	b.n	800591a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	2b02      	cmp	r3, #2
 800581a:	d075      	beq.n	8005908 <I2C_MasterReceive_RXNE+0x15c>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d002      	beq.n	8005828 <I2C_MasterReceive_RXNE+0x7c>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d16f      	bne.n	8005908 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 fa5d 	bl	8006ce8 <I2C_WaitOnSTOPRequestThroughIT>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d142      	bne.n	80058ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005842:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005852:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d10a      	bne.n	80058a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fdc9 	bl	8005434 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058a2:	e03a      	b.n	800591a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2212      	movs	r2, #18
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fdac 	bl	8005410 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058b8:	e02f      	b.n	800591a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fb f9a0 	bl	8000c46 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005906:	e008      	b.n	800591a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005916:	605a      	str	r2, [r3, #4]
}
 8005918:	e7ff      	b.n	800591a <I2C_MasterReceive_RXNE+0x16e>
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b04      	cmp	r3, #4
 8005938:	d11b      	bne.n	8005972 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005970:	e0bd      	b.n	8005aee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b03      	cmp	r3, #3
 800597a:	d129      	bne.n	80059d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b04      	cmp	r3, #4
 8005990:	d00a      	beq.n	80059a8 <I2C_MasterReceive_BTF+0x86>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d007      	beq.n	80059a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059ce:	e08e      	b.n	8005aee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d176      	bne.n	8005ac8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d002      	beq.n	80059e6 <I2C_MasterReceive_BTF+0xc4>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d108      	bne.n	80059f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e019      	b.n	8005a2c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d002      	beq.n	8005a04 <I2C_MasterReceive_BTF+0xe2>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d108      	bne.n	8005a16 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e00a      	b.n	8005a2c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d007      	beq.n	8005a2c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d10a      	bne.n	8005ab2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fcc2 	bl	8005434 <HAL_I2C_MemRxCpltCallback>
}
 8005ab0:	e01d      	b.n	8005aee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2212      	movs	r2, #18
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fca5 	bl	8005410 <HAL_I2C_MasterRxCpltCallback>
}
 8005ac6:	e012      	b.n	8005aee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d117      	bne.n	8005b3a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b22:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b24:	e067      	b.n	8005bf6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	611a      	str	r2, [r3, #16]
}
 8005b38:	e05d      	b.n	8005bf6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b42:	d133      	bne.n	8005bac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b21      	cmp	r3, #33	; 0x21
 8005b4e:	d109      	bne.n	8005b64 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	e008      	b.n	8005b76 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <I2C_Master_SB+0x92>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d108      	bne.n	8005b9a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d032      	beq.n	8005bf6 <I2C_Master_SB+0x100>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02d      	beq.n	8005bf6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba8:	605a      	str	r2, [r3, #4]
}
 8005baa:	e024      	b.n	8005bf6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10e      	bne.n	8005bd2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	11db      	asrs	r3, r3, #7
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 0306 	and.w	r3, r3, #6
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f063 030f 	orn	r3, r3, #15
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	611a      	str	r2, [r3, #16]
}
 8005bd0:	e011      	b.n	8005bf6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10d      	bne.n	8005bf6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	11db      	asrs	r3, r3, #7
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 0306 	and.w	r3, r3, #6
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f063 030e 	orn	r3, r3, #14
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	611a      	str	r2, [r3, #16]
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <I2C_Master_ADD10+0x26>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d108      	bne.n	8005c38 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <I2C_Master_ADD10+0x48>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c46:	605a      	str	r2, [r3, #4]
  }
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b091      	sub	sp, #68	; 0x44
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b22      	cmp	r3, #34	; 0x22
 8005c7a:	f040 8174 	bne.w	8005f66 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10f      	bne.n	8005ca6 <I2C_Master_ADDR+0x54>
 8005c86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d10b      	bne.n	8005ca6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	633b      	str	r3, [r7, #48]	; 0x30
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	633b      	str	r3, [r7, #48]	; 0x30
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	e16b      	b.n	8005f7e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11d      	bne.n	8005cea <I2C_Master_ADDR+0x98>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cb6:	d118      	bne.n	8005cea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cdc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	651a      	str	r2, [r3, #80]	; 0x50
 8005ce8:	e149      	b.n	8005f7e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d113      	bne.n	8005d1c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e120      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	f040 808a 	bne.w	8005e3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d2e:	d137      	bne.n	8005da0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d3e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4e:	d113      	bne.n	8005d78 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d60:	2300      	movs	r3, #0
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	e0f2      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	623b      	str	r3, [r7, #32]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	623b      	str	r3, [r7, #32]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e0de      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d02e      	beq.n	8005e04 <I2C_Master_ADDR+0x1b2>
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d02b      	beq.n	8005e04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	2b12      	cmp	r3, #18
 8005db0:	d102      	bne.n	8005db8 <I2C_Master_ADDR+0x166>
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d125      	bne.n	8005e04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d00e      	beq.n	8005ddc <I2C_Master_ADDR+0x18a>
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d00b      	beq.n	8005ddc <I2C_Master_ADDR+0x18a>
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d008      	beq.n	8005ddc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e007      	b.n	8005dec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	e0ac      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e090      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d158      	bne.n	8005ef8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d021      	beq.n	8005e90 <I2C_Master_ADDR+0x23e>
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d01e      	beq.n	8005e90 <I2C_Master_ADDR+0x23e>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d01b      	beq.n	8005e90 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e012      	b.n	8005eb6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e9e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec4:	d14b      	bne.n	8005f5e <I2C_Master_ADDR+0x30c>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ecc:	d00b      	beq.n	8005ee6 <I2C_Master_ADDR+0x294>
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d008      	beq.n	8005ee6 <I2C_Master_ADDR+0x294>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d005      	beq.n	8005ee6 <I2C_Master_ADDR+0x294>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d002      	beq.n	8005ee6 <I2C_Master_ADDR+0x294>
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d13b      	bne.n	8005f5e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	e032      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f06:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f16:	d117      	bne.n	8005f48 <I2C_Master_ADDR+0x2f6>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f1e:	d00b      	beq.n	8005f38 <I2C_Master_ADDR+0x2e6>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d008      	beq.n	8005f38 <I2C_Master_ADDR+0x2e6>
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d005      	beq.n	8005f38 <I2C_Master_ADDR+0x2e6>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d002      	beq.n	8005f38 <I2C_Master_ADDR+0x2e6>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d107      	bne.n	8005f48 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f64:	e00b      	b.n	8005f7e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
}
 8005f7c:	e7ff      	b.n	8005f7e <I2C_Master_ADDR+0x32c>
 8005f7e:	bf00      	nop
 8005f80:	3744      	adds	r7, #68	; 0x44
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d02b      	beq.n	8005ffa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	781a      	ldrb	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d114      	bne.n	8005ffa <I2C_SlaveTransmit_TXE+0x72>
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b29      	cmp	r3, #41	; 0x29
 8005fd4:	d111      	bne.n	8005ffa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2221      	movs	r2, #33	; 0x21
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2228      	movs	r2, #40	; 0x28
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fa fe1d 	bl	8000c34 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d011      	beq.n	8006038 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006050:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d02c      	beq.n	80060b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d114      	bne.n	80060b6 <I2C_SlaveReceive_RXNE+0x74>
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b2a      	cmp	r3, #42	; 0x2a
 8006090:	d111      	bne.n	80060b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2222      	movs	r2, #34	; 0x22
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2228      	movs	r2, #40	; 0x28
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fa fdab 	bl	8000c0c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800611a:	2b28      	cmp	r3, #40	; 0x28
 800611c:	d127      	bne.n	800616e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800613a:	2301      	movs	r3, #1
 800613c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	09db      	lsrs	r3, r3, #7
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	81bb      	strh	r3, [r7, #12]
 8006150:	e002      	b.n	8006158 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006160:	89ba      	ldrh	r2, [r7, #12]
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fa fd30 	bl	8000bcc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800616c:	e00e      	b.n	800618c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80061b4:	2300      	movs	r3, #0
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f0:	d172      	bne.n	80062d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b22      	cmp	r3, #34	; 0x22
 80061f6:	d002      	beq.n	80061fe <I2C_Slave_STOPF+0x6a>
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b2a      	cmp	r3, #42	; 0x2a
 80061fc:	d135      	bne.n	800626a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f043 0204 	orr.w	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006230:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd ff6e 	bl	8004118 <HAL_DMA_GetState>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d049      	beq.n	80062d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	4a69      	ldr	r2, [pc, #420]	; (80063ec <I2C_Slave_STOPF+0x258>)
 8006248:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	4618      	mov	r0, r3
 8006250:	f7fd feea 	bl	8004028 <HAL_DMA_Abort_IT>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d03d      	beq.n	80062d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006268:	e035      	b.n	80062d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	b29a      	uxth	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f043 0204 	orr.w	r2, r3, #4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800629c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fd ff38 	bl	8004118 <HAL_DMA_GetState>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d014      	beq.n	80062d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	4a4e      	ldr	r2, [pc, #312]	; (80063ec <I2C_Slave_STOPF+0x258>)
 80062b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fd feb4 	bl	8004028 <HAL_DMA_Abort_IT>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	e000      	b.n	80062d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d03e      	beq.n	8006360 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d112      	bne.n	8006316 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	d112      	bne.n	800634a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	f043 0204 	orr.w	r2, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f8b7 	bl	80064dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800636e:	e039      	b.n	80063e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b2a      	cmp	r3, #42	; 0x2a
 8006374:	d109      	bne.n	800638a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2228      	movs	r2, #40	; 0x28
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7fa fc41 	bl	8000c0c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b28      	cmp	r3, #40	; 0x28
 8006394:	d111      	bne.n	80063ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <I2C_Slave_STOPF+0x25c>)
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fa fbff 	bl	8000bb6 <HAL_I2C_ListenCpltCallback>
}
 80063b8:	e014      	b.n	80063e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	2b22      	cmp	r3, #34	; 0x22
 80063c0:	d002      	beq.n	80063c8 <I2C_Slave_STOPF+0x234>
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b22      	cmp	r3, #34	; 0x22
 80063c6:	d10d      	bne.n	80063e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fa fc14 	bl	8000c0c <HAL_I2C_SlaveRxCpltCallback>
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	08006845 	.word	0x08006845
 80063f0:	ffff0000 	.word	0xffff0000

080063f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006402:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b08      	cmp	r3, #8
 800640e:	d002      	beq.n	8006416 <I2C_Slave_AF+0x22>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b20      	cmp	r3, #32
 8006414:	d129      	bne.n	800646a <I2C_Slave_AF+0x76>
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b28      	cmp	r3, #40	; 0x28
 800641a:	d126      	bne.n	800646a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a2e      	ldr	r2, [pc, #184]	; (80064d8 <I2C_Slave_AF+0xe4>)
 8006420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006430:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800643a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800644a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fa fba7 	bl	8000bb6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006468:	e031      	b.n	80064ce <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b21      	cmp	r3, #33	; 0x21
 800646e:	d129      	bne.n	80064c4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <I2C_Slave_AF+0xe4>)
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2221      	movs	r2, #33	; 0x21
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800649a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fe fb56 	bl	8004b68 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fa fbb9 	bl	8000c34 <HAL_I2C_SlaveTxCpltCallback>
}
 80064c2:	e004      	b.n	80064ce <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064cc:	615a      	str	r2, [r3, #20]
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	ffff0000 	.word	0xffff0000

080064dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d002      	beq.n	8006500 <I2C_ITError+0x24>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d10a      	bne.n	8006516 <I2C_ITError+0x3a>
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b22      	cmp	r3, #34	; 0x22
 8006504:	d107      	bne.n	8006516 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006514:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800651c:	2b28      	cmp	r3, #40	; 0x28
 800651e:	d107      	bne.n	8006530 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2228      	movs	r2, #40	; 0x28
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800652e:	e015      	b.n	800655c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653e:	d00a      	beq.n	8006556 <I2C_ITError+0x7a>
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b60      	cmp	r3, #96	; 0x60
 8006544:	d007      	beq.n	8006556 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656a:	d162      	bne.n	8006632 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800657a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006580:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	d020      	beq.n	80065cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	4a6a      	ldr	r2, [pc, #424]	; (8006738 <I2C_ITError+0x25c>)
 8006590:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	4618      	mov	r0, r3
 8006598:	f7fd fd46 	bl	8004028 <HAL_DMA_Abort_IT>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8089 	beq.w	80066b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065c6:	4610      	mov	r0, r2
 80065c8:	4798      	blx	r3
 80065ca:	e074      	b.n	80066b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	4a59      	ldr	r2, [pc, #356]	; (8006738 <I2C_ITError+0x25c>)
 80065d2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd fd25 	bl	8004028 <HAL_DMA_Abort_IT>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d068      	beq.n	80066b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d10b      	bne.n	800660a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	e041      	b.n	80066b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b60      	cmp	r3, #96	; 0x60
 800663c:	d125      	bne.n	800668a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d10b      	bne.n	8006672 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fe fedf 	bl	8005446 <HAL_I2C_AbortCpltCallback>
 8006688:	e015      	b.n	80066b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d10b      	bne.n	80066b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7fa fac8 	bl	8000c46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d113      	bne.n	8006730 <I2C_ITError+0x254>
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	2b28      	cmp	r3, #40	; 0x28
 800670c:	d110      	bne.n	8006730 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <I2C_ITError+0x260>)
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fa fa43 	bl	8000bb6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	08006845 	.word	0x08006845
 800673c:	ffff0000 	.word	0xffff0000

08006740 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	460b      	mov	r3, r1
 800674e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d006      	beq.n	800676a <I2C_MasterRequestWrite+0x2a>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d003      	beq.n	800676a <I2C_MasterRequestWrite+0x2a>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006768:	d108      	bne.n	800677c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e00b      	b.n	8006794 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	2b12      	cmp	r3, #18
 8006782:	d107      	bne.n	8006794 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006792:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f8f7 	bl	8006994 <I2C_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ba:	d103      	bne.n	80067c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e035      	b.n	8006834 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067d0:	d108      	bne.n	80067e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067d2:	897b      	ldrh	r3, [r7, #10]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067e0:	611a      	str	r2, [r3, #16]
 80067e2:	e01b      	b.n	800681c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067e4:	897b      	ldrh	r3, [r7, #10]
 80067e6:	11db      	asrs	r3, r3, #7
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0306 	and.w	r3, r3, #6
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	f063 030f 	orn	r3, r3, #15
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	490e      	ldr	r1, [pc, #56]	; (800683c <I2C_MasterRequestWrite+0xfc>)
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f940 	bl	8006a88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e010      	b.n	8006834 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006812:	897b      	ldrh	r3, [r7, #10]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	4907      	ldr	r1, [pc, #28]	; (8006840 <I2C_MasterRequestWrite+0x100>)
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f930 	bl	8006a88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	00010008 	.word	0x00010008
 8006840:	00010002 	.word	0x00010002

08006844 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800685e:	4b4b      	ldr	r3, [pc, #300]	; (800698c <I2C_DMAAbort+0x148>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	08db      	lsrs	r3, r3, #3
 8006864:	4a4a      	ldr	r2, [pc, #296]	; (8006990 <I2C_DMAAbort+0x14c>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	0a1a      	lsrs	r2, r3, #8
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	00da      	lsls	r2, r3, #3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800688a:	e00a      	b.n	80068a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b01      	subs	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800689c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a0:	d0ea      	beq.n	8006878 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ae:	2200      	movs	r2, #0
 80068b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	2200      	movs	r2, #0
 80068c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2200      	movs	r2, #0
 80068d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	2200      	movs	r2, #0
 80068e6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	2200      	movs	r2, #0
 80068f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b60      	cmp	r3, #96	; 0x60
 8006912:	d10e      	bne.n	8006932 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2200      	movs	r2, #0
 8006928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800692a:	6978      	ldr	r0, [r7, #20]
 800692c:	f7fe fd8b 	bl	8005446 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006930:	e027      	b.n	8006982 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006932:	7cfb      	ldrb	r3, [r7, #19]
 8006934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006938:	2b28      	cmp	r3, #40	; 0x28
 800693a:	d117      	bne.n	800696c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800695a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2228      	movs	r2, #40	; 0x28
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800696a:	e007      	b.n	800697c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800697c:	6978      	ldr	r0, [r7, #20]
 800697e:	f7fa f962 	bl	8000c46 <HAL_I2C_ErrorCallback>
}
 8006982:	bf00      	nop
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000010 	.word	0x20000010
 8006990:	14f8b589 	.word	0x14f8b589

08006994 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4613      	mov	r3, r2
 80069a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069a4:	e048      	b.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d044      	beq.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fd fa2d 	bl	8003e0c <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d139      	bne.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	0c1b      	lsrs	r3, r3, #16
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d10d      	bne.n	80069ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	43da      	mvns	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4013      	ands	r3, r2
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	e00c      	b.n	8006a04 <I2C_WaitOnFlagUntilTimeout+0x70>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	43da      	mvns	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d116      	bne.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e023      	b.n	8006a80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	0c1b      	lsrs	r3, r3, #16
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d10d      	bne.n	8006a5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	43da      	mvns	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	e00c      	b.n	8006a78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	43da      	mvns	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d093      	beq.n	80069a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a96:	e071      	b.n	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa6:	d123      	bne.n	8006af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ac0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	f043 0204 	orr.w	r2, r3, #4
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e067      	b.n	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d041      	beq.n	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af8:	f7fd f988 	bl	8003e0c <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d302      	bcc.n	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d136      	bne.n	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d10c      	bne.n	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	43da      	mvns	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bf14      	ite	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	2300      	moveq	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	e00b      	b.n	8006b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	43da      	mvns	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bf14      	ite	ne
 8006b44:	2301      	movne	r3, #1
 8006b46:	2300      	moveq	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d016      	beq.n	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e021      	b.n	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	0c1b      	lsrs	r3, r3, #16
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d10c      	bne.n	8006ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	43da      	mvns	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4013      	ands	r3, r2
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bf14      	ite	ne
 8006b98:	2301      	movne	r3, #1
 8006b9a:	2300      	moveq	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	e00b      	b.n	8006bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	43da      	mvns	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4013      	ands	r3, r2
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	bf14      	ite	ne
 8006bb2:	2301      	movne	r3, #1
 8006bb4:	2300      	moveq	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f47f af6d 	bne.w	8006a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bd4:	e034      	b.n	8006c40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f8b8 	bl	8006d4c <I2C_IsAcknowledgeFailed>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e034      	b.n	8006c50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bec:	d028      	beq.n	8006c40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bee:	f7fd f90d 	bl	8003e0c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d302      	bcc.n	8006c04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11d      	bne.n	8006c40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	2b80      	cmp	r3, #128	; 0x80
 8006c10:	d016      	beq.n	8006c40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	f043 0220 	orr.w	r2, r3, #32
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e007      	b.n	8006c50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4a:	2b80      	cmp	r3, #128	; 0x80
 8006c4c:	d1c3      	bne.n	8006bd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c64:	e034      	b.n	8006cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f870 	bl	8006d4c <I2C_IsAcknowledgeFailed>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e034      	b.n	8006ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d028      	beq.n	8006cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	f7fd f8c5 	bl	8003e0c <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11d      	bne.n	8006cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d016      	beq.n	8006cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e007      	b.n	8006ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d1c3      	bne.n	8006c66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006cf4:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	08db      	lsrs	r3, r3, #3
 8006cfa:	4a13      	ldr	r2, [pc, #76]	; (8006d48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006d00:	0a1a      	lsrs	r2, r3, #8
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d107      	bne.n	8006d26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e008      	b.n	8006d38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d34:	d0e9      	beq.n	8006d0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000010 	.word	0x20000010
 8006d48:	14f8b589 	.word	0x14f8b589

08006d4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d62:	d11b      	bne.n	8006d9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	f043 0204 	orr.w	r2, r3, #4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr

08006da8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006db8:	d103      	bne.n	8006dc2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dc0:	e007      	b.n	8006dd2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006dca:	d102      	bne.n	8006dd2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2208      	movs	r2, #8
 8006dd0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e26c      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8087 	beq.w	8006f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dfc:	4b92      	ldr	r3, [pc, #584]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f003 030c 	and.w	r3, r3, #12
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d00c      	beq.n	8006e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e08:	4b8f      	ldr	r3, [pc, #572]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f003 030c 	and.w	r3, r3, #12
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d112      	bne.n	8006e3a <HAL_RCC_OscConfig+0x5e>
 8006e14:	4b8c      	ldr	r3, [pc, #560]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e20:	d10b      	bne.n	8006e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e22:	4b89      	ldr	r3, [pc, #548]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d06c      	beq.n	8006f08 <HAL_RCC_OscConfig+0x12c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d168      	bne.n	8006f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e246      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e42:	d106      	bne.n	8006e52 <HAL_RCC_OscConfig+0x76>
 8006e44:	4b80      	ldr	r3, [pc, #512]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a7f      	ldr	r2, [pc, #508]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	e02e      	b.n	8006eb0 <HAL_RCC_OscConfig+0xd4>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCC_OscConfig+0x98>
 8006e5a:	4b7b      	ldr	r3, [pc, #492]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a7a      	ldr	r2, [pc, #488]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4b78      	ldr	r3, [pc, #480]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a77      	ldr	r2, [pc, #476]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e01d      	b.n	8006eb0 <HAL_RCC_OscConfig+0xd4>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e7c:	d10c      	bne.n	8006e98 <HAL_RCC_OscConfig+0xbc>
 8006e7e:	4b72      	ldr	r3, [pc, #456]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a71      	ldr	r2, [pc, #452]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	4b6f      	ldr	r3, [pc, #444]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a6e      	ldr	r2, [pc, #440]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	e00b      	b.n	8006eb0 <HAL_RCC_OscConfig+0xd4>
 8006e98:	4b6b      	ldr	r3, [pc, #428]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a6a      	ldr	r2, [pc, #424]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	4b68      	ldr	r3, [pc, #416]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a67      	ldr	r2, [pc, #412]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d013      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb8:	f7fc ffa8 	bl	8003e0c <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec0:	f7fc ffa4 	bl	8003e0c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b64      	cmp	r3, #100	; 0x64
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e1fa      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ed2:	4b5d      	ldr	r3, [pc, #372]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0f0      	beq.n	8006ec0 <HAL_RCC_OscConfig+0xe4>
 8006ede:	e014      	b.n	8006f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee0:	f7fc ff94 	bl	8003e0c <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ee8:	f7fc ff90 	bl	8003e0c <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b64      	cmp	r3, #100	; 0x64
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e1e6      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006efa:	4b53      	ldr	r3, [pc, #332]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x10c>
 8006f06:	e000      	b.n	8006f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d063      	beq.n	8006fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f16:	4b4c      	ldr	r3, [pc, #304]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f003 030c 	and.w	r3, r3, #12
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f22:	4b49      	ldr	r3, [pc, #292]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f003 030c 	and.w	r3, r3, #12
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d11c      	bne.n	8006f68 <HAL_RCC_OscConfig+0x18c>
 8006f2e:	4b46      	ldr	r3, [pc, #280]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d116      	bne.n	8006f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f3a:	4b43      	ldr	r3, [pc, #268]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_RCC_OscConfig+0x176>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d001      	beq.n	8006f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e1ba      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f52:	4b3d      	ldr	r3, [pc, #244]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	4939      	ldr	r1, [pc, #228]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f66:	e03a      	b.n	8006fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d020      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f70:	4b36      	ldr	r3, [pc, #216]	; (800704c <HAL_RCC_OscConfig+0x270>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f76:	f7fc ff49 	bl	8003e0c <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f7e:	f7fc ff45 	bl	8003e0c <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e19b      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f90:	4b2d      	ldr	r3, [pc, #180]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f0      	beq.n	8006f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	4927      	ldr	r1, [pc, #156]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	600b      	str	r3, [r1, #0]
 8006fb0:	e015      	b.n	8006fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fb2:	4b26      	ldr	r3, [pc, #152]	; (800704c <HAL_RCC_OscConfig+0x270>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb8:	f7fc ff28 	bl	8003e0c <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fc0:	f7fc ff24 	bl	8003e0c <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e17a      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fd2:	4b1d      	ldr	r3, [pc, #116]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1f0      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d03a      	beq.n	8007060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d019      	beq.n	8007026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <HAL_RCC_OscConfig+0x274>)
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff8:	f7fc ff08 	bl	8003e0c <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007000:	f7fc ff04 	bl	8003e0c <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e15a      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007012:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <HAL_RCC_OscConfig+0x26c>)
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800701e:	2001      	movs	r0, #1
 8007020:	f000 fafc 	bl	800761c <RCC_Delay>
 8007024:	e01c      	b.n	8007060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007026:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <HAL_RCC_OscConfig+0x274>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800702c:	f7fc feee 	bl	8003e0c <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007032:	e00f      	b.n	8007054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007034:	f7fc feea 	bl	8003e0c <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d908      	bls.n	8007054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e140      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
 8007046:	bf00      	nop
 8007048:	40021000 	.word	0x40021000
 800704c:	42420000 	.word	0x42420000
 8007050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007054:	4b9e      	ldr	r3, [pc, #632]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e9      	bne.n	8007034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 80a6 	beq.w	80071ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800706e:	2300      	movs	r3, #0
 8007070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007072:	4b97      	ldr	r3, [pc, #604]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10d      	bne.n	800709a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800707e:	4b94      	ldr	r3, [pc, #592]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	4a93      	ldr	r2, [pc, #588]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007088:	61d3      	str	r3, [r2, #28]
 800708a:	4b91      	ldr	r3, [pc, #580]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007092:	60bb      	str	r3, [r7, #8]
 8007094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007096:	2301      	movs	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709a:	4b8e      	ldr	r3, [pc, #568]	; (80072d4 <HAL_RCC_OscConfig+0x4f8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d118      	bne.n	80070d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070a6:	4b8b      	ldr	r3, [pc, #556]	; (80072d4 <HAL_RCC_OscConfig+0x4f8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a8a      	ldr	r2, [pc, #552]	; (80072d4 <HAL_RCC_OscConfig+0x4f8>)
 80070ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070b2:	f7fc feab 	bl	8003e0c <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070b8:	e008      	b.n	80070cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ba:	f7fc fea7 	bl	8003e0c <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b64      	cmp	r3, #100	; 0x64
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e0fd      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070cc:	4b81      	ldr	r3, [pc, #516]	; (80072d4 <HAL_RCC_OscConfig+0x4f8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0f0      	beq.n	80070ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d106      	bne.n	80070ee <HAL_RCC_OscConfig+0x312>
 80070e0:	4b7b      	ldr	r3, [pc, #492]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	4a7a      	ldr	r2, [pc, #488]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80070e6:	f043 0301 	orr.w	r3, r3, #1
 80070ea:	6213      	str	r3, [r2, #32]
 80070ec:	e02d      	b.n	800714a <HAL_RCC_OscConfig+0x36e>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10c      	bne.n	8007110 <HAL_RCC_OscConfig+0x334>
 80070f6:	4b76      	ldr	r3, [pc, #472]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	4a75      	ldr	r2, [pc, #468]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80070fc:	f023 0301 	bic.w	r3, r3, #1
 8007100:	6213      	str	r3, [r2, #32]
 8007102:	4b73      	ldr	r3, [pc, #460]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	4a72      	ldr	r2, [pc, #456]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007108:	f023 0304 	bic.w	r3, r3, #4
 800710c:	6213      	str	r3, [r2, #32]
 800710e:	e01c      	b.n	800714a <HAL_RCC_OscConfig+0x36e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	2b05      	cmp	r3, #5
 8007116:	d10c      	bne.n	8007132 <HAL_RCC_OscConfig+0x356>
 8007118:	4b6d      	ldr	r3, [pc, #436]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	4a6c      	ldr	r2, [pc, #432]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 800711e:	f043 0304 	orr.w	r3, r3, #4
 8007122:	6213      	str	r3, [r2, #32]
 8007124:	4b6a      	ldr	r3, [pc, #424]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	4a69      	ldr	r2, [pc, #420]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 800712a:	f043 0301 	orr.w	r3, r3, #1
 800712e:	6213      	str	r3, [r2, #32]
 8007130:	e00b      	b.n	800714a <HAL_RCC_OscConfig+0x36e>
 8007132:	4b67      	ldr	r3, [pc, #412]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	4a66      	ldr	r2, [pc, #408]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	6213      	str	r3, [r2, #32]
 800713e:	4b64      	ldr	r3, [pc, #400]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	4a63      	ldr	r2, [pc, #396]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007144:	f023 0304 	bic.w	r3, r3, #4
 8007148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d015      	beq.n	800717e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007152:	f7fc fe5b 	bl	8003e0c <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007158:	e00a      	b.n	8007170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800715a:	f7fc fe57 	bl	8003e0c <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	f241 3288 	movw	r2, #5000	; 0x1388
 8007168:	4293      	cmp	r3, r2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e0ab      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007170:	4b57      	ldr	r3, [pc, #348]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0ee      	beq.n	800715a <HAL_RCC_OscConfig+0x37e>
 800717c:	e014      	b.n	80071a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800717e:	f7fc fe45 	bl	8003e0c <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007184:	e00a      	b.n	800719c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007186:	f7fc fe41 	bl	8003e0c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f241 3288 	movw	r2, #5000	; 0x1388
 8007194:	4293      	cmp	r3, r2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e095      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800719c:	4b4c      	ldr	r3, [pc, #304]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1ee      	bne.n	8007186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d105      	bne.n	80071ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ae:	4b48      	ldr	r3, [pc, #288]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	4a47      	ldr	r2, [pc, #284]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80071b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8081 	beq.w	80072c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071c4:	4b42      	ldr	r3, [pc, #264]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f003 030c 	and.w	r3, r3, #12
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d061      	beq.n	8007294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d146      	bne.n	8007266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071d8:	4b3f      	ldr	r3, [pc, #252]	; (80072d8 <HAL_RCC_OscConfig+0x4fc>)
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071de:	f7fc fe15 	bl	8003e0c <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071e4:	e008      	b.n	80071f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071e6:	f7fc fe11 	bl	8003e0c <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e067      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071f8:	4b35      	ldr	r3, [pc, #212]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f0      	bne.n	80071e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720c:	d108      	bne.n	8007220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800720e:	4b30      	ldr	r3, [pc, #192]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	492d      	ldr	r1, [pc, #180]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 800721c:	4313      	orrs	r3, r2
 800721e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007220:	4b2b      	ldr	r3, [pc, #172]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a19      	ldr	r1, [r3, #32]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	430b      	orrs	r3, r1
 8007232:	4927      	ldr	r1, [pc, #156]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007234:	4313      	orrs	r3, r2
 8007236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007238:	4b27      	ldr	r3, [pc, #156]	; (80072d8 <HAL_RCC_OscConfig+0x4fc>)
 800723a:	2201      	movs	r2, #1
 800723c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800723e:	f7fc fde5 	bl	8003e0c <HAL_GetTick>
 8007242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007244:	e008      	b.n	8007258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007246:	f7fc fde1 	bl	8003e0c <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e037      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007258:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0f0      	beq.n	8007246 <HAL_RCC_OscConfig+0x46a>
 8007264:	e02f      	b.n	80072c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007266:	4b1c      	ldr	r3, [pc, #112]	; (80072d8 <HAL_RCC_OscConfig+0x4fc>)
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800726c:	f7fc fdce 	bl	8003e0c <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007274:	f7fc fdca 	bl	8003e0c <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e020      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007286:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f0      	bne.n	8007274 <HAL_RCC_OscConfig+0x498>
 8007292:	e018      	b.n	80072c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e013      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <HAL_RCC_OscConfig+0x4f4>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d106      	bne.n	80072c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	429a      	cmp	r2, r3
 80072c0:	d001      	beq.n	80072c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40007000 	.word	0x40007000
 80072d8:	42420060 	.word	0x42420060

080072dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e0d0      	b.n	8007492 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072f0:	4b6a      	ldr	r3, [pc, #424]	; (800749c <HAL_RCC_ClockConfig+0x1c0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d910      	bls.n	8007320 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fe:	4b67      	ldr	r3, [pc, #412]	; (800749c <HAL_RCC_ClockConfig+0x1c0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f023 0207 	bic.w	r2, r3, #7
 8007306:	4965      	ldr	r1, [pc, #404]	; (800749c <HAL_RCC_ClockConfig+0x1c0>)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	4313      	orrs	r3, r2
 800730c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800730e:	4b63      	ldr	r3, [pc, #396]	; (800749c <HAL_RCC_ClockConfig+0x1c0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d001      	beq.n	8007320 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e0b8      	b.n	8007492 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d020      	beq.n	800736e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007338:	4b59      	ldr	r3, [pc, #356]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4a58      	ldr	r2, [pc, #352]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 800733e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007342:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007350:	4b53      	ldr	r3, [pc, #332]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	4a52      	ldr	r2, [pc, #328]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007356:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800735a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800735c:	4b50      	ldr	r3, [pc, #320]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	494d      	ldr	r1, [pc, #308]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 800736a:	4313      	orrs	r3, r2
 800736c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d040      	beq.n	80073fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d107      	bne.n	8007392 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007382:	4b47      	ldr	r3, [pc, #284]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d115      	bne.n	80073ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e07f      	b.n	8007492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d107      	bne.n	80073aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800739a:	4b41      	ldr	r3, [pc, #260]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e073      	b.n	8007492 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073aa:	4b3d      	ldr	r3, [pc, #244]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e06b      	b.n	8007492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073ba:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f023 0203 	bic.w	r2, r3, #3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	4936      	ldr	r1, [pc, #216]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073cc:	f7fc fd1e 	bl	8003e0c <HAL_GetTick>
 80073d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d2:	e00a      	b.n	80073ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073d4:	f7fc fd1a 	bl	8003e0c <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e053      	b.n	8007492 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ea:	4b2d      	ldr	r3, [pc, #180]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f003 020c 	and.w	r2, r3, #12
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d1eb      	bne.n	80073d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073fc:	4b27      	ldr	r3, [pc, #156]	; (800749c <HAL_RCC_ClockConfig+0x1c0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d210      	bcs.n	800742c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800740a:	4b24      	ldr	r3, [pc, #144]	; (800749c <HAL_RCC_ClockConfig+0x1c0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f023 0207 	bic.w	r2, r3, #7
 8007412:	4922      	ldr	r1, [pc, #136]	; (800749c <HAL_RCC_ClockConfig+0x1c0>)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	4313      	orrs	r3, r2
 8007418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800741a:	4b20      	ldr	r3, [pc, #128]	; (800749c <HAL_RCC_ClockConfig+0x1c0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d001      	beq.n	800742c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e032      	b.n	8007492 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007438:	4b19      	ldr	r3, [pc, #100]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4916      	ldr	r1, [pc, #88]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007446:	4313      	orrs	r3, r2
 8007448:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d009      	beq.n	800746a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007456:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	490e      	ldr	r1, [pc, #56]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007466:	4313      	orrs	r3, r2
 8007468:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800746a:	f000 f821 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 800746e:	4602      	mov	r2, r0
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	091b      	lsrs	r3, r3, #4
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	490a      	ldr	r1, [pc, #40]	; (80074a4 <HAL_RCC_ClockConfig+0x1c8>)
 800747c:	5ccb      	ldrb	r3, [r1, r3]
 800747e:	fa22 f303 	lsr.w	r3, r2, r3
 8007482:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <HAL_RCC_ClockConfig+0x1cc>)
 8007484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007486:	4b09      	ldr	r3, [pc, #36]	; (80074ac <HAL_RCC_ClockConfig+0x1d0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f7fc faf8 	bl	8003a80 <HAL_InitTick>

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	40022000 	.word	0x40022000
 80074a0:	40021000 	.word	0x40021000
 80074a4:	0800d30c 	.word	0x0800d30c
 80074a8:	20000010 	.word	0x20000010
 80074ac:	20000014 	.word	0x20000014

080074b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	2300      	movs	r3, #0
 80074bc:	60bb      	str	r3, [r7, #8]
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	2300      	movs	r3, #0
 80074c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80074ca:	4b1e      	ldr	r3, [pc, #120]	; (8007544 <HAL_RCC_GetSysClockFreq+0x94>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 030c 	and.w	r3, r3, #12
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d002      	beq.n	80074e0 <HAL_RCC_GetSysClockFreq+0x30>
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d003      	beq.n	80074e6 <HAL_RCC_GetSysClockFreq+0x36>
 80074de:	e027      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80074e0:	4b19      	ldr	r3, [pc, #100]	; (8007548 <HAL_RCC_GetSysClockFreq+0x98>)
 80074e2:	613b      	str	r3, [r7, #16]
      break;
 80074e4:	e027      	b.n	8007536 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	0c9b      	lsrs	r3, r3, #18
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	4a17      	ldr	r2, [pc, #92]	; (800754c <HAL_RCC_GetSysClockFreq+0x9c>)
 80074f0:	5cd3      	ldrb	r3, [r2, r3]
 80074f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d010      	beq.n	8007520 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80074fe:	4b11      	ldr	r3, [pc, #68]	; (8007544 <HAL_RCC_GetSysClockFreq+0x94>)
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	0c5b      	lsrs	r3, r3, #17
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	4a11      	ldr	r2, [pc, #68]	; (8007550 <HAL_RCC_GetSysClockFreq+0xa0>)
 800750a:	5cd3      	ldrb	r3, [r2, r3]
 800750c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a0d      	ldr	r2, [pc, #52]	; (8007548 <HAL_RCC_GetSysClockFreq+0x98>)
 8007512:	fb02 f203 	mul.w	r2, r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	fbb2 f3f3 	udiv	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	e004      	b.n	800752a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007524:	fb02 f303 	mul.w	r3, r2, r3
 8007528:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	613b      	str	r3, [r7, #16]
      break;
 800752e:	e002      	b.n	8007536 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <HAL_RCC_GetSysClockFreq+0x98>)
 8007532:	613b      	str	r3, [r7, #16]
      break;
 8007534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007536:	693b      	ldr	r3, [r7, #16]
}
 8007538:	4618      	mov	r0, r3
 800753a:	371c      	adds	r7, #28
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40021000 	.word	0x40021000
 8007548:	007a1200 	.word	0x007a1200
 800754c:	0800d324 	.word	0x0800d324
 8007550:	0800d334 	.word	0x0800d334
 8007554:	003d0900 	.word	0x003d0900

08007558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800755c:	4b02      	ldr	r3, [pc, #8]	; (8007568 <HAL_RCC_GetHCLKFreq+0x10>)
 800755e:	681b      	ldr	r3, [r3, #0]
}
 8007560:	4618      	mov	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr
 8007568:	20000010 	.word	0x20000010

0800756c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007570:	f7ff fff2 	bl	8007558 <HAL_RCC_GetHCLKFreq>
 8007574:	4602      	mov	r2, r0
 8007576:	4b05      	ldr	r3, [pc, #20]	; (800758c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	4903      	ldr	r1, [pc, #12]	; (8007590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007582:	5ccb      	ldrb	r3, [r1, r3]
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007588:	4618      	mov	r0, r3
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40021000 	.word	0x40021000
 8007590:	0800d31c 	.word	0x0800d31c

08007594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007598:	f7ff ffde 	bl	8007558 <HAL_RCC_GetHCLKFreq>
 800759c:	4602      	mov	r2, r0
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	0adb      	lsrs	r3, r3, #11
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	4903      	ldr	r1, [pc, #12]	; (80075b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075aa:	5ccb      	ldrb	r3, [r1, r3]
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40021000 	.word	0x40021000
 80075b8:	0800d31c 	.word	0x0800d31c

080075bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	220f      	movs	r2, #15
 80075ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075cc:	4b11      	ldr	r3, [pc, #68]	; (8007614 <HAL_RCC_GetClockConfig+0x58>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f003 0203 	and.w	r2, r3, #3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80075d8:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <HAL_RCC_GetClockConfig+0x58>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <HAL_RCC_GetClockConfig+0x58>)
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80075f0:	4b08      	ldr	r3, [pc, #32]	; (8007614 <HAL_RCC_GetClockConfig+0x58>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	08db      	lsrs	r3, r3, #3
 80075f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075fe:	4b06      	ldr	r3, [pc, #24]	; (8007618 <HAL_RCC_GetClockConfig+0x5c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0207 	and.w	r2, r3, #7
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr
 8007614:	40021000 	.word	0x40021000
 8007618:	40022000 	.word	0x40022000

0800761c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <RCC_Delay+0x34>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <RCC_Delay+0x38>)
 800762a:	fba2 2303 	umull	r2, r3, r2, r3
 800762e:	0a5b      	lsrs	r3, r3, #9
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007638:	bf00      	nop
  }
  while (Delay --);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	1e5a      	subs	r2, r3, #1
 800763e:	60fa      	str	r2, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1f9      	bne.n	8007638 <RCC_Delay+0x1c>
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr
 8007650:	20000010 	.word	0x20000010
 8007654:	10624dd3 	.word	0x10624dd3

08007658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e041      	b.n	80076ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fc f9da 	bl	8003a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f000 fa74 	bl	8007b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b01      	cmp	r3, #1
 800770a:	d001      	beq.n	8007710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e03a      	b.n	8007786 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0201 	orr.w	r2, r2, #1
 8007726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a18      	ldr	r2, [pc, #96]	; (8007790 <HAL_TIM_Base_Start_IT+0x98>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00e      	beq.n	8007750 <HAL_TIM_Base_Start_IT+0x58>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773a:	d009      	beq.n	8007750 <HAL_TIM_Base_Start_IT+0x58>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a14      	ldr	r2, [pc, #80]	; (8007794 <HAL_TIM_Base_Start_IT+0x9c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d004      	beq.n	8007750 <HAL_TIM_Base_Start_IT+0x58>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a13      	ldr	r2, [pc, #76]	; (8007798 <HAL_TIM_Base_Start_IT+0xa0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d111      	bne.n	8007774 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b06      	cmp	r3, #6
 8007760:	d010      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f042 0201 	orr.w	r2, r2, #1
 8007770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007772:	e007      	b.n	8007784 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0201 	orr.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800

0800779c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d122      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d11b      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0202 	mvn.w	r2, #2
 80077c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9b4 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 80077e4:	e005      	b.n	80077f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f9a7 	bl	8007b3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f9b6 	bl	8007b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b04      	cmp	r3, #4
 8007804:	d122      	bne.n	800784c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b04      	cmp	r3, #4
 8007812:	d11b      	bne.n	800784c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0204 	mvn.w	r2, #4
 800781c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2202      	movs	r2, #2
 8007822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f98a 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 8007838:	e005      	b.n	8007846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f97d 	bl	8007b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f98c 	bl	8007b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0308 	and.w	r3, r3, #8
 8007856:	2b08      	cmp	r3, #8
 8007858:	d122      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b08      	cmp	r3, #8
 8007866:	d11b      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0208 	mvn.w	r2, #8
 8007870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2204      	movs	r2, #4
 8007876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f960 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 800788c:	e005      	b.n	800789a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f953 	bl	8007b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f962 	bl	8007b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f003 0310 	and.w	r3, r3, #16
 80078aa:	2b10      	cmp	r3, #16
 80078ac:	d122      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f003 0310 	and.w	r3, r3, #16
 80078b8:	2b10      	cmp	r3, #16
 80078ba:	d11b      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f06f 0210 	mvn.w	r2, #16
 80078c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2208      	movs	r2, #8
 80078ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f936 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 80078e0:	e005      	b.n	80078ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f929 	bl	8007b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f938 	bl	8007b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d10e      	bne.n	8007920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b01      	cmp	r3, #1
 800790e:	d107      	bne.n	8007920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f06f 0201 	mvn.w	r2, #1
 8007918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fb ffb6 	bl	800388c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792a:	2b80      	cmp	r3, #128	; 0x80
 800792c:	d10e      	bne.n	800794c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007938:	2b80      	cmp	r3, #128	; 0x80
 800793a:	d107      	bne.n	800794c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fa7b 	bl	8007e42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007956:	2b40      	cmp	r3, #64	; 0x40
 8007958:	d10e      	bne.n	8007978 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d107      	bne.n	8007978 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8fc 	bl	8007b70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b20      	cmp	r3, #32
 8007984:	d10e      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b20      	cmp	r3, #32
 8007992:	d107      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0220 	mvn.w	r2, #32
 800799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa46 	bl	8007e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_TIM_ConfigClockSource+0x1c>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e0b4      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x186>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a00:	d03e      	beq.n	8007a80 <HAL_TIM_ConfigClockSource+0xd4>
 8007a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a06:	f200 8087 	bhi.w	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0e:	f000 8086 	beq.w	8007b1e <HAL_TIM_ConfigClockSource+0x172>
 8007a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a16:	d87f      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a18:	2b70      	cmp	r3, #112	; 0x70
 8007a1a:	d01a      	beq.n	8007a52 <HAL_TIM_ConfigClockSource+0xa6>
 8007a1c:	2b70      	cmp	r3, #112	; 0x70
 8007a1e:	d87b      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a20:	2b60      	cmp	r3, #96	; 0x60
 8007a22:	d050      	beq.n	8007ac6 <HAL_TIM_ConfigClockSource+0x11a>
 8007a24:	2b60      	cmp	r3, #96	; 0x60
 8007a26:	d877      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a28:	2b50      	cmp	r3, #80	; 0x50
 8007a2a:	d03c      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0xfa>
 8007a2c:	2b50      	cmp	r3, #80	; 0x50
 8007a2e:	d873      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a30:	2b40      	cmp	r3, #64	; 0x40
 8007a32:	d058      	beq.n	8007ae6 <HAL_TIM_ConfigClockSource+0x13a>
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d86f      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a38:	2b30      	cmp	r3, #48	; 0x30
 8007a3a:	d064      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x15a>
 8007a3c:	2b30      	cmp	r3, #48	; 0x30
 8007a3e:	d86b      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d060      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x15a>
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d867      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d05c      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x15a>
 8007a4c:	2b10      	cmp	r3, #16
 8007a4e:	d05a      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x15a>
 8007a50:	e062      	b.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	6899      	ldr	r1, [r3, #8]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f000 f968 	bl	8007d36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	609a      	str	r2, [r3, #8]
      break;
 8007a7e:	e04f      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6818      	ldr	r0, [r3, #0]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6899      	ldr	r1, [r3, #8]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f000 f951 	bl	8007d36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aa2:	609a      	str	r2, [r3, #8]
      break;
 8007aa4:	e03c      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	6859      	ldr	r1, [r3, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f000 f8c8 	bl	8007c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2150      	movs	r1, #80	; 0x50
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f91f 	bl	8007d02 <TIM_ITRx_SetConfig>
      break;
 8007ac4:	e02c      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	6859      	ldr	r1, [r3, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f000 f8e6 	bl	8007ca4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2160      	movs	r1, #96	; 0x60
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 f90f 	bl	8007d02 <TIM_ITRx_SetConfig>
      break;
 8007ae4:	e01c      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	6859      	ldr	r1, [r3, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f000 f8a8 	bl	8007c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2140      	movs	r1, #64	; 0x40
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 f8ff 	bl	8007d02 <TIM_ITRx_SetConfig>
      break;
 8007b04:	e00c      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4610      	mov	r0, r2
 8007b12:	f000 f8f6 	bl	8007d02 <TIM_ITRx_SetConfig>
      break;
 8007b16:	e003      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1c:	e000      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr

08007b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc80      	pop	{r7}
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr
	...

08007b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a29      	ldr	r2, [pc, #164]	; (8007c3c <TIM_Base_SetConfig+0xb8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00b      	beq.n	8007bb4 <TIM_Base_SetConfig+0x30>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba2:	d007      	beq.n	8007bb4 <TIM_Base_SetConfig+0x30>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a26      	ldr	r2, [pc, #152]	; (8007c40 <TIM_Base_SetConfig+0xbc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d003      	beq.n	8007bb4 <TIM_Base_SetConfig+0x30>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a25      	ldr	r2, [pc, #148]	; (8007c44 <TIM_Base_SetConfig+0xc0>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d108      	bne.n	8007bc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a1c      	ldr	r2, [pc, #112]	; (8007c3c <TIM_Base_SetConfig+0xb8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00b      	beq.n	8007be6 <TIM_Base_SetConfig+0x62>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd4:	d007      	beq.n	8007be6 <TIM_Base_SetConfig+0x62>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a19      	ldr	r2, [pc, #100]	; (8007c40 <TIM_Base_SetConfig+0xbc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d003      	beq.n	8007be6 <TIM_Base_SetConfig+0x62>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <TIM_Base_SetConfig+0xc0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d108      	bne.n	8007bf8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <TIM_Base_SetConfig+0xb8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d103      	bne.n	8007c2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	691a      	ldr	r2, [r3, #16]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	615a      	str	r2, [r3, #20]
}
 8007c32:	bf00      	nop
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40000400 	.word	0x40000400
 8007c44:	40000800 	.word	0x40000800

08007c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f023 0201 	bic.w	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 030a 	bic.w	r3, r3, #10
 8007c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	621a      	str	r2, [r3, #32]
}
 8007c9a:	bf00      	nop
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr

08007ca4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0210 	bic.w	r2, r3, #16
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	031b      	lsls	r3, r3, #12
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	621a      	str	r2, [r3, #32]
}
 8007cf8:	bf00      	nop
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr

08007d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f043 0307 	orr.w	r3, r3, #7
 8007d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	609a      	str	r2, [r3, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b087      	sub	sp, #28
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	021a      	lsls	r2, r3, #8
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	609a      	str	r2, [r3, #8]
}
 8007d6a:	bf00      	nop
 8007d6c:	371c      	adds	r7, #28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bc80      	pop	{r7}
 8007d72:	4770      	bx	lr

08007d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d101      	bne.n	8007d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	e046      	b.n	8007e1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a16      	ldr	r2, [pc, #88]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00e      	beq.n	8007dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd8:	d009      	beq.n	8007dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a12      	ldr	r2, [pc, #72]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d004      	beq.n	8007dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a10      	ldr	r2, [pc, #64]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d10c      	bne.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800

08007e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr

08007e42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d05d      	beq.n	8007f44 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d059      	beq.n	8007f44 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e98:	2100      	movs	r1, #0
 8007e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d000      	beq.n	8007ea4 <xQueueGenericReset+0x50>
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d14c      	bne.n	8007f44 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8007eaa:	f002 fbd9 	bl	800a660 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb6:	6939      	ldr	r1, [r7, #16]
 8007eb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007eba:	fb01 f303 	mul.w	r3, r1, r3
 8007ebe:	441a      	add	r2, r3
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eda:	3b01      	subs	r3, #1
 8007edc:	6939      	ldr	r1, [r7, #16]
 8007ede:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	441a      	add	r2, r3
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	22ff      	movs	r2, #255	; 0xff
 8007eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	22ff      	movs	r2, #255	; 0xff
 8007ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d114      	bne.n	8007f2a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01a      	beq.n	8007f3e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	3310      	adds	r3, #16
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 fb9d 	bl	800964c <xTaskRemoveFromEventList>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d012      	beq.n	8007f3e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007f18:	4b15      	ldr	r3, [pc, #84]	; (8007f70 <xQueueGenericReset+0x11c>)
 8007f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	e009      	b.n	8007f3e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f002 f9f6 	bl	800a320 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	3324      	adds	r3, #36	; 0x24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f002 f9f1 	bl	800a320 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007f3e:	f002 fbbf 	bl	800a6c0 <vPortExitCritical>
 8007f42:	e001      	b.n	8007f48 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <xQueueGenericReset+0x110>
        __asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	60bb      	str	r3, [r7, #8]
    }
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007f64:	697b      	ldr	r3, [r7, #20]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08a      	sub	sp, #40	; 0x28
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d02e      	beq.n	8007fea <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	fba3 2302 	umull	r2, r3, r3, r2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d000      	beq.n	8007f9c <xQueueGenericCreate+0x28>
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d123      	bne.n	8007fea <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007faa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8007fae:	d81c      	bhi.n	8007fea <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	3350      	adds	r3, #80	; 0x50
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f002 f98a 	bl	800a2d8 <pvPortMalloc>
 8007fc4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01c      	beq.n	8008006 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	3350      	adds	r3, #80	; 0x50
 8007fd4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fd6:	79fa      	ldrb	r2, [r7, #7]
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	68b9      	ldr	r1, [r7, #8]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f814 	bl	8008010 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8007fe8:	e00d      	b.n	8008006 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <xQueueGenericCreate+0x92>
        __asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	613b      	str	r3, [r7, #16]
    }
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008006:	69fb      	ldr	r3, [r7, #28]
    }
 8008008:	4618      	mov	r0, r3
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d103      	bne.n	800802c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	e002      	b.n	8008032 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800803e:	2101      	movs	r1, #1
 8008040:	69b8      	ldr	r0, [r7, #24]
 8008042:	f7ff ff07 	bl	8007e54 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08e      	sub	sp, #56	; 0x38
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008066:	2300      	movs	r3, #0
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <xQueueGenericSend+0x32>
        __asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008086:	bf00      	nop
 8008088:	e7fe      	b.n	8008088 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d103      	bne.n	8008098 <xQueueGenericSend+0x40>
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <xQueueGenericSend+0x44>
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <xQueueGenericSend+0x46>
 800809c:	2300      	movs	r3, #0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <xQueueGenericSend+0x60>
        __asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d103      	bne.n	80080c6 <xQueueGenericSend+0x6e>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <xQueueGenericSend+0x72>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueGenericSend+0x74>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <xQueueGenericSend+0x8e>
        __asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	623b      	str	r3, [r7, #32]
    }
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080e6:	f001 fd53 	bl	8009b90 <xTaskGetSchedulerState>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d102      	bne.n	80080f6 <xQueueGenericSend+0x9e>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <xQueueGenericSend+0xa2>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <xQueueGenericSend+0xa4>
 80080fa:	2300      	movs	r3, #0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <xQueueGenericSend+0xbe>
        __asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	61fb      	str	r3, [r7, #28]
    }
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008116:	f002 faa3 	bl	800a660 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008122:	429a      	cmp	r2, r3
 8008124:	d302      	bcc.n	800812c <xQueueGenericSend+0xd4>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d129      	bne.n	8008180 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008132:	f000 fa3f 	bl	80085b4 <prvCopyDataToQueue>
 8008136:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d010      	beq.n	8008162 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	3324      	adds	r3, #36	; 0x24
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fa81 	bl	800964c <xTaskRemoveFromEventList>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d013      	beq.n	8008178 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8008150:	4b3f      	ldr	r3, [pc, #252]	; (8008250 <xQueueGenericSend+0x1f8>)
 8008152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	e00a      	b.n	8008178 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d007      	beq.n	8008178 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8008168:	4b39      	ldr	r3, [pc, #228]	; (8008250 <xQueueGenericSend+0x1f8>)
 800816a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008178:	f002 faa2 	bl	800a6c0 <vPortExitCritical>
                return pdPASS;
 800817c:	2301      	movs	r3, #1
 800817e:	e063      	b.n	8008248 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d103      	bne.n	800818e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008186:	f002 fa9b 	bl	800a6c0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800818a:	2300      	movs	r3, #0
 800818c:	e05c      	b.n	8008248 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008194:	f107 0314 	add.w	r3, r7, #20
 8008198:	4618      	mov	r0, r3
 800819a:	f001 fb2f 	bl	80097fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800819e:	2301      	movs	r3, #1
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80081a2:	f002 fa8d 	bl	800a6c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80081a6:	f000 fec1 	bl	8008f2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80081aa:	f002 fa59 	bl	800a660 <vPortEnterCritical>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b4:	b25b      	sxtb	r3, r3
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	d103      	bne.n	80081c4 <xQueueGenericSend+0x16c>
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ca:	b25b      	sxtb	r3, r3
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d103      	bne.n	80081da <xQueueGenericSend+0x182>
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081da:	f002 fa71 	bl	800a6c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081de:	1d3a      	adds	r2, r7, #4
 80081e0:	f107 0314 	add.w	r3, r7, #20
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fb1e 	bl	8009828 <xTaskCheckForTimeOut>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d124      	bne.n	800823c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081f4:	f000 fad6 	bl	80087a4 <prvIsQueueFull>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d018      	beq.n	8008230 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	3310      	adds	r3, #16
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f001 f9b6 	bl	8009578 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800820c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800820e:	f000 fa61 	bl	80086d4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008212:	f000 fecf 	bl	8008fb4 <xTaskResumeAll>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	f47f af7c 	bne.w	8008116 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <xQueueGenericSend+0x1f8>)
 8008220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	e772      	b.n	8008116 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008232:	f000 fa4f 	bl	80086d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008236:	f000 febd 	bl	8008fb4 <xTaskResumeAll>
 800823a:	e76c      	b.n	8008116 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800823c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800823e:	f000 fa49 	bl	80086d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008242:	f000 feb7 	bl	8008fb4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8008246:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008248:	4618      	mov	r0, r3
 800824a:	3738      	adds	r7, #56	; 0x38
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	e000ed04 	.word	0xe000ed04

08008254 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b092      	sub	sp, #72	; 0x48
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <xQueueGenericSendFromISR+0x3c>
 8008288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <xQueueGenericSendFromISR+0x40>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <xQueueGenericSendFromISR+0x42>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10a      	bne.n	80082b0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80082ac:	bf00      	nop
 80082ae:	e7fe      	b.n	80082ae <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d103      	bne.n	80082be <xQueueGenericSendFromISR+0x6a>
 80082b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <xQueueGenericSendFromISR+0x6e>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <xQueueGenericSendFromISR+0x70>
 80082c2:	2300      	movs	r3, #0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082de:	f002 fb63 	bl	800a9a8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80082e2:	f3ef 8211 	mrs	r2, BASEPRI
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	623a      	str	r2, [r7, #32]
 80082f8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80082fa:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <xQueueGenericSendFromISR+0xbc>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d146      	bne.n	800839e <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8008310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008316:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800831a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008326:	f000 f945 	bl	80085b4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800832a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d112      	bne.n	800835a <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	2b00      	cmp	r3, #0
 800833a:	d02d      	beq.n	8008398 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800833c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833e:	3324      	adds	r3, #36	; 0x24
 8008340:	4618      	mov	r0, r3
 8008342:	f001 f983 	bl	800964c <xTaskRemoveFromEventList>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d025      	beq.n	8008398 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d022      	beq.n	8008398 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	e01e      	b.n	8008398 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800835a:	f000 ff35 	bl	80091c8 <uxTaskGetNumberOfTasks>
 800835e:	6338      	str	r0, [r7, #48]	; 0x30
 8008360:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8008364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008366:	429a      	cmp	r2, r3
 8008368:	d916      	bls.n	8008398 <xQueueGenericSendFromISR+0x144>
 800836a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800836e:	2b7f      	cmp	r3, #127	; 0x7f
 8008370:	d10a      	bne.n	8008388 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	61bb      	str	r3, [r7, #24]
    }
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xQueueGenericSendFromISR+0x132>
 8008388:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800838c:	3301      	adds	r3, #1
 800838e:	b2db      	uxtb	r3, r3
 8008390:	b25a      	sxtb	r2, r3
 8008392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8008398:	2301      	movs	r3, #1
 800839a:	647b      	str	r3, [r7, #68]	; 0x44
        {
 800839c:	e001      	b.n	80083a2 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	647b      	str	r3, [r7, #68]	; 0x44
 80083a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a4:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80083ac:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80083ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3748      	adds	r7, #72	; 0x48
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08c      	sub	sp, #48	; 0x30
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10a      	bne.n	80083e8 <xQueueReceive+0x30>
        __asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	623b      	str	r3, [r7, #32]
    }
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <xQueueReceive+0x3e>
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <xQueueReceive+0x42>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e000      	b.n	80083fc <xQueueReceive+0x44>
 80083fa:	2300      	movs	r3, #0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <xQueueReceive+0x5e>
        __asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	61fb      	str	r3, [r7, #28]
    }
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008416:	f001 fbbb 	bl	8009b90 <xTaskGetSchedulerState>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <xQueueReceive+0x6e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <xQueueReceive+0x72>
 8008426:	2301      	movs	r3, #1
 8008428:	e000      	b.n	800842c <xQueueReceive+0x74>
 800842a:	2300      	movs	r3, #0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10a      	bne.n	8008446 <xQueueReceive+0x8e>
        __asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	61bb      	str	r3, [r7, #24]
    }
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008446:	f002 f90b 	bl	800a660 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01f      	beq.n	8008496 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800845a:	f000 f915 	bl	8008688 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	1e5a      	subs	r2, r3, #1
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00f      	beq.n	800848e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	3310      	adds	r3, #16
 8008472:	4618      	mov	r0, r3
 8008474:	f001 f8ea 	bl	800964c <xTaskRemoveFromEventList>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800847e:	4b3d      	ldr	r3, [pc, #244]	; (8008574 <xQueueReceive+0x1bc>)
 8008480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800848e:	f002 f917 	bl	800a6c0 <vPortExitCritical>
                return pdPASS;
 8008492:	2301      	movs	r3, #1
 8008494:	e069      	b.n	800856a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800849c:	f002 f910 	bl	800a6c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e062      	b.n	800856a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80084aa:	f107 0310 	add.w	r3, r7, #16
 80084ae:	4618      	mov	r0, r3
 80084b0:	f001 f9a4 	bl	80097fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80084b4:	2301      	movs	r3, #1
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80084b8:	f002 f902 	bl	800a6c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80084bc:	f000 fd36 	bl	8008f2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80084c0:	f002 f8ce 	bl	800a660 <vPortEnterCritical>
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ca:	b25b      	sxtb	r3, r3
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d103      	bne.n	80084da <xQueueReceive+0x122>
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e0:	b25b      	sxtb	r3, r3
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e6:	d103      	bne.n	80084f0 <xQueueReceive+0x138>
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f0:	f002 f8e6 	bl	800a6c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084f4:	1d3a      	adds	r2, r7, #4
 80084f6:	f107 0310 	add.w	r3, r7, #16
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 f993 	bl	8009828 <xTaskCheckForTimeOut>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d123      	bne.n	8008550 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800850a:	f000 f935 	bl	8008778 <prvIsQueueEmpty>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d017      	beq.n	8008544 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	3324      	adds	r3, #36	; 0x24
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f001 f82b 	bl	8009578 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008524:	f000 f8d6 	bl	80086d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008528:	f000 fd44 	bl	8008fb4 <xTaskResumeAll>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d189      	bne.n	8008446 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <xQueueReceive+0x1bc>)
 8008534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	e780      	b.n	8008446 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008546:	f000 f8c5 	bl	80086d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800854a:	f000 fd33 	bl	8008fb4 <xTaskResumeAll>
 800854e:	e77a      	b.n	8008446 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008552:	f000 f8bf 	bl	80086d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008556:	f000 fd2d 	bl	8008fb4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800855a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855c:	f000 f90c 	bl	8008778 <prvIsQueueEmpty>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	f43f af6f 	beq.w	8008446 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8008568:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800856a:	4618      	mov	r0, r3
 800856c:	3730      	adds	r7, #48	; 0x30
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	e000ed04 	.word	0xe000ed04

08008578 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10a      	bne.n	800859c <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60bb      	str	r3, [r7, #8]
    }
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800859c:	f002 f860 	bl	800a660 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80085a6:	f002 f88b 	bl	800a6c0 <vPortExitCritical>

    return uxReturn;
 80085aa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10d      	bne.n	80085ee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d14d      	bne.n	8008676 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 faf4 	bl	8009bcc <xTaskPriorityDisinherit>
 80085e4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	609a      	str	r2, [r3, #8]
 80085ec:	e043      	b.n	8008676 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d119      	bne.n	8008628 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6858      	ldr	r0, [r3, #4]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	461a      	mov	r2, r3
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	f002 fa4e 	bl	800aaa0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	441a      	add	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	d32b      	bcc.n	8008676 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	e026      	b.n	8008676 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68d8      	ldr	r0, [r3, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	461a      	mov	r2, r3
 8008632:	68b9      	ldr	r1, [r7, #8]
 8008634:	f002 fa34 	bl	800aaa0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	425b      	negs	r3, r3
 8008642:	441a      	add	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d207      	bcs.n	8008664 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	425b      	negs	r3, r3
 800865e:	441a      	add	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d105      	bne.n	8008676 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	3b01      	subs	r3, #1
 8008674:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800867e:	697b      	ldr	r3, [r7, #20]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d018      	beq.n	80086cc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	441a      	add	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d303      	bcc.n	80086bc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68d9      	ldr	r1, [r3, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c4:	461a      	mov	r2, r3
 80086c6:	6838      	ldr	r0, [r7, #0]
 80086c8:	f002 f9ea 	bl	800aaa0 <memcpy>
    }
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80086dc:	f001 ffc0 	bl	800a660 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80086e8:	e011      	b.n	800870e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d012      	beq.n	8008718 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3324      	adds	r3, #36	; 0x24
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 ffa8 	bl	800964c <xTaskRemoveFromEventList>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008702:	f001 f8f7 	bl	80098f4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	3b01      	subs	r3, #1
 800870a:	b2db      	uxtb	r3, r3
 800870c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800870e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	dce9      	bgt.n	80086ea <prvUnlockQueue+0x16>
 8008716:	e000      	b.n	800871a <prvUnlockQueue+0x46>
                    break;
 8008718:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	22ff      	movs	r2, #255	; 0xff
 800871e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8008722:	f001 ffcd 	bl	800a6c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008726:	f001 ff9b 	bl	800a660 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008730:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008732:	e011      	b.n	8008758 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d012      	beq.n	8008762 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3310      	adds	r3, #16
 8008740:	4618      	mov	r0, r3
 8008742:	f000 ff83 	bl	800964c <xTaskRemoveFromEventList>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800874c:	f001 f8d2 	bl	80098f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	3b01      	subs	r3, #1
 8008754:	b2db      	uxtb	r3, r3
 8008756:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800875c:	2b00      	cmp	r3, #0
 800875e:	dce9      	bgt.n	8008734 <prvUnlockQueue+0x60>
 8008760:	e000      	b.n	8008764 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008762:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	22ff      	movs	r2, #255	; 0xff
 8008768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800876c:	f001 ffa8 	bl	800a6c0 <vPortExitCritical>
}
 8008770:	bf00      	nop
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008780:	f001 ff6e 	bl	800a660 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800878c:	2301      	movs	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	e001      	b.n	8008796 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008796:	f001 ff93 	bl	800a6c0 <vPortExitCritical>

    return xReturn;
 800879a:	68fb      	ldr	r3, [r7, #12]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80087ac:	f001 ff58 	bl	800a660 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d102      	bne.n	80087c2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e001      	b.n	80087c6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80087c6:	f001 ff7b 	bl	800a6c0 <vPortExitCritical>

    return xReturn;
 80087ca:	68fb      	ldr	r3, [r7, #12]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <vQueueAddToRegistry+0x2a>
        __asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	60fb      	str	r3, [r7, #12]
    }
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d024      	beq.n	800884e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	e01e      	b.n	8008848 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800880a:	4a18      	ldr	r2, [pc, #96]	; (800886c <vQueueAddToRegistry+0x98>)
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	4413      	add	r3, r2
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d105      	bne.n	8008826 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	4a13      	ldr	r2, [pc, #76]	; (800886c <vQueueAddToRegistry+0x98>)
 8008820:	4413      	add	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
                    break;
 8008824:	e013      	b.n	800884e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <vQueueAddToRegistry+0x6e>
 800882c:	4a0f      	ldr	r2, [pc, #60]	; (800886c <vQueueAddToRegistry+0x98>)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d104      	bne.n	8008842 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	4a0b      	ldr	r2, [pc, #44]	; (800886c <vQueueAddToRegistry+0x98>)
 800883e:	4413      	add	r3, r2
 8008840:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	3301      	adds	r3, #1
 8008846:	617b      	str	r3, [r7, #20]
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2b07      	cmp	r3, #7
 800884c:	d9dd      	bls.n	800880a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8008860:	bf00      	nop
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	bc80      	pop	{r7}
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	200004d8 	.word	0x200004d8

08008870 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008880:	f001 feee 	bl	800a660 <vPortEnterCritical>
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800888a:	b25b      	sxtb	r3, r3
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d103      	bne.n	800889a <vQueueWaitForMessageRestricted+0x2a>
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088a0:	b25b      	sxtb	r3, r3
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d103      	bne.n	80088b0 <vQueueWaitForMessageRestricted+0x40>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088b0:	f001 ff06 	bl	800a6c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	3324      	adds	r3, #36	; 0x24
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 fe7b 	bl	80095c0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80088ca:	6978      	ldr	r0, [r7, #20]
 80088cc:	f7ff ff02 	bl	80086d4 <prvUnlockQueue>
    }
 80088d0:	bf00      	nop
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08c      	sub	sp, #48	; 0x30
 80088dc:	af04      	add	r7, sp, #16
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 fcf4 	bl	800a2d8 <pvPortMalloc>
 80088f0:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d013      	beq.n	8008920 <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088f8:	207c      	movs	r0, #124	; 0x7c
 80088fa:	f001 fced 	bl	800a2d8 <pvPortMalloc>
 80088fe:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008906:	227c      	movs	r2, #124	; 0x7c
 8008908:	2100      	movs	r1, #0
 800890a:	69f8      	ldr	r0, [r7, #28]
 800890c:	f002 f8d6 	bl	800aabc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
 8008916:	e005      	b.n	8008924 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8008918:	6978      	ldr	r0, [r7, #20]
 800891a:	f001 fcef 	bl	800a2fc <vPortFree>
 800891e:	e001      	b.n	8008924 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d013      	beq.n	8008952 <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800892a:	2300      	movs	r3, #0
 800892c:	9303      	str	r3, [sp, #12]
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	9302      	str	r3, [sp, #8]
 8008932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f80e 	bl	8008962 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008946:	69f8      	ldr	r0, [r7, #28]
 8008948:	f000 f89a 	bl	8008a80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800894c:	2301      	movs	r3, #1
 800894e:	61bb      	str	r3, [r7, #24]
 8008950:	e002      	b.n	8008958 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008952:	f04f 33ff 	mov.w	r3, #4294967295
 8008956:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008958:	69bb      	ldr	r3, [r7, #24]
    }
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b088      	sub	sp, #32
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	461a      	mov	r2, r3
 800897a:	21a5      	movs	r1, #165	; 0xa5
 800897c:	f002 f89e 	bl	800aabc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800898a:	3b01      	subs	r3, #1
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	f023 0307 	bic.w	r3, r3, #7
 8008998:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <prvInitialiseNewTask+0x58>
        __asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	617b      	str	r3, [r7, #20]
    }
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01e      	beq.n	80089fe <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089c0:	2300      	movs	r3, #0
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	e012      	b.n	80089ec <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	4413      	add	r3, r2
 80089cc:	7819      	ldrb	r1, [r3, #0]
 80089ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	4413      	add	r3, r2
 80089d4:	3334      	adds	r3, #52	; 0x34
 80089d6:	460a      	mov	r2, r1
 80089d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d006      	beq.n	80089f4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	3301      	adds	r3, #1
 80089ea:	61fb      	str	r3, [r7, #28]
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	2b13      	cmp	r3, #19
 80089f0:	d9e9      	bls.n	80089c6 <prvInitialiseNewTask+0x64>
 80089f2:	e000      	b.n	80089f6 <prvInitialiseNewTask+0x94>
            {
                break;
 80089f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d90a      	bls.n	8008a1a <prvInitialiseNewTask+0xb8>
        __asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	613b      	str	r3, [r7, #16]
    }
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d901      	bls.n	8008a24 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a20:	2304      	movs	r3, #4
 8008a22:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a28:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a2e:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	3304      	adds	r3, #4
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 fc92 	bl	800a35e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	3318      	adds	r3, #24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 fc8d 	bl	800a35e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a48:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	f1c3 0205 	rsb	r2, r3, #5
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a58:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	68f9      	ldr	r1, [r7, #12]
 8008a5e:	69b8      	ldr	r0, [r7, #24]
 8008a60:	f001 fd0e 	bl	800a480 <pxPortInitialiseStack>
 8008a64:	4602      	mov	r2, r0
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a74:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008a76:	bf00      	nop
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008a88:	f001 fdea 	bl	800a660 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008a8c:	4b41      	ldr	r3, [pc, #260]	; (8008b94 <prvAddNewTaskToReadyList+0x114>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3301      	adds	r3, #1
 8008a92:	4a40      	ldr	r2, [pc, #256]	; (8008b94 <prvAddNewTaskToReadyList+0x114>)
 8008a94:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008a96:	4b40      	ldr	r3, [pc, #256]	; (8008b98 <prvAddNewTaskToReadyList+0x118>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8008a9e:	4a3e      	ldr	r2, [pc, #248]	; (8008b98 <prvAddNewTaskToReadyList+0x118>)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008aa4:	4b3b      	ldr	r3, [pc, #236]	; (8008b94 <prvAddNewTaskToReadyList+0x114>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d110      	bne.n	8008ace <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008aac:	f000 ffa4 	bl	80099f8 <prvInitialiseTaskLists>
 8008ab0:	e00d      	b.n	8008ace <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8008ab2:	4b3a      	ldr	r3, [pc, #232]	; (8008b9c <prvAddNewTaskToReadyList+0x11c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d109      	bne.n	8008ace <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008aba:	4b37      	ldr	r3, [pc, #220]	; (8008b98 <prvAddNewTaskToReadyList+0x118>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d802      	bhi.n	8008ace <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008ac8:	4a33      	ldr	r2, [pc, #204]	; (8008b98 <prvAddNewTaskToReadyList+0x118>)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8008ace:	4b34      	ldr	r3, [pc, #208]	; (8008ba0 <prvAddNewTaskToReadyList+0x120>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	4a32      	ldr	r2, [pc, #200]	; (8008ba0 <prvAddNewTaskToReadyList+0x120>)
 8008ad6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ad8:	4b31      	ldr	r3, [pc, #196]	; (8008ba0 <prvAddNewTaskToReadyList+0x120>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae4:	4b2f      	ldr	r3, [pc, #188]	; (8008ba4 <prvAddNewTaskToReadyList+0x124>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d903      	bls.n	8008af4 <prvAddNewTaskToReadyList+0x74>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	4a2c      	ldr	r2, [pc, #176]	; (8008ba4 <prvAddNewTaskToReadyList+0x124>)
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af8:	492b      	ldr	r1, [pc, #172]	; (8008ba8 <prvAddNewTaskToReadyList+0x128>)
 8008afa:	4613      	mov	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	440b      	add	r3, r1
 8008b04:	3304      	adds	r3, #4
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	609a      	str	r2, [r3, #8]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60da      	str	r2, [r3, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	3204      	adds	r2, #4
 8008b20:	605a      	str	r2, [r3, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	1d1a      	adds	r2, r3, #4
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	609a      	str	r2, [r3, #8]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <prvAddNewTaskToReadyList+0x128>)
 8008b38:	441a      	add	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	615a      	str	r2, [r3, #20]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	4919      	ldr	r1, [pc, #100]	; (8008ba8 <prvAddNewTaskToReadyList+0x128>)
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	1c59      	adds	r1, r3, #1
 8008b52:	4815      	ldr	r0, [pc, #84]	; (8008ba8 <prvAddNewTaskToReadyList+0x128>)
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4403      	add	r3, r0
 8008b5e:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8008b60:	f001 fdae 	bl	800a6c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8008b64:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <prvAddNewTaskToReadyList+0x11c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00e      	beq.n	8008b8a <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <prvAddNewTaskToReadyList+0x118>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d207      	bcs.n	8008b8a <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <prvAddNewTaskToReadyList+0x12c>)
 8008b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	200002bc 	.word	0x200002bc
 8008b98:	200001e4 	.word	0x200001e4
 8008b9c:	200002c8 	.word	0x200002c8
 8008ba0:	200002d8 	.word	0x200002d8
 8008ba4:	200002c4 	.word	0x200002c4
 8008ba8:	200001e8 	.word	0x200001e8
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d017      	beq.n	8008bf2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8008bc2:	4b13      	ldr	r3, [pc, #76]	; (8008c10 <vTaskDelay+0x60>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <vTaskDelay+0x30>
        __asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	60bb      	str	r3, [r7, #8]
    }
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8008be0:	f000 f9a4 	bl	8008f2c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008be4:	2100      	movs	r1, #0
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 f886 	bl	8009cf8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8008bec:	f000 f9e2 	bl	8008fb4 <xTaskResumeAll>
 8008bf0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d107      	bne.n	8008c08 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <vTaskDelay+0x64>)
 8008bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200002e4 	.word	0x200002e4
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8008c20:	f001 fd1e 	bl	800a660 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <vTaskSuspend+0x18>
 8008c2a:	4b36      	ldr	r3, [pc, #216]	; (8008d04 <vTaskSuspend+0xec>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	e000      	b.n	8008c32 <vTaskSuspend+0x1a>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 fbf7 	bl	800a42c <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <vTaskSuspend+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	3318      	adds	r3, #24
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f001 fbee 	bl	800a42c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	3304      	adds	r3, #4
 8008c54:	4619      	mov	r1, r3
 8008c56:	482c      	ldr	r0, [pc, #176]	; (8008d08 <vTaskSuspend+0xf0>)
 8008c58:	f001 fb8d 	bl	800a376 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	e010      	b.n	8008c84 <vTaskSuspend+0x6c>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	4413      	add	r3, r2
 8008c68:	3378      	adds	r3, #120	; 0x78
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d105      	bne.n	8008c7e <vTaskSuspend+0x66>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	4413      	add	r3, r2
 8008c78:	3378      	adds	r3, #120	; 0x78
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	3301      	adds	r3, #1
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	ddeb      	ble.n	8008c62 <vTaskSuspend+0x4a>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8008c8a:	f001 fd19 	bl	800a6c0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8008c8e:	4b1f      	ldr	r3, [pc, #124]	; (8008d0c <vTaskSuspend+0xf4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <vTaskSuspend+0x8a>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8008c96:	f001 fce3 	bl	800a660 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8008c9a:	f000 ff5f 	bl	8009b5c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8008c9e:	f001 fd0f 	bl	800a6c0 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8008ca2:	4b18      	ldr	r3, [pc, #96]	; (8008d04 <vTaskSuspend+0xec>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d127      	bne.n	8008cfc <vTaskSuspend+0xe4>
        {
            if( xSchedulerRunning != pdFALSE )
 8008cac:	4b17      	ldr	r3, [pc, #92]	; (8008d0c <vTaskSuspend+0xf4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d017      	beq.n	8008ce4 <vTaskSuspend+0xcc>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8008cb4:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <vTaskSuspend+0xf8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00a      	beq.n	8008cd2 <vTaskSuspend+0xba>
        __asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	60fb      	str	r3, [r7, #12]
    }
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <vTaskSuspend+0xb8>
                portYIELD_WITHIN_API();
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <vTaskSuspend+0xfc>)
 8008cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008ce2:	e00b      	b.n	8008cfc <vTaskSuspend+0xe4>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008ce4:	4b08      	ldr	r3, [pc, #32]	; (8008d08 <vTaskSuspend+0xf0>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <vTaskSuspend+0x100>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d103      	bne.n	8008cf8 <vTaskSuspend+0xe0>
                    pxCurrentTCB = NULL;
 8008cf0:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <vTaskSuspend+0xec>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
    }
 8008cf6:	e001      	b.n	8008cfc <vTaskSuspend+0xe4>
                    vTaskSwitchContext();
 8008cf8:	f000 fbe2 	bl	80094c0 <vTaskSwitchContext>
    }
 8008cfc:	bf00      	nop
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	200001e4 	.word	0x200001e4
 8008d08:	200002a8 	.word	0x200002a8
 8008d0c:	200002c8 	.word	0x200002c8
 8008d10:	200002e4 	.word	0x200002e4
 8008d14:	e000ed04 	.word	0xe000ed04
 8008d18:	200002bc 	.word	0x200002bc

08008d1c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	60fb      	str	r3, [r7, #12]
    }
 8008d44:	bf00      	nop
 8008d46:	e7fe      	b.n	8008d46 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	4a09      	ldr	r2, [pc, #36]	; (8008d74 <prvTaskIsTaskSuspended+0x58>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d10a      	bne.n	8008d68 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d56:	4a08      	ldr	r2, [pc, #32]	; (8008d78 <prvTaskIsTaskSuspended+0x5c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d005      	beq.n	8008d68 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8008d64:	2301      	movs	r3, #1
 8008d66:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008d68:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bc80      	pop	{r7}
 8008d72:	4770      	bx	lr
 8008d74:	200002a8 	.word	0x200002a8
 8008d78:	2000027c 	.word	0x2000027c

08008d7c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10a      	bne.n	8008da4 <vTaskResume+0x28>
        __asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60fb      	str	r3, [r7, #12]
    }
 8008da0:	bf00      	nop
 8008da2:	e7fe      	b.n	8008da2 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008da4:	4b34      	ldr	r3, [pc, #208]	; (8008e78 <vTaskResume+0xfc>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d060      	beq.n	8008e70 <vTaskResume+0xf4>
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d05d      	beq.n	8008e70 <vTaskResume+0xf4>
        {
            taskENTER_CRITICAL();
 8008db4:	f001 fc54 	bl	800a660 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008db8:	6978      	ldr	r0, [r7, #20]
 8008dba:	f7ff ffaf 	bl	8008d1c <prvTaskIsTaskSuspended>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d053      	beq.n	8008e6c <vTaskResume+0xf0>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 fb2f 	bl	800a42c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd2:	4b2a      	ldr	r3, [pc, #168]	; (8008e7c <vTaskResume+0x100>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d903      	bls.n	8008de2 <vTaskResume+0x66>
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dde:	4a27      	ldr	r2, [pc, #156]	; (8008e7c <vTaskResume+0x100>)
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de6:	4926      	ldr	r1, [pc, #152]	; (8008e80 <vTaskResume+0x104>)
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	3304      	adds	r3, #4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	613b      	str	r3, [r7, #16]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	609a      	str	r2, [r3, #8]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	689a      	ldr	r2, [r3, #8]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	60da      	str	r2, [r3, #12]
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	3204      	adds	r2, #4
 8008e0e:	605a      	str	r2, [r3, #4]
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	1d1a      	adds	r2, r3, #4
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	609a      	str	r2, [r3, #8]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4a16      	ldr	r2, [pc, #88]	; (8008e80 <vTaskResume+0x104>)
 8008e26:	441a      	add	r2, r3
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	615a      	str	r2, [r3, #20]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	4913      	ldr	r1, [pc, #76]	; (8008e80 <vTaskResume+0x104>)
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	1c59      	adds	r1, r3, #1
 8008e40:	480f      	ldr	r0, [pc, #60]	; (8008e80 <vTaskResume+0x104>)
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4403      	add	r3, r0
 8008e4c:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <vTaskResume+0xfc>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d307      	bcc.n	8008e6c <vTaskResume+0xf0>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8008e5c:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <vTaskResume+0x108>)
 8008e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8008e6c:	f001 fc28 	bl	800a6c0 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008e70:	bf00      	nop
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	200001e4 	.word	0x200001e4
 8008e7c:	200002c4 	.word	0x200002c4
 8008e80:	200001e8 	.word	0x200001e8
 8008e84:	e000ed04 	.word	0xe000ed04

08008e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8008e8e:	4b20      	ldr	r3, [pc, #128]	; (8008f10 <vTaskStartScheduler+0x88>)
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	2300      	movs	r3, #0
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2300      	movs	r3, #0
 8008e98:	2280      	movs	r2, #128	; 0x80
 8008e9a:	491e      	ldr	r1, [pc, #120]	; (8008f14 <vTaskStartScheduler+0x8c>)
 8008e9c:	481e      	ldr	r0, [pc, #120]	; (8008f18 <vTaskStartScheduler+0x90>)
 8008e9e:	f7ff fd1b 	bl	80088d8 <xTaskCreate>
 8008ea2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d102      	bne.n	8008eb0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8008eaa:	f000 ff93 	bl	8009dd4 <xTimerCreateTimerTask>
 8008eae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d116      	bne.n	8008ee4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	60bb      	str	r3, [r7, #8]
    }
 8008ec8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8008eca:	4b14      	ldr	r3, [pc, #80]	; (8008f1c <vTaskStartScheduler+0x94>)
 8008ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008ed2:	4b13      	ldr	r3, [pc, #76]	; (8008f20 <vTaskStartScheduler+0x98>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ed8:	4b12      	ldr	r3, [pc, #72]	; (8008f24 <vTaskStartScheduler+0x9c>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8008ede:	f001 fb4d 	bl	800a57c <xPortStartScheduler>
 8008ee2:	e00e      	b.n	8008f02 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eea:	d10a      	bne.n	8008f02 <vTaskStartScheduler+0x7a>
        __asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	607b      	str	r3, [r7, #4]
    }
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008f02:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <vTaskStartScheduler+0xa0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	200002e0 	.word	0x200002e0
 8008f14:	0800d2f4 	.word	0x0800d2f4
 8008f18:	0800990d 	.word	0x0800990d
 8008f1c:	200002dc 	.word	0x200002dc
 8008f20:	200002c8 	.word	0x200002c8
 8008f24:	200002c0 	.word	0x200002c0
 8008f28:	2000001c 	.word	0x2000001c

08008f2c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <vTaskSuspendAll+0x18>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3301      	adds	r3, #1
 8008f36:	4a03      	ldr	r2, [pc, #12]	; (8008f44 <vTaskSuspendAll+0x18>)
 8008f38:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008f3a:	bf00      	nop
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bc80      	pop	{r7}
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	200002e4 	.word	0x200002e4

08008f48 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008f52:	4b13      	ldr	r3, [pc, #76]	; (8008fa0 <prvGetExpectedIdleTime+0x58>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008f5e:	4b11      	ldr	r3, [pc, #68]	; (8008fa4 <prvGetExpectedIdleTime+0x5c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	607b      	str	r3, [r7, #4]
 8008f6c:	e012      	b.n	8008f94 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <prvGetExpectedIdleTime+0x60>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d902      	bls.n	8008f7c <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	607b      	str	r3, [r7, #4]
 8008f7a:	e00b      	b.n	8008f94 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	e005      	b.n	8008f94 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8008f88:	4b08      	ldr	r3, [pc, #32]	; (8008fac <prvGetExpectedIdleTime+0x64>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	4b08      	ldr	r3, [pc, #32]	; (8008fb0 <prvGetExpectedIdleTime+0x68>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 8008f94:	687b      	ldr	r3, [r7, #4]
    }
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bc80      	pop	{r7}
 8008f9e:	4770      	bx	lr
 8008fa0:	200002c4 	.word	0x200002c4
 8008fa4:	200001e4 	.word	0x200001e4
 8008fa8:	200001e8 	.word	0x200001e8
 8008fac:	200002dc 	.word	0x200002dc
 8008fb0:	200002c0 	.word	0x200002c0

08008fb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8008fc2:	4b71      	ldr	r3, [pc, #452]	; (8009188 <xTaskResumeAll+0x1d4>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <xTaskResumeAll+0x2c>
        __asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	607b      	str	r3, [r7, #4]
    }
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8008fe0:	f001 fb3e 	bl	800a660 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008fe4:	4b68      	ldr	r3, [pc, #416]	; (8009188 <xTaskResumeAll+0x1d4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	4a67      	ldr	r2, [pc, #412]	; (8009188 <xTaskResumeAll+0x1d4>)
 8008fec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fee:	4b66      	ldr	r3, [pc, #408]	; (8009188 <xTaskResumeAll+0x1d4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f040 80c1 	bne.w	800917a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ff8:	4b64      	ldr	r3, [pc, #400]	; (800918c <xTaskResumeAll+0x1d8>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 80bc 	beq.w	800917a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009002:	e08b      	b.n	800911c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009004:	4b62      	ldr	r3, [pc, #392]	; (8009190 <xTaskResumeAll+0x1dc>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	613b      	str	r3, [r7, #16]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	6a12      	ldr	r2, [r2, #32]
 800901a:	609a      	str	r2, [r3, #8]
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	69fa      	ldr	r2, [r7, #28]
 8009022:	69d2      	ldr	r2, [r2, #28]
 8009024:	605a      	str	r2, [r3, #4]
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3318      	adds	r3, #24
 800902e:	429a      	cmp	r2, r3
 8009030:	d103      	bne.n	800903a <xTaskResumeAll+0x86>
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	6a1a      	ldr	r2, [r3, #32]
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	605a      	str	r2, [r3, #4]
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	2200      	movs	r2, #0
 800903e:	629a      	str	r2, [r3, #40]	; 0x28
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	1e5a      	subs	r2, r3, #1
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	68d2      	ldr	r2, [r2, #12]
 8009058:	609a      	str	r2, [r3, #8]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	6892      	ldr	r2, [r2, #8]
 8009062:	605a      	str	r2, [r3, #4]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	3304      	adds	r3, #4
 800906c:	429a      	cmp	r2, r3
 800906e:	d103      	bne.n	8009078 <xTaskResumeAll+0xc4>
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	605a      	str	r2, [r3, #4]
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2200      	movs	r2, #0
 800907c:	615a      	str	r2, [r3, #20]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	1e5a      	subs	r2, r3, #1
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908c:	4b41      	ldr	r3, [pc, #260]	; (8009194 <xTaskResumeAll+0x1e0>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	429a      	cmp	r2, r3
 8009092:	d903      	bls.n	800909c <xTaskResumeAll+0xe8>
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	4a3e      	ldr	r2, [pc, #248]	; (8009194 <xTaskResumeAll+0x1e0>)
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	493d      	ldr	r1, [pc, #244]	; (8009198 <xTaskResumeAll+0x1e4>)
 80090a2:	4613      	mov	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	440b      	add	r3, r1
 80090ac:	3304      	adds	r3, #4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60bb      	str	r3, [r7, #8]
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	609a      	str	r2, [r3, #8]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	689a      	ldr	r2, [r3, #8]
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	60da      	str	r2, [r3, #12]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	3204      	adds	r2, #4
 80090c8:	605a      	str	r2, [r3, #4]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	1d1a      	adds	r2, r3, #4
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	609a      	str	r2, [r3, #8]
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4a2e      	ldr	r2, [pc, #184]	; (8009198 <xTaskResumeAll+0x1e4>)
 80090e0:	441a      	add	r2, r3
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	615a      	str	r2, [r3, #20]
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	492b      	ldr	r1, [pc, #172]	; (8009198 <xTaskResumeAll+0x1e4>)
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	440b      	add	r3, r1
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	1c59      	adds	r1, r3, #1
 80090fa:	4827      	ldr	r0, [pc, #156]	; (8009198 <xTaskResumeAll+0x1e4>)
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4403      	add	r3, r0
 8009106:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	4b23      	ldr	r3, [pc, #140]	; (800919c <xTaskResumeAll+0x1e8>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	429a      	cmp	r2, r3
 8009114:	d302      	bcc.n	800911c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8009116:	4b22      	ldr	r3, [pc, #136]	; (80091a0 <xTaskResumeAll+0x1ec>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800911c:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <xTaskResumeAll+0x1dc>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f47f af6f 	bne.w	8009004 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800912c:	f000 fd16 	bl	8009b5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009130:	4b1c      	ldr	r3, [pc, #112]	; (80091a4 <xTaskResumeAll+0x1f0>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d010      	beq.n	800915e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800913c:	f000 f8a8 	bl	8009290 <xTaskIncrementTick>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8009146:	4b16      	ldr	r3, [pc, #88]	; (80091a0 <xTaskResumeAll+0x1ec>)
 8009148:	2201      	movs	r2, #1
 800914a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	3b01      	subs	r3, #1
 8009150:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1f1      	bne.n	800913c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8009158:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <xTaskResumeAll+0x1f0>)
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800915e:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <xTaskResumeAll+0x1ec>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d009      	beq.n	800917a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009166:	2301      	movs	r3, #1
 8009168:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <xTaskResumeAll+0x1f4>)
 800916c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800917a:	f001 faa1 	bl	800a6c0 <vPortExitCritical>

    return xAlreadyYielded;
 800917e:	69bb      	ldr	r3, [r7, #24]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	200002e4 	.word	0x200002e4
 800918c:	200002bc 	.word	0x200002bc
 8009190:	2000027c 	.word	0x2000027c
 8009194:	200002c4 	.word	0x200002c4
 8009198:	200001e8 	.word	0x200001e8
 800919c:	200001e4 	.word	0x200001e4
 80091a0:	200002d0 	.word	0x200002d0
 80091a4:	200002cc 	.word	0x200002cc
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80091b2:	4b04      	ldr	r3, [pc, #16]	; (80091c4 <xTaskGetTickCount+0x18>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80091b8:	687b      	ldr	r3, [r7, #4]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	bc80      	pop	{r7}
 80091c2:	4770      	bx	lr
 80091c4:	200002c0 	.word	0x200002c0

080091c8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80091cc:	4b02      	ldr	r3, [pc, #8]	; (80091d8 <uxTaskGetNumberOfTasks+0x10>)
 80091ce:	681b      	ldr	r3, [r3, #0]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr
 80091d8:	200002bc 	.word	0x200002bc

080091dc <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80091e4:	4b26      	ldr	r3, [pc, #152]	; (8009280 <vTaskStepTick+0xa4>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	441a      	add	r2, r3
 80091ec:	4b25      	ldr	r3, [pc, #148]	; (8009284 <vTaskStepTick+0xa8>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d90a      	bls.n	800920a <vTaskStepTick+0x2e>
        __asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	617b      	str	r3, [r7, #20]
    }
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 800920a:	4b1d      	ldr	r3, [pc, #116]	; (8009280 <vTaskStepTick+0xa4>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	441a      	add	r2, r3
 8009212:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <vTaskStepTick+0xa8>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	429a      	cmp	r2, r3
 8009218:	d128      	bne.n	800926c <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 800921a:	4b1b      	ldr	r3, [pc, #108]	; (8009288 <vTaskStepTick+0xac>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10a      	bne.n	8009238 <vTaskStepTick+0x5c>
        __asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	613b      	str	r3, [r7, #16]
    }
 8009234:	bf00      	nop
 8009236:	e7fe      	b.n	8009236 <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <vTaskStepTick+0x78>
        __asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	60fb      	str	r3, [r7, #12]
    }
 8009250:	bf00      	nop
 8009252:	e7fe      	b.n	8009252 <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8009254:	f001 fa04 	bl	800a660 <vPortEnterCritical>
            {
                xPendedTicks++;
 8009258:	4b0c      	ldr	r3, [pc, #48]	; (800928c <vTaskStepTick+0xb0>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3301      	adds	r3, #1
 800925e:	4a0b      	ldr	r2, [pc, #44]	; (800928c <vTaskStepTick+0xb0>)
 8009260:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8009262:	f001 fa2d 	bl	800a6c0 <vPortExitCritical>
            xTicksToJump--;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3b01      	subs	r3, #1
 800926a:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <vTaskStepTick+0xa4>)
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4413      	add	r3, r2
 8009274:	4a02      	ldr	r2, [pc, #8]	; (8009280 <vTaskStepTick+0xa4>)
 8009276:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	200002c0 	.word	0x200002c0
 8009284:	200002dc 	.word	0x200002dc
 8009288:	200002e4 	.word	0x200002e4
 800928c:	200002cc 	.word	0x200002cc

08009290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b08a      	sub	sp, #40	; 0x28
 8009294:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009296:	2300      	movs	r3, #0
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800929a:	4b7e      	ldr	r3, [pc, #504]	; (8009494 <xTaskIncrementTick+0x204>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f040 80ed 	bne.w	800947e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092a4:	4b7c      	ldr	r3, [pc, #496]	; (8009498 <xTaskIncrementTick+0x208>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3301      	adds	r3, #1
 80092aa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80092ac:	4a7a      	ldr	r2, [pc, #488]	; (8009498 <xTaskIncrementTick+0x208>)
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d120      	bne.n	80092fa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80092b8:	4b78      	ldr	r3, [pc, #480]	; (800949c <xTaskIncrementTick+0x20c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <xTaskIncrementTick+0x48>
        __asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	607b      	str	r3, [r7, #4]
    }
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <xTaskIncrementTick+0x46>
 80092d8:	4b70      	ldr	r3, [pc, #448]	; (800949c <xTaskIncrementTick+0x20c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	61fb      	str	r3, [r7, #28]
 80092de:	4b70      	ldr	r3, [pc, #448]	; (80094a0 <xTaskIncrementTick+0x210>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a6e      	ldr	r2, [pc, #440]	; (800949c <xTaskIncrementTick+0x20c>)
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	4a6e      	ldr	r2, [pc, #440]	; (80094a0 <xTaskIncrementTick+0x210>)
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	4b6d      	ldr	r3, [pc, #436]	; (80094a4 <xTaskIncrementTick+0x214>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	4a6c      	ldr	r2, [pc, #432]	; (80094a4 <xTaskIncrementTick+0x214>)
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	f000 fc31 	bl	8009b5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80092fa:	4b6b      	ldr	r3, [pc, #428]	; (80094a8 <xTaskIncrementTick+0x218>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6a3a      	ldr	r2, [r7, #32]
 8009300:	429a      	cmp	r2, r3
 8009302:	f0c0 80a7 	bcc.w	8009454 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009306:	4b65      	ldr	r3, [pc, #404]	; (800949c <xTaskIncrementTick+0x20c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009310:	4b65      	ldr	r3, [pc, #404]	; (80094a8 <xTaskIncrementTick+0x218>)
 8009312:	f04f 32ff 	mov.w	r2, #4294967295
 8009316:	601a      	str	r2, [r3, #0]
                    break;
 8009318:	e09c      	b.n	8009454 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931a:	4b60      	ldr	r3, [pc, #384]	; (800949c <xTaskIncrementTick+0x20c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800932a:	6a3a      	ldr	r2, [r7, #32]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	429a      	cmp	r2, r3
 8009330:	d203      	bcs.n	800933a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009332:	4a5d      	ldr	r2, [pc, #372]	; (80094a8 <xTaskIncrementTick+0x218>)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009338:	e08c      	b.n	8009454 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	613b      	str	r3, [r7, #16]
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	68d2      	ldr	r2, [r2, #12]
 8009348:	609a      	str	r2, [r3, #8]
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	6892      	ldr	r2, [r2, #8]
 8009352:	605a      	str	r2, [r3, #4]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	3304      	adds	r3, #4
 800935c:	429a      	cmp	r2, r3
 800935e:	d103      	bne.n	8009368 <xTaskIncrementTick+0xd8>
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	605a      	str	r2, [r3, #4]
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2200      	movs	r2, #0
 800936c:	615a      	str	r2, [r3, #20]
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	1e5a      	subs	r2, r3, #1
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01e      	beq.n	80093be <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	6a12      	ldr	r2, [r2, #32]
 800938e:	609a      	str	r2, [r3, #8]
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	69d2      	ldr	r2, [r2, #28]
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	3318      	adds	r3, #24
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d103      	bne.n	80093ae <xTaskIncrementTick+0x11e>
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	6a1a      	ldr	r2, [r3, #32]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	605a      	str	r2, [r3, #4]
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	2200      	movs	r2, #0
 80093b2:	629a      	str	r2, [r3, #40]	; 0x28
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	1e5a      	subs	r2, r3, #1
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c2:	4b3a      	ldr	r3, [pc, #232]	; (80094ac <xTaskIncrementTick+0x21c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d903      	bls.n	80093d2 <xTaskIncrementTick+0x142>
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	4a37      	ldr	r2, [pc, #220]	; (80094ac <xTaskIncrementTick+0x21c>)
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	4936      	ldr	r1, [pc, #216]	; (80094b0 <xTaskIncrementTick+0x220>)
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	3304      	adds	r3, #4
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60bb      	str	r3, [r7, #8]
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	609a      	str	r2, [r3, #8]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	60da      	str	r2, [r3, #12]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	3204      	adds	r2, #4
 80093fe:	605a      	str	r2, [r3, #4]
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	1d1a      	adds	r2, r3, #4
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	609a      	str	r2, [r3, #8]
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4a26      	ldr	r2, [pc, #152]	; (80094b0 <xTaskIncrementTick+0x220>)
 8009416:	441a      	add	r2, r3
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	615a      	str	r2, [r3, #20]
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009420:	4923      	ldr	r1, [pc, #140]	; (80094b0 <xTaskIncrementTick+0x220>)
 8009422:	4613      	mov	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	440b      	add	r3, r1
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	1c59      	adds	r1, r3, #1
 8009430:	481f      	ldr	r0, [pc, #124]	; (80094b0 <xTaskIncrementTick+0x220>)
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4403      	add	r3, r0
 800943c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009442:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <xTaskIncrementTick+0x224>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	429a      	cmp	r2, r3
 800944a:	f67f af5c 	bls.w	8009306 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800944e:	2301      	movs	r3, #1
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009452:	e758      	b.n	8009306 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009454:	4b17      	ldr	r3, [pc, #92]	; (80094b4 <xTaskIncrementTick+0x224>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945a:	4915      	ldr	r1, [pc, #84]	; (80094b0 <xTaskIncrementTick+0x220>)
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	440b      	add	r3, r1
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d901      	bls.n	8009470 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800946c:	2301      	movs	r3, #1
 800946e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8009470:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <xTaskIncrementTick+0x228>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d007      	beq.n	8009488 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8009478:	2301      	movs	r3, #1
 800947a:	627b      	str	r3, [r7, #36]	; 0x24
 800947c:	e004      	b.n	8009488 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800947e:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <xTaskIncrementTick+0x22c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	4a0d      	ldr	r2, [pc, #52]	; (80094bc <xTaskIncrementTick+0x22c>)
 8009486:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800948a:	4618      	mov	r0, r3
 800948c:	3728      	adds	r7, #40	; 0x28
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	200002e4 	.word	0x200002e4
 8009498:	200002c0 	.word	0x200002c0
 800949c:	20000274 	.word	0x20000274
 80094a0:	20000278 	.word	0x20000278
 80094a4:	200002d4 	.word	0x200002d4
 80094a8:	200002dc 	.word	0x200002dc
 80094ac:	200002c4 	.word	0x200002c4
 80094b0:	200001e8 	.word	0x200001e8
 80094b4:	200001e4 	.word	0x200001e4
 80094b8:	200002d0 	.word	0x200002d0
 80094bc:	200002cc 	.word	0x200002cc

080094c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094c6:	4b27      	ldr	r3, [pc, #156]	; (8009564 <vTaskSwitchContext+0xa4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80094ce:	4b26      	ldr	r3, [pc, #152]	; (8009568 <vTaskSwitchContext+0xa8>)
 80094d0:	2201      	movs	r2, #1
 80094d2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80094d4:	e041      	b.n	800955a <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 80094d6:	4b24      	ldr	r3, [pc, #144]	; (8009568 <vTaskSwitchContext+0xa8>)
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094dc:	4b23      	ldr	r3, [pc, #140]	; (800956c <vTaskSwitchContext+0xac>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	e010      	b.n	8009506 <vTaskSwitchContext+0x46>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <vTaskSwitchContext+0x40>
        __asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	607b      	str	r3, [r7, #4]
    }
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <vTaskSwitchContext+0x3e>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3b01      	subs	r3, #1
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	491a      	ldr	r1, [pc, #104]	; (8009570 <vTaskSwitchContext+0xb0>)
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0e4      	beq.n	80094e4 <vTaskSwitchContext+0x24>
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4a12      	ldr	r2, [pc, #72]	; (8009570 <vTaskSwitchContext+0xb0>)
 8009526:	4413      	add	r3, r2
 8009528:	60bb      	str	r3, [r7, #8]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	605a      	str	r2, [r3, #4]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	3308      	adds	r3, #8
 800953c:	429a      	cmp	r2, r3
 800953e:	d104      	bne.n	800954a <vTaskSwitchContext+0x8a>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	605a      	str	r2, [r3, #4]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	4a08      	ldr	r2, [pc, #32]	; (8009574 <vTaskSwitchContext+0xb4>)
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	4a05      	ldr	r2, [pc, #20]	; (800956c <vTaskSwitchContext+0xac>)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6013      	str	r3, [r2, #0]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	bc80      	pop	{r7}
 8009562:	4770      	bx	lr
 8009564:	200002e4 	.word	0x200002e4
 8009568:	200002d0 	.word	0x200002d0
 800956c:	200002c4 	.word	0x200002c4
 8009570:	200001e8 	.word	0x200001e8
 8009574:	200001e4 	.word	0x200001e4

08009578 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
    }
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800959e:	4b07      	ldr	r3, [pc, #28]	; (80095bc <vTaskPlaceOnEventList+0x44>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3318      	adds	r3, #24
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 ff08 	bl	800a3bc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095ac:	2101      	movs	r1, #1
 80095ae:	6838      	ldr	r0, [r7, #0]
 80095b0:	f000 fba2 	bl	8009cf8 <prvAddCurrentTaskToDelayedList>
}
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	200001e4 	.word	0x200001e4

080095c0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	613b      	str	r3, [r7, #16]
    }
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	4b16      	ldr	r3, [pc, #88]	; (8009648 <vTaskPlaceOnEventListRestricted+0x88>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	61da      	str	r2, [r3, #28]
 80095f6:	4b14      	ldr	r3, [pc, #80]	; (8009648 <vTaskPlaceOnEventListRestricted+0x88>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	6892      	ldr	r2, [r2, #8]
 80095fe:	621a      	str	r2, [r3, #32]
 8009600:	4b11      	ldr	r3, [pc, #68]	; (8009648 <vTaskPlaceOnEventListRestricted+0x88>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	3218      	adds	r2, #24
 800960a:	605a      	str	r2, [r3, #4]
 800960c:	4b0e      	ldr	r3, [pc, #56]	; (8009648 <vTaskPlaceOnEventListRestricted+0x88>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f103 0218 	add.w	r2, r3, #24
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	609a      	str	r2, [r3, #8]
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <vTaskPlaceOnEventListRestricted+0x88>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	629a      	str	r2, [r3, #40]	; 0x28
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8009630:	f04f 33ff 	mov.w	r3, #4294967295
 8009634:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	68b8      	ldr	r0, [r7, #8]
 800963a:	f000 fb5d 	bl	8009cf8 <prvAddCurrentTaskToDelayedList>
    }
 800963e:	bf00      	nop
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	200001e4 	.word	0x200001e4

0800964c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08a      	sub	sp, #40	; 0x28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10a      	bne.n	8009678 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	60fb      	str	r3, [r7, #12]
    }
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	6a3a      	ldr	r2, [r7, #32]
 8009684:	6a12      	ldr	r2, [r2, #32]
 8009686:	609a      	str	r2, [r3, #8]
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	6a3a      	ldr	r2, [r7, #32]
 800968e:	69d2      	ldr	r2, [r2, #28]
 8009690:	605a      	str	r2, [r3, #4]
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	3318      	adds	r3, #24
 800969a:	429a      	cmp	r2, r3
 800969c:	d103      	bne.n	80096a6 <xTaskRemoveFromEventList+0x5a>
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	6a1a      	ldr	r2, [r3, #32]
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	605a      	str	r2, [r3, #4]
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	2200      	movs	r2, #0
 80096aa:	629a      	str	r2, [r3, #40]	; 0x28
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	1e5a      	subs	r2, r3, #1
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096b6:	4b4b      	ldr	r3, [pc, #300]	; (80097e4 <xTaskRemoveFromEventList+0x198>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d161      	bne.n	8009782 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	6a3a      	ldr	r2, [r7, #32]
 80096ca:	68d2      	ldr	r2, [r2, #12]
 80096cc:	609a      	str	r2, [r3, #8]
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	6a3a      	ldr	r2, [r7, #32]
 80096d4:	6892      	ldr	r2, [r2, #8]
 80096d6:	605a      	str	r2, [r3, #4]
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	6a3b      	ldr	r3, [r7, #32]
 80096de:	3304      	adds	r3, #4
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d103      	bne.n	80096ec <xTaskRemoveFromEventList+0xa0>
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	605a      	str	r2, [r3, #4]
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	2200      	movs	r2, #0
 80096f0:	615a      	str	r2, [r3, #20]
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	1e5a      	subs	r2, r3, #1
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009700:	4b39      	ldr	r3, [pc, #228]	; (80097e8 <xTaskRemoveFromEventList+0x19c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	429a      	cmp	r2, r3
 8009706:	d903      	bls.n	8009710 <xTaskRemoveFromEventList+0xc4>
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	4a36      	ldr	r2, [pc, #216]	; (80097e8 <xTaskRemoveFromEventList+0x19c>)
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009714:	4935      	ldr	r1, [pc, #212]	; (80097ec <xTaskRemoveFromEventList+0x1a0>)
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3304      	adds	r3, #4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	613b      	str	r3, [r7, #16]
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	609a      	str	r2, [r3, #8]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	60da      	str	r2, [r3, #12]
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	6a3a      	ldr	r2, [r7, #32]
 800973a:	3204      	adds	r2, #4
 800973c:	605a      	str	r2, [r3, #4]
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	1d1a      	adds	r2, r3, #4
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	609a      	str	r2, [r3, #8]
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4a26      	ldr	r2, [pc, #152]	; (80097ec <xTaskRemoveFromEventList+0x1a0>)
 8009754:	441a      	add	r2, r3
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	615a      	str	r2, [r3, #20]
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975e:	4923      	ldr	r1, [pc, #140]	; (80097ec <xTaskRemoveFromEventList+0x1a0>)
 8009760:	4613      	mov	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	440b      	add	r3, r1
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	1c59      	adds	r1, r3, #1
 800976e:	481f      	ldr	r0, [pc, #124]	; (80097ec <xTaskRemoveFromEventList+0x1a0>)
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4403      	add	r3, r0
 800977a:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 800977c:	f000 f9ee 	bl	8009b5c <prvResetNextTaskUnblockTime>
 8009780:	e01b      	b.n	80097ba <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009782:	4b1b      	ldr	r3, [pc, #108]	; (80097f0 <xTaskRemoveFromEventList+0x1a4>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	61da      	str	r2, [r3, #28]
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	689a      	ldr	r2, [r3, #8]
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	621a      	str	r2, [r3, #32]
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	6a3a      	ldr	r2, [r7, #32]
 800979c:	3218      	adds	r2, #24
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	f103 0218 	add.w	r2, r3, #24
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	609a      	str	r2, [r3, #8]
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	4a10      	ldr	r2, [pc, #64]	; (80097f0 <xTaskRemoveFromEventList+0x1a4>)
 80097ae:	629a      	str	r2, [r3, #40]	; 0x28
 80097b0:	4b0f      	ldr	r3, [pc, #60]	; (80097f0 <xTaskRemoveFromEventList+0x1a4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3301      	adds	r3, #1
 80097b6:	4a0e      	ldr	r2, [pc, #56]	; (80097f0 <xTaskRemoveFromEventList+0x1a4>)
 80097b8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <xTaskRemoveFromEventList+0x1a8>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d905      	bls.n	80097d4 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80097c8:	2301      	movs	r3, #1
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <xTaskRemoveFromEventList+0x1ac>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	e001      	b.n	80097d8 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 80097d4:	2300      	movs	r3, #0
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3728      	adds	r7, #40	; 0x28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	200002e4 	.word	0x200002e4
 80097e8:	200002c4 	.word	0x200002c4
 80097ec:	200001e8 	.word	0x200001e8
 80097f0:	2000027c 	.word	0x2000027c
 80097f4:	200001e4 	.word	0x200001e4
 80097f8:	200002d0 	.word	0x200002d0

080097fc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <vTaskInternalSetTimeOutState+0x24>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <vTaskInternalSetTimeOutState+0x28>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	605a      	str	r2, [r3, #4]
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	bc80      	pop	{r7}
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	200002d4 	.word	0x200002d4
 8009824:	200002c0 	.word	0x200002c0

08009828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	613b      	str	r3, [r7, #16]
    }
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	60fb      	str	r3, [r7, #12]
    }
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800986a:	f000 fef9 	bl	800a660 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800986e:	4b1f      	ldr	r3, [pc, #124]	; (80098ec <xTaskCheckForTimeOut+0xc4>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009886:	d102      	bne.n	800988e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009888:	2300      	movs	r3, #0
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	e026      	b.n	80098dc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	4b17      	ldr	r3, [pc, #92]	; (80098f0 <xTaskCheckForTimeOut+0xc8>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d00a      	beq.n	80098b0 <xTaskCheckForTimeOut+0x88>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d305      	bcc.n	80098b0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	e015      	b.n	80098dc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d20b      	bcs.n	80098d2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff ff98 	bl	80097fc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80098cc:	2300      	movs	r3, #0
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	e004      	b.n	80098dc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80098d8:	2301      	movs	r3, #1
 80098da:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80098dc:	f000 fef0 	bl	800a6c0 <vPortExitCritical>

    return xReturn;
 80098e0:	69fb      	ldr	r3, [r7, #28]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3720      	adds	r7, #32
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	200002c0 	.word	0x200002c0
 80098f0:	200002d4 	.word	0x200002d4

080098f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80098f8:	4b03      	ldr	r3, [pc, #12]	; (8009908 <vTaskMissedYield+0x14>)
 80098fa:	2201      	movs	r2, #1
 80098fc:	601a      	str	r2, [r3, #0]
}
 80098fe:	bf00      	nop
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	200002d0 	.word	0x200002d0

0800990c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009914:	f000 f8b0 	bl	8009a78 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009918:	4b18      	ldr	r3, [pc, #96]	; (800997c <prvIdleTask+0x70>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d907      	bls.n	8009930 <prvIdleTask+0x24>
            {
                taskYIELD();
 8009920:	4b17      	ldr	r3, [pc, #92]	; (8009980 <prvIdleTask+0x74>)
 8009922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8009930:	f7ff fb0a 	bl	8008f48 <prvGetExpectedIdleTime>
 8009934:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d9eb      	bls.n	8009914 <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 800993c:	f7ff faf6 	bl	8008f2c <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009940:	4b10      	ldr	r3, [pc, #64]	; (8009984 <prvIdleTask+0x78>)
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	4b10      	ldr	r3, [pc, #64]	; (8009988 <prvIdleTask+0x7c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d20a      	bcs.n	8009962 <prvIdleTask+0x56>
        __asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	60bb      	str	r3, [r7, #8]
    }
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 8009962:	f7ff faf1 	bl	8008f48 <prvGetExpectedIdleTime>
 8009966:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d902      	bls.n	8009974 <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 ff14 	bl	800a79c <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 8009974:	f7ff fb1e 	bl	8008fb4 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 8009978:	e7cc      	b.n	8009914 <prvIdleTask+0x8>
 800997a:	bf00      	nop
 800997c:	200001e8 	.word	0x200001e8
 8009980:	e000ed04 	.word	0xe000ed04
 8009984:	200002dc 	.word	0x200002dc
 8009988:	200002c0 	.word	0x200002c0

0800998c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 8009992:	2301      	movs	r3, #1
 8009994:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 8009996:	2301      	movs	r3, #1
 8009998:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800999a:	4b12      	ldr	r3, [pc, #72]	; (80099e4 <eTaskConfirmSleepModeStatus+0x58>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80099a2:	2300      	movs	r3, #0
 80099a4:	71fb      	strb	r3, [r7, #7]
 80099a6:	e017      	b.n	80099d8 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 80099a8:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <eTaskConfirmSleepModeStatus+0x5c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80099b0:	2300      	movs	r3, #0
 80099b2:	71fb      	strb	r3, [r7, #7]
 80099b4:	e010      	b.n	80099d8 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 80099b6:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <eTaskConfirmSleepModeStatus+0x60>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 80099be:	2300      	movs	r3, #0
 80099c0:	71fb      	strb	r3, [r7, #7]
 80099c2:	e009      	b.n	80099d8 <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80099c4:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <eTaskConfirmSleepModeStatus+0x64>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	4b0a      	ldr	r3, [pc, #40]	; (80099f4 <eTaskConfirmSleepModeStatus+0x68>)
 80099ca:	6819      	ldr	r1, [r3, #0]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	1acb      	subs	r3, r1, r3
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d101      	bne.n	80099d8 <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 80099d4:	2302      	movs	r3, #2
 80099d6:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 80099d8:	79fb      	ldrb	r3, [r7, #7]
    }
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	bc80      	pop	{r7}
 80099e2:	4770      	bx	lr
 80099e4:	2000027c 	.word	0x2000027c
 80099e8:	200002d0 	.word	0x200002d0
 80099ec:	200002cc 	.word	0x200002cc
 80099f0:	200002a8 	.word	0x200002a8
 80099f4:	200002bc 	.word	0x200002bc

080099f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099fe:	2300      	movs	r3, #0
 8009a00:	607b      	str	r3, [r7, #4]
 8009a02:	e00c      	b.n	8009a1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4a12      	ldr	r2, [pc, #72]	; (8009a58 <prvInitialiseTaskLists+0x60>)
 8009a10:	4413      	add	r3, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fc84 	bl	800a320 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	607b      	str	r3, [r7, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d9ef      	bls.n	8009a04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009a24:	480d      	ldr	r0, [pc, #52]	; (8009a5c <prvInitialiseTaskLists+0x64>)
 8009a26:	f000 fc7b 	bl	800a320 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009a2a:	480d      	ldr	r0, [pc, #52]	; (8009a60 <prvInitialiseTaskLists+0x68>)
 8009a2c:	f000 fc78 	bl	800a320 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009a30:	480c      	ldr	r0, [pc, #48]	; (8009a64 <prvInitialiseTaskLists+0x6c>)
 8009a32:	f000 fc75 	bl	800a320 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8009a36:	480c      	ldr	r0, [pc, #48]	; (8009a68 <prvInitialiseTaskLists+0x70>)
 8009a38:	f000 fc72 	bl	800a320 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8009a3c:	480b      	ldr	r0, [pc, #44]	; (8009a6c <prvInitialiseTaskLists+0x74>)
 8009a3e:	f000 fc6f 	bl	800a320 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009a42:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <prvInitialiseTaskLists+0x78>)
 8009a44:	4a05      	ldr	r2, [pc, #20]	; (8009a5c <prvInitialiseTaskLists+0x64>)
 8009a46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <prvInitialiseTaskLists+0x7c>)
 8009a4a:	4a05      	ldr	r2, [pc, #20]	; (8009a60 <prvInitialiseTaskLists+0x68>)
 8009a4c:	601a      	str	r2, [r3, #0]
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	200001e8 	.word	0x200001e8
 8009a5c:	2000024c 	.word	0x2000024c
 8009a60:	20000260 	.word	0x20000260
 8009a64:	2000027c 	.word	0x2000027c
 8009a68:	20000290 	.word	0x20000290
 8009a6c:	200002a8 	.word	0x200002a8
 8009a70:	20000274 	.word	0x20000274
 8009a74:	20000278 	.word	0x20000278

08009a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a7e:	e019      	b.n	8009ab4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8009a80:	f000 fdee 	bl	800a660 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a84:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <prvCheckTasksWaitingTermination+0x50>)
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fccb 	bl	800a42c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8009a96:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <prvCheckTasksWaitingTermination+0x54>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	4a0b      	ldr	r2, [pc, #44]	; (8009acc <prvCheckTasksWaitingTermination+0x54>)
 8009a9e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <prvCheckTasksWaitingTermination+0x58>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	4a0a      	ldr	r2, [pc, #40]	; (8009ad0 <prvCheckTasksWaitingTermination+0x58>)
 8009aa8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8009aaa:	f000 fe09 	bl	800a6c0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f844 	bl	8009b3c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ab4:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <prvCheckTasksWaitingTermination+0x58>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e1      	bne.n	8009a80 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20000290 	.word	0x20000290
 8009acc:	200002bc 	.word	0x200002bc
 8009ad0:	200002a4 	.word	0x200002a4

08009ad4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009ae0:	e005      	b.n	8009aee <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	607b      	str	r3, [r7, #4]
            ulCount++;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3301      	adds	r3, #1
 8009aec:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2ba5      	cmp	r3, #165	; 0xa5
 8009af4:	d0f5      	beq.n	8009ae2 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	089b      	lsrs	r3, r3, #2
 8009afa:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009afc:	68fb      	ldr	r3, [r7, #12]
    }
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bc80      	pop	{r7}
 8009b06:	4770      	bx	lr

08009b08 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <uxTaskGetStackHighWaterMark+0x14>
 8009b16:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <uxTaskGetStackHighWaterMark+0x30>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	e000      	b.n	8009b1e <uxTaskGetStackHighWaterMark+0x16>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b24:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009b26:	6938      	ldr	r0, [r7, #16]
 8009b28:	f7ff ffd4 	bl	8009ad4 <prvTaskCheckFreeStackSpace>
 8009b2c:	60f8      	str	r0, [r7, #12]

        return uxReturn;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
    }
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	200001e4 	.word	0x200001e4

08009b3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 fbd7 	bl	800a2fc <vPortFree>
            vPortFree( pxTCB );
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fbd4 	bl	800a2fc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b60:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <prvResetNextTaskUnblockTime+0x2c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d104      	bne.n	8009b74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009b6a:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <prvResetNextTaskUnblockTime+0x30>)
 8009b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009b72:	e005      	b.n	8009b80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b74:	4b04      	ldr	r3, [pc, #16]	; (8009b88 <prvResetNextTaskUnblockTime+0x2c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a03      	ldr	r2, [pc, #12]	; (8009b8c <prvResetNextTaskUnblockTime+0x30>)
 8009b7e:	6013      	str	r3, [r2, #0]
}
 8009b80:	bf00      	nop
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bc80      	pop	{r7}
 8009b86:	4770      	bx	lr
 8009b88:	20000274 	.word	0x20000274
 8009b8c:	200002dc 	.word	0x200002dc

08009b90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009b96:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <xTaskGetSchedulerState+0x34>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d102      	bne.n	8009ba4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	607b      	str	r3, [r7, #4]
 8009ba2:	e008      	b.n	8009bb6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba4:	4b08      	ldr	r3, [pc, #32]	; (8009bc8 <xTaskGetSchedulerState+0x38>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009bac:	2302      	movs	r3, #2
 8009bae:	607b      	str	r3, [r7, #4]
 8009bb0:	e001      	b.n	8009bb6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009bb6:	687b      	ldr	r3, [r7, #4]
    }
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	200002c8 	.word	0x200002c8
 8009bc8:	200002e4 	.word	0x200002e4

08009bcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d07e      	beq.n	8009ce0 <xTaskPriorityDisinherit+0x114>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009be2:	4b42      	ldr	r3, [pc, #264]	; (8009cec <xTaskPriorityDisinherit+0x120>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d00a      	beq.n	8009c02 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	613b      	str	r3, [r7, #16]
    }
 8009bfe:	bf00      	nop
 8009c00:	e7fe      	b.n	8009c00 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	60fb      	str	r3, [r7, #12]
    }
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c24:	1e5a      	subs	r2, r3, #1
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d054      	beq.n	8009ce0 <xTaskPriorityDisinherit+0x114>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d150      	bne.n	8009ce0 <xTaskPriorityDisinherit+0x114>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fbf2 	bl	800a42c <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c54:	f1c3 0205 	rsb	r2, r3, #5
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	4b23      	ldr	r3, [pc, #140]	; (8009cf0 <xTaskPriorityDisinherit+0x124>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d903      	bls.n	8009c70 <xTaskPriorityDisinherit+0xa4>
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	4a20      	ldr	r2, [pc, #128]	; (8009cf0 <xTaskPriorityDisinherit+0x124>)
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	491f      	ldr	r1, [pc, #124]	; (8009cf4 <xTaskPriorityDisinherit+0x128>)
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	3304      	adds	r3, #4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	617b      	str	r3, [r7, #20]
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	609a      	str	r2, [r3, #8]
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	60da      	str	r2, [r3, #12]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	3204      	adds	r2, #4
 8009c9c:	605a      	str	r2, [r3, #4]
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	1d1a      	adds	r2, r3, #4
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	609a      	str	r2, [r3, #8]
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4a10      	ldr	r2, [pc, #64]	; (8009cf4 <xTaskPriorityDisinherit+0x128>)
 8009cb4:	441a      	add	r2, r3
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	615a      	str	r2, [r3, #20]
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbe:	490d      	ldr	r1, [pc, #52]	; (8009cf4 <xTaskPriorityDisinherit+0x128>)
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	440b      	add	r3, r1
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	1c59      	adds	r1, r3, #1
 8009cce:	4809      	ldr	r0, [pc, #36]	; (8009cf4 <xTaskPriorityDisinherit+0x128>)
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4403      	add	r3, r0
 8009cda:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009ce0:	69fb      	ldr	r3, [r7, #28]
    }
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	200001e4 	.word	0x200001e4
 8009cf0:	200002c4 	.word	0x200002c4
 8009cf4:	200001e8 	.word	0x200001e8

08009cf8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009d02:	4b2e      	ldr	r3, [pc, #184]	; (8009dbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d08:	4b2d      	ldr	r3, [pc, #180]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fb8c 	bl	800a42c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d124      	bne.n	8009d66 <prvAddCurrentTaskToDelayedList+0x6e>
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d021      	beq.n	8009d66 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d22:	4b28      	ldr	r3, [pc, #160]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	613b      	str	r3, [r7, #16]
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	609a      	str	r2, [r3, #8]
 8009d30:	4b23      	ldr	r3, [pc, #140]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	6892      	ldr	r2, [r2, #8]
 8009d38:	60da      	str	r2, [r3, #12]
 8009d3a:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	3204      	adds	r2, #4
 8009d44:	605a      	str	r2, [r3, #4]
 8009d46:	4b1e      	ldr	r3, [pc, #120]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	1d1a      	adds	r2, r3, #4
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	609a      	str	r2, [r3, #8]
 8009d50:	4b1b      	ldr	r3, [pc, #108]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a1b      	ldr	r2, [pc, #108]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009d56:	615a      	str	r2, [r3, #20]
 8009d58:	4b1a      	ldr	r3, [pc, #104]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	4a19      	ldr	r2, [pc, #100]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009d64:	e026      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d6e:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d209      	bcs.n	8009d92 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d7e:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <prvAddCurrentTaskToDelayedList+0xd0>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f000 fb16 	bl	800a3bc <vListInsert>
}
 8009d90:	e010      	b.n	8009db4 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d92:	4b0e      	ldr	r3, [pc, #56]	; (8009dcc <prvAddCurrentTaskToDelayedList+0xd4>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f000 fb0c 	bl	800a3bc <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8009da4:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d202      	bcs.n	8009db4 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8009dae:	4a08      	ldr	r2, [pc, #32]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6013      	str	r3, [r2, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	200002c0 	.word	0x200002c0
 8009dc0:	200001e4 	.word	0x200001e4
 8009dc4:	200002a8 	.word	0x200002a8
 8009dc8:	20000278 	.word	0x20000278
 8009dcc:	20000274 	.word	0x20000274
 8009dd0:	200002dc 	.word	0x200002dc

08009dd4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009dde:	f000 fa45 	bl	800a26c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009de2:	4b11      	ldr	r3, [pc, #68]	; (8009e28 <xTimerCreateTimerTask+0x54>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8009dea:	4b10      	ldr	r3, [pc, #64]	; (8009e2c <xTimerCreateTimerTask+0x58>)
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	2303      	movs	r3, #3
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	2300      	movs	r3, #0
 8009df4:	2280      	movs	r2, #128	; 0x80
 8009df6:	490e      	ldr	r1, [pc, #56]	; (8009e30 <xTimerCreateTimerTask+0x5c>)
 8009df8:	480e      	ldr	r0, [pc, #56]	; (8009e34 <xTimerCreateTimerTask+0x60>)
 8009dfa:	f7fe fd6d 	bl	80088d8 <xTaskCreate>
 8009dfe:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <xTimerCreateTimerTask+0x48>
        __asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	603b      	str	r3, [r7, #0]
    }
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <xTimerCreateTimerTask+0x46>
        return xReturn;
 8009e1c:	687b      	ldr	r3, [r7, #4]
    }
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20000318 	.word	0x20000318
 8009e2c:	2000031c 	.word	0x2000031c
 8009e30:	0800d2fc 	.word	0x0800d2fc
 8009e34:	08009edd 	.word	0x08009edd

08009e38 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009e44:	e008      	b.n	8009e58 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6a1b      	ldr	r3, [r3, #32]
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	699a      	ldr	r2, [r3, #24]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	18d1      	adds	r1, r2, r3
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f8db 	bl	800a020 <prvInsertTimerInActiveList>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1ea      	bne.n	8009e46 <prvReloadTimer+0xe>
        }
    }
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
	...

08009e7c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <prvProcessExpiredTimer+0x5c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 fac9 	bl	800a42c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7ff ffc3 	bl	8009e38 <prvReloadTimer>
 8009eb2:	e008      	b.n	8009ec6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eba:	f023 0301 	bic.w	r3, r3, #1
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	4798      	blx	r3
    }
 8009ece:	bf00      	nop
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20000310 	.word	0x20000310

08009edc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ee4:	f107 0308 	add.w	r3, r7, #8
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 f857 	bl	8009f9c <prvGetNextExpireTime>
 8009eee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 f803 	bl	8009f00 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8009efa:	f000 f8d3 	bl	800a0a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009efe:	e7f1      	b.n	8009ee4 <prvTimerTask+0x8>

08009f00 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8009f0a:	f7ff f80f 	bl	8008f2c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 f864 	bl	8009fe0 <prvSampleTimeNow>
 8009f18:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d130      	bne.n	8009f82 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10a      	bne.n	8009f3c <prvProcessTimerOrBlockTask+0x3c>
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d806      	bhi.n	8009f3c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009f2e:	f7ff f841 	bl	8008fb4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f32:	68f9      	ldr	r1, [r7, #12]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff ffa1 	bl	8009e7c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8009f3a:	e024      	b.n	8009f86 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f42:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <prvProcessTimerOrBlockTask+0x90>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <prvProcessTimerOrBlockTask+0x50>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e000      	b.n	8009f52 <prvProcessTimerOrBlockTask+0x52>
 8009f50:	2300      	movs	r3, #0
 8009f52:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f54:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <prvProcessTimerOrBlockTask+0x94>)
 8009f56:	6818      	ldr	r0, [r3, #0]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	4619      	mov	r1, r3
 8009f62:	f7fe fc85 	bl	8008870 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8009f66:	f7ff f825 	bl	8008fb4 <xTaskResumeAll>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10a      	bne.n	8009f86 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8009f70:	4b09      	ldr	r3, [pc, #36]	; (8009f98 <prvProcessTimerOrBlockTask+0x98>)
 8009f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	f3bf 8f6f 	isb	sy
    }
 8009f80:	e001      	b.n	8009f86 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8009f82:	f7ff f817 	bl	8008fb4 <xTaskResumeAll>
    }
 8009f86:	bf00      	nop
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000314 	.word	0x20000314
 8009f94:	20000318 	.word	0x20000318
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fa4:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <prvGetNextExpireTime+0x40>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <prvGetNextExpireTime+0x16>
 8009fae:	2201      	movs	r2, #1
 8009fb0:	e000      	b.n	8009fb4 <prvGetNextExpireTime+0x18>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d105      	bne.n	8009fcc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fc0:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <prvGetNextExpireTime+0x40>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	e001      	b.n	8009fd0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
    }
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bc80      	pop	{r7}
 8009fda:	4770      	bx	lr
 8009fdc:	20000310 	.word	0x20000310

08009fe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009fe8:	f7ff f8e0 	bl	80091ac <xTaskGetTickCount>
 8009fec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009fee:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <prvSampleTimeNow+0x3c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d205      	bcs.n	800a004 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009ff8:	f000 f912 	bl	800a220 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	e002      	b.n	800a00a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a00a:	4a04      	ldr	r2, [pc, #16]	; (800a01c <prvSampleTimeNow+0x3c>)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a010:	68fb      	ldr	r3, [r7, #12]
    }
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20000320 	.word	0x20000320

0800a020 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a02e:	2300      	movs	r3, #0
 800a030:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	429a      	cmp	r2, r3
 800a044:	d812      	bhi.n	800a06c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	1ad2      	subs	r2, r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	429a      	cmp	r2, r3
 800a052:	d302      	bcc.n	800a05a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	e01b      	b.n	800a092 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a05a:	4b10      	ldr	r3, [pc, #64]	; (800a09c <prvInsertTimerInActiveList+0x7c>)
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3304      	adds	r3, #4
 800a062:	4619      	mov	r1, r3
 800a064:	4610      	mov	r0, r2
 800a066:	f000 f9a9 	bl	800a3bc <vListInsert>
 800a06a:	e012      	b.n	800a092 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d206      	bcs.n	800a082 <prvInsertTimerInActiveList+0x62>
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d302      	bcc.n	800a082 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a07c:	2301      	movs	r3, #1
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	e007      	b.n	800a092 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a082:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <prvInsertTimerInActiveList+0x80>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3304      	adds	r3, #4
 800a08a:	4619      	mov	r1, r3
 800a08c:	4610      	mov	r0, r2
 800a08e:	f000 f995 	bl	800a3bc <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a092:	697b      	ldr	r3, [r7, #20]
    }
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20000314 	.word	0x20000314
 800a0a0:	20000310 	.word	0x20000310

0800a0a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0aa:	e0a6      	b.n	800a1fa <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f2c0 80a2 	blt.w	800a1f8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 f9b1 	bl	800a42c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ca:	1d3b      	adds	r3, r7, #4
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7ff ff87 	bl	8009fe0 <prvSampleTimeNow>
 800a0d2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	f200 808e 	bhi.w	800a1fa <prvProcessReceivedCommands+0x156>
 800a0de:	a201      	add	r2, pc, #4	; (adr r2, 800a0e4 <prvProcessReceivedCommands+0x40>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a109 	.word	0x0800a109
 800a0e8:	0800a109 	.word	0x0800a109
 800a0ec:	0800a171 	.word	0x0800a171
 800a0f0:	0800a185 	.word	0x0800a185
 800a0f4:	0800a1cf 	.word	0x0800a1cf
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a109 	.word	0x0800a109
 800a100:	0800a171 	.word	0x0800a171
 800a104:	0800a185 	.word	0x0800a185
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a10e:	f043 0301 	orr.w	r3, r3, #1
 800a112:	b2da      	uxtb	r2, r3
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	18d1      	adds	r1, r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	69ba      	ldr	r2, [r7, #24]
 800a126:	69f8      	ldr	r0, [r7, #28]
 800a128:	f7ff ff7a 	bl	800a020 <prvInsertTimerInActiveList>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d063      	beq.n	800a1fa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d009      	beq.n	800a154 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	4413      	add	r3, r2
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	4619      	mov	r1, r3
 800a14c:	69f8      	ldr	r0, [r7, #28]
 800a14e:	f7ff fe73 	bl	8009e38 <prvReloadTimer>
 800a152:	e008      	b.n	800a166 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	69f8      	ldr	r0, [r7, #28]
 800a16c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800a16e:	e044      	b.n	800a1fa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a176:	f023 0301 	bic.w	r3, r3, #1
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800a182:	e03a      	b.n	800a1fa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a18a:	f043 0301 	orr.w	r3, r3, #1
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10a      	bne.n	800a1ba <prvProcessReceivedCommands+0x116>
        __asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	617b      	str	r3, [r7, #20]
    }
 800a1b6:	bf00      	nop
 800a1b8:	e7fe      	b.n	800a1b8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	699a      	ldr	r2, [r3, #24]
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	18d1      	adds	r1, r2, r3
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	69f8      	ldr	r0, [r7, #28]
 800a1c8:	f7ff ff2a 	bl	800a020 <prvInsertTimerInActiveList>
                        break;
 800a1cc:	e015      	b.n	800a1fa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d103      	bne.n	800a1e4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800a1dc:	69f8      	ldr	r0, [r7, #28]
 800a1de:	f000 f88d 	bl	800a2fc <vPortFree>
 800a1e2:	e00a      	b.n	800a1fa <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ea:	f023 0301 	bic.w	r3, r3, #1
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a1f6:	e000      	b.n	800a1fa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800a1f8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1fa:	4b08      	ldr	r3, [pc, #32]	; (800a21c <prvProcessReceivedCommands+0x178>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f107 0108 	add.w	r1, r7, #8
 800a202:	2200      	movs	r2, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f7fe f8d7 	bl	80083b8 <xQueueReceive>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f47f af4d 	bne.w	800a0ac <prvProcessReceivedCommands+0x8>
        }
    }
 800a212:	bf00      	nop
 800a214:	bf00      	nop
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000318 	.word	0x20000318

0800a220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a226:	e009      	b.n	800a23c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a228:	4b0e      	ldr	r3, [pc, #56]	; (800a264 <prvSwitchTimerLists+0x44>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a232:	f04f 31ff 	mov.w	r1, #4294967295
 800a236:	6838      	ldr	r0, [r7, #0]
 800a238:	f7ff fe20 	bl	8009e7c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <prvSwitchTimerLists+0x44>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1f0      	bne.n	800a228 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <prvSwitchTimerLists+0x44>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a24c:	4b06      	ldr	r3, [pc, #24]	; (800a268 <prvSwitchTimerLists+0x48>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a04      	ldr	r2, [pc, #16]	; (800a264 <prvSwitchTimerLists+0x44>)
 800a252:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a254:	4a04      	ldr	r2, [pc, #16]	; (800a268 <prvSwitchTimerLists+0x48>)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6013      	str	r3, [r2, #0]
    }
 800a25a:	bf00      	nop
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000310 	.word	0x20000310
 800a268:	20000314 	.word	0x20000314

0800a26c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a270:	f000 f9f6 	bl	800a660 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a274:	4b12      	ldr	r3, [pc, #72]	; (800a2c0 <prvCheckForValidListAndQueue+0x54>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d11d      	bne.n	800a2b8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a27c:	4811      	ldr	r0, [pc, #68]	; (800a2c4 <prvCheckForValidListAndQueue+0x58>)
 800a27e:	f000 f84f 	bl	800a320 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a282:	4811      	ldr	r0, [pc, #68]	; (800a2c8 <prvCheckForValidListAndQueue+0x5c>)
 800a284:	f000 f84c 	bl	800a320 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a288:	4b10      	ldr	r3, [pc, #64]	; (800a2cc <prvCheckForValidListAndQueue+0x60>)
 800a28a:	4a0e      	ldr	r2, [pc, #56]	; (800a2c4 <prvCheckForValidListAndQueue+0x58>)
 800a28c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a28e:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <prvCheckForValidListAndQueue+0x64>)
 800a290:	4a0d      	ldr	r2, [pc, #52]	; (800a2c8 <prvCheckForValidListAndQueue+0x5c>)
 800a292:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a294:	2200      	movs	r2, #0
 800a296:	210c      	movs	r1, #12
 800a298:	200a      	movs	r0, #10
 800a29a:	f7fd fe6b 	bl	8007f74 <xQueueGenericCreate>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <prvCheckForValidListAndQueue+0x54>)
 800a2a2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800a2a4:	4b06      	ldr	r3, [pc, #24]	; (800a2c0 <prvCheckForValidListAndQueue+0x54>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2ac:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <prvCheckForValidListAndQueue+0x54>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4908      	ldr	r1, [pc, #32]	; (800a2d4 <prvCheckForValidListAndQueue+0x68>)
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fa8e 	bl	80087d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a2b8:	f000 fa02 	bl	800a6c0 <vPortExitCritical>
    }
 800a2bc:	bf00      	nop
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20000318 	.word	0x20000318
 800a2c4:	200002e8 	.word	0x200002e8
 800a2c8:	200002fc 	.word	0x200002fc
 800a2cc:	20000310 	.word	0x20000310
 800a2d0:	20000314 	.word	0x20000314
 800a2d4:	0800d304 	.word	0x0800d304

0800a2d8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800a2e0:	f7fe fe24 	bl	8008f2c <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fbcb 	bl	800aa80 <malloc>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800a2ee:	f7fe fe61 	bl	8008fb4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d006      	beq.n	800a318 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800a30a:	f7fe fe0f 	bl	8008f2c <vTaskSuspendAll>
        {
            free( pv );
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fbbe 	bl	800aa90 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 800a314:	f7fe fe4e 	bl	8008fb4 <xTaskResumeAll>
    }
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f103 0208 	add.w	r2, r3, #8
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f04f 32ff 	mov.w	r2, #4294967295
 800a338:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f103 0208 	add.w	r2, r3, #8
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f103 0208 	add.w	r2, r3, #8
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	bc80      	pop	{r7}
 800a35c:	4770      	bx	lr

0800a35e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	bc80      	pop	{r7}
 800a374:	4770      	bx	lr

0800a376 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800a376:	b480      	push	{r7}
 800a378:	b085      	sub	sp, #20
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	601a      	str	r2, [r3, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bc80      	pop	{r7}
 800a3ba:	4770      	bx	lr

0800a3bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d2:	d103      	bne.n	800a3dc <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	e00c      	b.n	800a3f6 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3308      	adds	r3, #8
 800a3e0:	60fb      	str	r3, [r7, #12]
 800a3e2:	e002      	b.n	800a3ea <vListInsert+0x2e>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	60fb      	str	r3, [r7, #12]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d2f6      	bcs.n	800a3e4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	601a      	str	r2, [r3, #0]
}
 800a422:	bf00      	nop
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	bc80      	pop	{r7}
 800a42a:	4770      	bx	lr

0800a42c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6892      	ldr	r2, [r2, #8]
 800a442:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	6852      	ldr	r2, [r2, #4]
 800a44c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d103      	bne.n	800a460 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	1e5a      	subs	r2, r3, #1
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr
	...

0800a480 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	3b04      	subs	r3, #4
 800a490:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a498:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3b04      	subs	r3, #4
 800a49e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f023 0201 	bic.w	r2, r3, #1
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3b04      	subs	r3, #4
 800a4ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a4b0:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <pxPortInitialiseStack+0x54>)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3b14      	subs	r3, #20
 800a4ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3b20      	subs	r3, #32
 800a4c6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bc80      	pop	{r7}
 800a4d2:	4770      	bx	lr
 800a4d4:	0800a4d9 	.word	0x0800a4d9

0800a4d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <prvTaskExitError+0x54>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ea:	d00a      	beq.n	800a502 <prvTaskExitError+0x2a>
        __asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	60fb      	str	r3, [r7, #12]
    }
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <prvTaskExitError+0x28>
        __asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	60bb      	str	r3, [r7, #8]
    }
 800a514:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a516:	bf00      	nop
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0fc      	beq.n	800a518 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	bc80      	pop	{r7}
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	20000020 	.word	0x20000020

0800a530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <pxCurrentTCBConst2>)
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	6808      	ldr	r0, [r1, #0]
 800a536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a53a:	f380 8809 	msr	PSP, r0
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a54e:	4770      	bx	lr

0800a550 <pxCurrentTCBConst2>:
 800a550:	200001e4 	.word	0x200001e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 800a558:	4806      	ldr	r0, [pc, #24]	; (800a574 <prvPortStartFirstTask+0x1c>)
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	6800      	ldr	r0, [r0, #0]
 800a55e:	f380 8808 	msr	MSP, r0
 800a562:	b662      	cpsie	i
 800a564:	b661      	cpsie	f
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	df00      	svc	0
 800a570:	bf00      	nop
 800a572:	0000      	.short	0x0000
 800a574:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800a578:	bf00      	nop
 800a57a:	bf00      	nop

0800a57c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a582:	4b32      	ldr	r3, [pc, #200]	; (800a64c <xPortStartScheduler+0xd0>)
 800a584:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	22ff      	movs	r2, #255	; 0xff
 800a592:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	4b2a      	ldr	r3, [pc, #168]	; (800a650 <xPortStartScheduler+0xd4>)
 800a5a8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5aa:	4b2a      	ldr	r3, [pc, #168]	; (800a654 <xPortStartScheduler+0xd8>)
 800a5ac:	2207      	movs	r2, #7
 800a5ae:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5b0:	e009      	b.n	800a5c6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 800a5b2:	4b28      	ldr	r3, [pc, #160]	; (800a654 <xPortStartScheduler+0xd8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	4a26      	ldr	r2, [pc, #152]	; (800a654 <xPortStartScheduler+0xd8>)
 800a5ba:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5c6:	78fb      	ldrb	r3, [r7, #3]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ce:	2b80      	cmp	r3, #128	; 0x80
 800a5d0:	d0ef      	beq.n	800a5b2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5d2:	4b20      	ldr	r3, [pc, #128]	; (800a654 <xPortStartScheduler+0xd8>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f1c3 0307 	rsb	r3, r3, #7
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d00a      	beq.n	800a5f4 <xPortStartScheduler+0x78>
        __asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60bb      	str	r3, [r7, #8]
    }
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5f4:	4b17      	ldr	r3, [pc, #92]	; (800a654 <xPortStartScheduler+0xd8>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	4a16      	ldr	r2, [pc, #88]	; (800a654 <xPortStartScheduler+0xd8>)
 800a5fc:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5fe:	4b15      	ldr	r3, [pc, #84]	; (800a654 <xPortStartScheduler+0xd8>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a606:	4a13      	ldr	r2, [pc, #76]	; (800a654 <xPortStartScheduler+0xd8>)
 800a608:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a612:	4b11      	ldr	r3, [pc, #68]	; (800a658 <xPortStartScheduler+0xdc>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a10      	ldr	r2, [pc, #64]	; (800a658 <xPortStartScheduler+0xdc>)
 800a618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a61c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a61e:	4b0e      	ldr	r3, [pc, #56]	; (800a658 <xPortStartScheduler+0xdc>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a0d      	ldr	r2, [pc, #52]	; (800a658 <xPortStartScheduler+0xdc>)
 800a624:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a628:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a62a:	f000 f981 	bl	800a930 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <xPortStartScheduler+0xe0>)
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800a634:	f7ff ff90 	bl	800a558 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a638:	f7fe ff42 	bl	80094c0 <vTaskSwitchContext>
    prvTaskExitError();
 800a63c:	f7ff ff4c 	bl	800a4d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	e000e400 	.word	0xe000e400
 800a650:	20000330 	.word	0x20000330
 800a654:	20000334 	.word	0x20000334
 800a658:	e000ed20 	.word	0xe000ed20
 800a65c:	20000020 	.word	0x20000020

0800a660 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
        __asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	607b      	str	r3, [r7, #4]
    }
 800a678:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800a67a:	4b0f      	ldr	r3, [pc, #60]	; (800a6b8 <vPortEnterCritical+0x58>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3301      	adds	r3, #1
 800a680:	4a0d      	ldr	r2, [pc, #52]	; (800a6b8 <vPortEnterCritical+0x58>)
 800a682:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800a684:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <vPortEnterCritical+0x58>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d10f      	bne.n	800a6ac <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a68c:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <vPortEnterCritical+0x5c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <vPortEnterCritical+0x4c>
        __asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	603b      	str	r3, [r7, #0]
    }
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <vPortEnterCritical+0x4a>
    }
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bc80      	pop	{r7}
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	20000020 	.word	0x20000020
 800a6bc:	e000ed04 	.word	0xe000ed04

0800a6c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800a6c6:	4b11      	ldr	r3, [pc, #68]	; (800a70c <vPortExitCritical+0x4c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <vPortExitCritical+0x24>
        __asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
    }
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800a6e4:	4b09      	ldr	r3, [pc, #36]	; (800a70c <vPortExitCritical+0x4c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	4a08      	ldr	r2, [pc, #32]	; (800a70c <vPortExitCritical+0x4c>)
 800a6ec:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800a6ee:	4b07      	ldr	r3, [pc, #28]	; (800a70c <vPortExitCritical+0x4c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <vPortExitCritical+0x42>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	f383 8811 	msr	BASEPRI, r3
    }
 800a700:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	bc80      	pop	{r7}
 800a70a:	4770      	bx	lr
 800a70c:	20000020 	.word	0x20000020

0800a710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800a710:	f3ef 8009 	mrs	r0, PSP
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	4b0d      	ldr	r3, [pc, #52]	; (800a750 <pxCurrentTCBConst>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a720:	6010      	str	r0, [r2, #0]
 800a722:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a726:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a72a:	f380 8811 	msr	BASEPRI, r0
 800a72e:	f7fe fec7 	bl	80094c0 <vTaskSwitchContext>
 800a732:	f04f 0000 	mov.w	r0, #0
 800a736:	f380 8811 	msr	BASEPRI, r0
 800a73a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a73e:	6819      	ldr	r1, [r3, #0]
 800a740:	6808      	ldr	r0, [r1, #0]
 800a742:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a746:	f380 8809 	msr	PSP, r0
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	4770      	bx	lr

0800a750 <pxCurrentTCBConst>:
 800a750:	200001e4 	.word	0x200001e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop

0800a758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
        __asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	607b      	str	r3, [r7, #4]
    }
 800a770:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a772:	f7fe fd8d 	bl	8009290 <xTaskIncrementTick>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a77c:	4b06      	ldr	r3, [pc, #24]	; (800a798 <SysTick_Handler+0x40>)
 800a77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	2300      	movs	r3, #0
 800a786:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f383 8811 	msr	BASEPRI, r3
    }
 800a78e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	e000ed04 	.word	0xe000ed04

0800a79c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800a7a4:	4b5b      	ldr	r3, [pc, #364]	; (800a914 <vPortSuppressTicksAndSleep+0x178>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d902      	bls.n	800a7b4 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800a7ae:	4b59      	ldr	r3, [pc, #356]	; (800a914 <vPortSuppressTicksAndSleep+0x178>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 800a7b4:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 800a7b6:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 800a7ba:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800a7be:	f7ff f8e5 	bl	800998c <eTaskConfirmSleepModeStatus>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 800a7c8:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 800a7ca:	e09e      	b.n	800a90a <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 800a7cc:	4b52      	ldr	r3, [pc, #328]	; (800a918 <vPortSuppressTicksAndSleep+0x17c>)
 800a7ce:	2206      	movs	r2, #6
 800a7d0:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a7d2:	4b52      	ldr	r3, [pc, #328]	; (800a91c <vPortSuppressTicksAndSleep+0x180>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d102      	bne.n	800a7e4 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 800a7de:	4b50      	ldr	r3, [pc, #320]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	4a4d      	ldr	r2, [pc, #308]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a7ea:	6812      	ldr	r2, [r2, #0]
 800a7ec:	fb02 f303 	mul.w	r3, r2, r3
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 800a7f6:	4b4b      	ldr	r3, [pc, #300]	; (800a924 <vPortSuppressTicksAndSleep+0x188>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d008      	beq.n	800a814 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 800a802:	4b48      	ldr	r3, [pc, #288]	; (800a924 <vPortSuppressTicksAndSleep+0x188>)
 800a804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a808:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 800a80a:	4b45      	ldr	r3, [pc, #276]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69fa      	ldr	r2, [r7, #28]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 800a814:	4b44      	ldr	r3, [pc, #272]	; (800a928 <vPortSuppressTicksAndSleep+0x18c>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d904      	bls.n	800a828 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 800a81e:	4b42      	ldr	r3, [pc, #264]	; (800a928 <vPortSuppressTicksAndSleep+0x18c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69fa      	ldr	r2, [r7, #28]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800a828:	4a40      	ldr	r2, [pc, #256]	; (800a92c <vPortSuppressTicksAndSleep+0x190>)
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a82e:	4b3b      	ldr	r3, [pc, #236]	; (800a91c <vPortSuppressTicksAndSleep+0x180>)
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a834:	4b38      	ldr	r3, [pc, #224]	; (800a918 <vPortSuppressTicksAndSleep+0x17c>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a37      	ldr	r2, [pc, #220]	; (800a918 <vPortSuppressTicksAndSleep+0x17c>)
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d004      	beq.n	800a854 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 800a84a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 800a84e:	bf30      	wfi
                __asm volatile ( "isb" );
 800a850:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 800a854:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 800a856:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800a85a:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 800a85e:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 800a860:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800a864:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 800a868:	4b2b      	ldr	r3, [pc, #172]	; (800a918 <vPortSuppressTicksAndSleep+0x17c>)
 800a86a:	2206      	movs	r2, #6
 800a86c:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800a86e:	4b2a      	ldr	r3, [pc, #168]	; (800a918 <vPortSuppressTicksAndSleep+0x17c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d01d      	beq.n	800a8b6 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800a87a:	4b29      	ldr	r3, [pc, #164]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	4b27      	ldr	r3, [pc, #156]	; (800a91c <vPortSuppressTicksAndSleep+0x180>)
 800a880:	6819      	ldr	r1, [r3, #0]
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	1acb      	subs	r3, r1, r3
 800a886:	4413      	add	r3, r2
 800a888:	3b01      	subs	r3, #1
 800a88a:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800a88c:	4b26      	ldr	r3, [pc, #152]	; (800a928 <vPortSuppressTicksAndSleep+0x18c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	429a      	cmp	r2, r3
 800a894:	d904      	bls.n	800a8a0 <vPortSuppressTicksAndSleep+0x104>
 800a896:	4b22      	ldr	r3, [pc, #136]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d903      	bls.n	800a8a8 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800a8a0:	4b1f      	ldr	r3, [pc, #124]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800a8a8:	4a20      	ldr	r2, [pc, #128]	; (800a92c <vPortSuppressTicksAndSleep+0x190>)
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	61bb      	str	r3, [r7, #24]
 800a8b4:	e01a      	b.n	800a8ec <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a8b6:	4b19      	ldr	r3, [pc, #100]	; (800a91c <vPortSuppressTicksAndSleep+0x180>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 800a8bc:	4b18      	ldr	r3, [pc, #96]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	fb02 f203 	mul.w	r2, r2, r3
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800a8cc:	4b14      	ldr	r3, [pc, #80]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d6:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	4a10      	ldr	r2, [pc, #64]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a8de:	6812      	ldr	r2, [r2, #0]
 800a8e0:	fb02 f203 	mul.w	r2, r2, r3
 800a8e4:	4911      	ldr	r1, [pc, #68]	; (800a92c <vPortSuppressTicksAndSleep+0x190>)
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8ec:	4b0b      	ldr	r3, [pc, #44]	; (800a91c <vPortSuppressTicksAndSleep+0x180>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a8f2:	4b09      	ldr	r3, [pc, #36]	; (800a918 <vPortSuppressTicksAndSleep+0x17c>)
 800a8f4:	2207      	movs	r2, #7
 800a8f6:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a8f8:	4b09      	ldr	r3, [pc, #36]	; (800a920 <vPortSuppressTicksAndSleep+0x184>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a0b      	ldr	r2, [pc, #44]	; (800a92c <vPortSuppressTicksAndSleep+0x190>)
 800a8fe:	3b01      	subs	r3, #1
 800a900:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 800a902:	69b8      	ldr	r0, [r7, #24]
 800a904:	f7fe fc6a 	bl	80091dc <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 800a908:	b662      	cpsie	i
    }
 800a90a:	bf00      	nop
 800a90c:	3720      	adds	r7, #32
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20000328 	.word	0x20000328
 800a918:	e000e010 	.word	0xe000e010
 800a91c:	e000e018 	.word	0xe000e018
 800a920:	20000324 	.word	0x20000324
 800a924:	e000ed04 	.word	0xe000ed04
 800a928:	2000032c 	.word	0x2000032c
 800a92c:	e000e014 	.word	0xe000e014

0800a930 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800a934:	4b14      	ldr	r3, [pc, #80]	; (800a988 <vPortSetupTimerInterrupt+0x58>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a14      	ldr	r2, [pc, #80]	; (800a98c <vPortSetupTimerInterrupt+0x5c>)
 800a93a:	fba2 2303 	umull	r2, r3, r2, r3
 800a93e:	099b      	lsrs	r3, r3, #6
 800a940:	4a13      	ldr	r2, [pc, #76]	; (800a990 <vPortSetupTimerInterrupt+0x60>)
 800a942:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800a944:	4b12      	ldr	r3, [pc, #72]	; (800a990 <vPortSetupTimerInterrupt+0x60>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800a94c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a950:	4a10      	ldr	r2, [pc, #64]	; (800a994 <vPortSetupTimerInterrupt+0x64>)
 800a952:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800a954:	4b10      	ldr	r3, [pc, #64]	; (800a998 <vPortSetupTimerInterrupt+0x68>)
 800a956:	225e      	movs	r2, #94	; 0x5e
 800a958:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <vPortSetupTimerInterrupt+0x6c>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a960:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <vPortSetupTimerInterrupt+0x70>)
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a966:	4b08      	ldr	r3, [pc, #32]	; (800a988 <vPortSetupTimerInterrupt+0x58>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a08      	ldr	r2, [pc, #32]	; (800a98c <vPortSetupTimerInterrupt+0x5c>)
 800a96c:	fba2 2303 	umull	r2, r3, r2, r3
 800a970:	099b      	lsrs	r3, r3, #6
 800a972:	4a0c      	ldr	r2, [pc, #48]	; (800a9a4 <vPortSetupTimerInterrupt+0x74>)
 800a974:	3b01      	subs	r3, #1
 800a976:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a978:	4b08      	ldr	r3, [pc, #32]	; (800a99c <vPortSetupTimerInterrupt+0x6c>)
 800a97a:	2207      	movs	r2, #7
 800a97c:	601a      	str	r2, [r3, #0]
}
 800a97e:	bf00      	nop
 800a980:	46bd      	mov	sp, r7
 800a982:	bc80      	pop	{r7}
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20000010 	.word	0x20000010
 800a98c:	10624dd3 	.word	0x10624dd3
 800a990:	20000324 	.word	0x20000324
 800a994:	20000328 	.word	0x20000328
 800a998:	2000032c 	.word	0x2000032c
 800a99c:	e000e010 	.word	0xe000e010
 800a9a0:	e000e018 	.word	0xe000e018
 800a9a4:	e000e014 	.word	0xe000e014

0800a9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800a9ae:	f3ef 8305 	mrs	r3, IPSR
 800a9b2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b0f      	cmp	r3, #15
 800a9b8:	d914      	bls.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ba:	4a16      	ldr	r2, [pc, #88]	; (800aa14 <vPortValidateInterruptPriority+0x6c>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9c4:	4b14      	ldr	r3, [pc, #80]	; (800aa18 <vPortValidateInterruptPriority+0x70>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	7afa      	ldrb	r2, [r7, #11]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d20a      	bcs.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	607b      	str	r3, [r7, #4]
    }
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9e4:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <vPortValidateInterruptPriority+0x74>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9ec:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <vPortValidateInterruptPriority+0x78>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d90a      	bls.n	800aa0a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	603b      	str	r3, [r7, #0]
    }
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <vPortValidateInterruptPriority+0x60>
    }
 800aa0a:	bf00      	nop
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bc80      	pop	{r7}
 800aa12:	4770      	bx	lr
 800aa14:	e000e3f0 	.word	0xe000e3f0
 800aa18:	20000330 	.word	0x20000330
 800aa1c:	e000ed0c 	.word	0xe000ed0c
 800aa20:	20000334 	.word	0x20000334

0800aa24 <atoi>:
 800aa24:	220a      	movs	r2, #10
 800aa26:	2100      	movs	r1, #0
 800aa28:	f000 ba66 	b.w	800aef8 <strtol>

0800aa2c <__errno>:
 800aa2c:	4b01      	ldr	r3, [pc, #4]	; (800aa34 <__errno+0x8>)
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20000024 	.word	0x20000024

0800aa38 <__libc_init_array>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	2600      	movs	r6, #0
 800aa3c:	4d0c      	ldr	r5, [pc, #48]	; (800aa70 <__libc_init_array+0x38>)
 800aa3e:	4c0d      	ldr	r4, [pc, #52]	; (800aa74 <__libc_init_array+0x3c>)
 800aa40:	1b64      	subs	r4, r4, r5
 800aa42:	10a4      	asrs	r4, r4, #2
 800aa44:	42a6      	cmp	r6, r4
 800aa46:	d109      	bne.n	800aa5c <__libc_init_array+0x24>
 800aa48:	f002 faa0 	bl	800cf8c <_init>
 800aa4c:	2600      	movs	r6, #0
 800aa4e:	4d0a      	ldr	r5, [pc, #40]	; (800aa78 <__libc_init_array+0x40>)
 800aa50:	4c0a      	ldr	r4, [pc, #40]	; (800aa7c <__libc_init_array+0x44>)
 800aa52:	1b64      	subs	r4, r4, r5
 800aa54:	10a4      	asrs	r4, r4, #2
 800aa56:	42a6      	cmp	r6, r4
 800aa58:	d105      	bne.n	800aa66 <__libc_init_array+0x2e>
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa60:	4798      	blx	r3
 800aa62:	3601      	adds	r6, #1
 800aa64:	e7ee      	b.n	800aa44 <__libc_init_array+0xc>
 800aa66:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa6a:	4798      	blx	r3
 800aa6c:	3601      	adds	r6, #1
 800aa6e:	e7f2      	b.n	800aa56 <__libc_init_array+0x1e>
 800aa70:	0800d5c8 	.word	0x0800d5c8
 800aa74:	0800d5c8 	.word	0x0800d5c8
 800aa78:	0800d5c8 	.word	0x0800d5c8
 800aa7c:	0800d5cc 	.word	0x0800d5cc

0800aa80 <malloc>:
 800aa80:	4b02      	ldr	r3, [pc, #8]	; (800aa8c <malloc+0xc>)
 800aa82:	4601      	mov	r1, r0
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	f000 b86d 	b.w	800ab64 <_malloc_r>
 800aa8a:	bf00      	nop
 800aa8c:	20000024 	.word	0x20000024

0800aa90 <free>:
 800aa90:	4b02      	ldr	r3, [pc, #8]	; (800aa9c <free+0xc>)
 800aa92:	4601      	mov	r1, r0
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	f000 b819 	b.w	800aacc <_free_r>
 800aa9a:	bf00      	nop
 800aa9c:	20000024 	.word	0x20000024

0800aaa0 <memcpy>:
 800aaa0:	440a      	add	r2, r1
 800aaa2:	4291      	cmp	r1, r2
 800aaa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaa8:	d100      	bne.n	800aaac <memcpy+0xc>
 800aaaa:	4770      	bx	lr
 800aaac:	b510      	push	{r4, lr}
 800aaae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aab2:	4291      	cmp	r1, r2
 800aab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aab8:	d1f9      	bne.n	800aaae <memcpy+0xe>
 800aaba:	bd10      	pop	{r4, pc}

0800aabc <memset>:
 800aabc:	4603      	mov	r3, r0
 800aabe:	4402      	add	r2, r0
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d100      	bne.n	800aac6 <memset+0xa>
 800aac4:	4770      	bx	lr
 800aac6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaca:	e7f9      	b.n	800aac0 <memset+0x4>

0800aacc <_free_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4605      	mov	r5, r0
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d043      	beq.n	800ab5c <_free_r+0x90>
 800aad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad8:	1f0c      	subs	r4, r1, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bfb8      	it	lt
 800aade:	18e4      	addlt	r4, r4, r3
 800aae0:	f000 fa44 	bl	800af6c <__malloc_lock>
 800aae4:	4a1e      	ldr	r2, [pc, #120]	; (800ab60 <_free_r+0x94>)
 800aae6:	6813      	ldr	r3, [r2, #0]
 800aae8:	4610      	mov	r0, r2
 800aaea:	b933      	cbnz	r3, 800aafa <_free_r+0x2e>
 800aaec:	6063      	str	r3, [r4, #4]
 800aaee:	6014      	str	r4, [r2, #0]
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaf6:	f000 ba3f 	b.w	800af78 <__malloc_unlock>
 800aafa:	42a3      	cmp	r3, r4
 800aafc:	d90a      	bls.n	800ab14 <_free_r+0x48>
 800aafe:	6821      	ldr	r1, [r4, #0]
 800ab00:	1862      	adds	r2, r4, r1
 800ab02:	4293      	cmp	r3, r2
 800ab04:	bf01      	itttt	eq
 800ab06:	681a      	ldreq	r2, [r3, #0]
 800ab08:	685b      	ldreq	r3, [r3, #4]
 800ab0a:	1852      	addeq	r2, r2, r1
 800ab0c:	6022      	streq	r2, [r4, #0]
 800ab0e:	6063      	str	r3, [r4, #4]
 800ab10:	6004      	str	r4, [r0, #0]
 800ab12:	e7ed      	b.n	800aaf0 <_free_r+0x24>
 800ab14:	461a      	mov	r2, r3
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	b10b      	cbz	r3, 800ab1e <_free_r+0x52>
 800ab1a:	42a3      	cmp	r3, r4
 800ab1c:	d9fa      	bls.n	800ab14 <_free_r+0x48>
 800ab1e:	6811      	ldr	r1, [r2, #0]
 800ab20:	1850      	adds	r0, r2, r1
 800ab22:	42a0      	cmp	r0, r4
 800ab24:	d10b      	bne.n	800ab3e <_free_r+0x72>
 800ab26:	6820      	ldr	r0, [r4, #0]
 800ab28:	4401      	add	r1, r0
 800ab2a:	1850      	adds	r0, r2, r1
 800ab2c:	4283      	cmp	r3, r0
 800ab2e:	6011      	str	r1, [r2, #0]
 800ab30:	d1de      	bne.n	800aaf0 <_free_r+0x24>
 800ab32:	6818      	ldr	r0, [r3, #0]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	4401      	add	r1, r0
 800ab38:	6011      	str	r1, [r2, #0]
 800ab3a:	6053      	str	r3, [r2, #4]
 800ab3c:	e7d8      	b.n	800aaf0 <_free_r+0x24>
 800ab3e:	d902      	bls.n	800ab46 <_free_r+0x7a>
 800ab40:	230c      	movs	r3, #12
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	e7d4      	b.n	800aaf0 <_free_r+0x24>
 800ab46:	6820      	ldr	r0, [r4, #0]
 800ab48:	1821      	adds	r1, r4, r0
 800ab4a:	428b      	cmp	r3, r1
 800ab4c:	bf01      	itttt	eq
 800ab4e:	6819      	ldreq	r1, [r3, #0]
 800ab50:	685b      	ldreq	r3, [r3, #4]
 800ab52:	1809      	addeq	r1, r1, r0
 800ab54:	6021      	streq	r1, [r4, #0]
 800ab56:	6063      	str	r3, [r4, #4]
 800ab58:	6054      	str	r4, [r2, #4]
 800ab5a:	e7c9      	b.n	800aaf0 <_free_r+0x24>
 800ab5c:	bd38      	pop	{r3, r4, r5, pc}
 800ab5e:	bf00      	nop
 800ab60:	20000338 	.word	0x20000338

0800ab64 <_malloc_r>:
 800ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab66:	1ccd      	adds	r5, r1, #3
 800ab68:	f025 0503 	bic.w	r5, r5, #3
 800ab6c:	3508      	adds	r5, #8
 800ab6e:	2d0c      	cmp	r5, #12
 800ab70:	bf38      	it	cc
 800ab72:	250c      	movcc	r5, #12
 800ab74:	2d00      	cmp	r5, #0
 800ab76:	4606      	mov	r6, r0
 800ab78:	db01      	blt.n	800ab7e <_malloc_r+0x1a>
 800ab7a:	42a9      	cmp	r1, r5
 800ab7c:	d903      	bls.n	800ab86 <_malloc_r+0x22>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	6033      	str	r3, [r6, #0]
 800ab82:	2000      	movs	r0, #0
 800ab84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab86:	f000 f9f1 	bl	800af6c <__malloc_lock>
 800ab8a:	4921      	ldr	r1, [pc, #132]	; (800ac10 <_malloc_r+0xac>)
 800ab8c:	680a      	ldr	r2, [r1, #0]
 800ab8e:	4614      	mov	r4, r2
 800ab90:	b99c      	cbnz	r4, 800abba <_malloc_r+0x56>
 800ab92:	4f20      	ldr	r7, [pc, #128]	; (800ac14 <_malloc_r+0xb0>)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	b923      	cbnz	r3, 800aba2 <_malloc_r+0x3e>
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f000 f83c 	bl	800ac18 <_sbrk_r>
 800aba0:	6038      	str	r0, [r7, #0]
 800aba2:	4629      	mov	r1, r5
 800aba4:	4630      	mov	r0, r6
 800aba6:	f000 f837 	bl	800ac18 <_sbrk_r>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d123      	bne.n	800abf6 <_malloc_r+0x92>
 800abae:	230c      	movs	r3, #12
 800abb0:	4630      	mov	r0, r6
 800abb2:	6033      	str	r3, [r6, #0]
 800abb4:	f000 f9e0 	bl	800af78 <__malloc_unlock>
 800abb8:	e7e3      	b.n	800ab82 <_malloc_r+0x1e>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	1b5b      	subs	r3, r3, r5
 800abbe:	d417      	bmi.n	800abf0 <_malloc_r+0x8c>
 800abc0:	2b0b      	cmp	r3, #11
 800abc2:	d903      	bls.n	800abcc <_malloc_r+0x68>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	441c      	add	r4, r3
 800abc8:	6025      	str	r5, [r4, #0]
 800abca:	e004      	b.n	800abd6 <_malloc_r+0x72>
 800abcc:	6863      	ldr	r3, [r4, #4]
 800abce:	42a2      	cmp	r2, r4
 800abd0:	bf0c      	ite	eq
 800abd2:	600b      	streq	r3, [r1, #0]
 800abd4:	6053      	strne	r3, [r2, #4]
 800abd6:	4630      	mov	r0, r6
 800abd8:	f000 f9ce 	bl	800af78 <__malloc_unlock>
 800abdc:	f104 000b 	add.w	r0, r4, #11
 800abe0:	1d23      	adds	r3, r4, #4
 800abe2:	f020 0007 	bic.w	r0, r0, #7
 800abe6:	1ac2      	subs	r2, r0, r3
 800abe8:	d0cc      	beq.n	800ab84 <_malloc_r+0x20>
 800abea:	1a1b      	subs	r3, r3, r0
 800abec:	50a3      	str	r3, [r4, r2]
 800abee:	e7c9      	b.n	800ab84 <_malloc_r+0x20>
 800abf0:	4622      	mov	r2, r4
 800abf2:	6864      	ldr	r4, [r4, #4]
 800abf4:	e7cc      	b.n	800ab90 <_malloc_r+0x2c>
 800abf6:	1cc4      	adds	r4, r0, #3
 800abf8:	f024 0403 	bic.w	r4, r4, #3
 800abfc:	42a0      	cmp	r0, r4
 800abfe:	d0e3      	beq.n	800abc8 <_malloc_r+0x64>
 800ac00:	1a21      	subs	r1, r4, r0
 800ac02:	4630      	mov	r0, r6
 800ac04:	f000 f808 	bl	800ac18 <_sbrk_r>
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d1dd      	bne.n	800abc8 <_malloc_r+0x64>
 800ac0c:	e7cf      	b.n	800abae <_malloc_r+0x4a>
 800ac0e:	bf00      	nop
 800ac10:	20000338 	.word	0x20000338
 800ac14:	2000033c 	.word	0x2000033c

0800ac18 <_sbrk_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	4d05      	ldr	r5, [pc, #20]	; (800ac34 <_sbrk_r+0x1c>)
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4608      	mov	r0, r1
 800ac22:	602b      	str	r3, [r5, #0]
 800ac24:	f7f9 f868 	bl	8003cf8 <_sbrk>
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	d102      	bne.n	800ac32 <_sbrk_r+0x1a>
 800ac2c:	682b      	ldr	r3, [r5, #0]
 800ac2e:	b103      	cbz	r3, 800ac32 <_sbrk_r+0x1a>
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	bd38      	pop	{r3, r4, r5, pc}
 800ac34:	20000518 	.word	0x20000518

0800ac38 <sniprintf>:
 800ac38:	b40c      	push	{r2, r3}
 800ac3a:	b530      	push	{r4, r5, lr}
 800ac3c:	4b17      	ldr	r3, [pc, #92]	; (800ac9c <sniprintf+0x64>)
 800ac3e:	1e0c      	subs	r4, r1, #0
 800ac40:	681d      	ldr	r5, [r3, #0]
 800ac42:	b09d      	sub	sp, #116	; 0x74
 800ac44:	da08      	bge.n	800ac58 <sniprintf+0x20>
 800ac46:	238b      	movs	r3, #139	; 0x8b
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4c:	602b      	str	r3, [r5, #0]
 800ac4e:	b01d      	add	sp, #116	; 0x74
 800ac50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac54:	b002      	add	sp, #8
 800ac56:	4770      	bx	lr
 800ac58:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac60:	bf0c      	ite	eq
 800ac62:	4623      	moveq	r3, r4
 800ac64:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac70:	9002      	str	r0, [sp, #8]
 800ac72:	9006      	str	r0, [sp, #24]
 800ac74:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac78:	4628      	mov	r0, r5
 800ac7a:	ab21      	add	r3, sp, #132	; 0x84
 800ac7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac7e:	a902      	add	r1, sp, #8
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	f000 f9db 	bl	800b03c <_svfiprintf_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	bfbc      	itt	lt
 800ac8a:	238b      	movlt	r3, #139	; 0x8b
 800ac8c:	602b      	strlt	r3, [r5, #0]
 800ac8e:	2c00      	cmp	r4, #0
 800ac90:	d0dd      	beq.n	800ac4e <sniprintf+0x16>
 800ac92:	2200      	movs	r2, #0
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	701a      	strb	r2, [r3, #0]
 800ac98:	e7d9      	b.n	800ac4e <sniprintf+0x16>
 800ac9a:	bf00      	nop
 800ac9c:	20000024 	.word	0x20000024

0800aca0 <siprintf>:
 800aca0:	b40e      	push	{r1, r2, r3}
 800aca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aca6:	b500      	push	{lr}
 800aca8:	b09c      	sub	sp, #112	; 0x70
 800acaa:	ab1d      	add	r3, sp, #116	; 0x74
 800acac:	9002      	str	r0, [sp, #8]
 800acae:	9006      	str	r0, [sp, #24]
 800acb0:	9107      	str	r1, [sp, #28]
 800acb2:	9104      	str	r1, [sp, #16]
 800acb4:	4808      	ldr	r0, [pc, #32]	; (800acd8 <siprintf+0x38>)
 800acb6:	4909      	ldr	r1, [pc, #36]	; (800acdc <siprintf+0x3c>)
 800acb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acbc:	9105      	str	r1, [sp, #20]
 800acbe:	6800      	ldr	r0, [r0, #0]
 800acc0:	a902      	add	r1, sp, #8
 800acc2:	9301      	str	r3, [sp, #4]
 800acc4:	f000 f9ba 	bl	800b03c <_svfiprintf_r>
 800acc8:	2200      	movs	r2, #0
 800acca:	9b02      	ldr	r3, [sp, #8]
 800accc:	701a      	strb	r2, [r3, #0]
 800acce:	b01c      	add	sp, #112	; 0x70
 800acd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd4:	b003      	add	sp, #12
 800acd6:	4770      	bx	lr
 800acd8:	20000024 	.word	0x20000024
 800acdc:	ffff0208 	.word	0xffff0208

0800ace0 <strcat>:
 800ace0:	4602      	mov	r2, r0
 800ace2:	b510      	push	{r4, lr}
 800ace4:	7814      	ldrb	r4, [r2, #0]
 800ace6:	4613      	mov	r3, r2
 800ace8:	3201      	adds	r2, #1
 800acea:	2c00      	cmp	r4, #0
 800acec:	d1fa      	bne.n	800ace4 <strcat+0x4>
 800acee:	3b01      	subs	r3, #1
 800acf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	d1f9      	bne.n	800acf0 <strcat+0x10>
 800acfc:	bd10      	pop	{r4, pc}

0800acfe <strcpy>:
 800acfe:	4603      	mov	r3, r0
 800ad00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad04:	f803 2b01 	strb.w	r2, [r3], #1
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	d1f9      	bne.n	800ad00 <strcpy+0x2>
 800ad0c:	4770      	bx	lr

0800ad0e <strncpy>:
 800ad0e:	4603      	mov	r3, r0
 800ad10:	b510      	push	{r4, lr}
 800ad12:	3901      	subs	r1, #1
 800ad14:	b132      	cbz	r2, 800ad24 <strncpy+0x16>
 800ad16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad1a:	3a01      	subs	r2, #1
 800ad1c:	f803 4b01 	strb.w	r4, [r3], #1
 800ad20:	2c00      	cmp	r4, #0
 800ad22:	d1f7      	bne.n	800ad14 <strncpy+0x6>
 800ad24:	2100      	movs	r1, #0
 800ad26:	441a      	add	r2, r3
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d100      	bne.n	800ad2e <strncpy+0x20>
 800ad2c:	bd10      	pop	{r4, pc}
 800ad2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad32:	e7f9      	b.n	800ad28 <strncpy+0x1a>

0800ad34 <strtok>:
 800ad34:	4b16      	ldr	r3, [pc, #88]	; (800ad90 <strtok+0x5c>)
 800ad36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3a:	681f      	ldr	r7, [r3, #0]
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ad40:	460e      	mov	r6, r1
 800ad42:	b9ec      	cbnz	r4, 800ad80 <strtok+0x4c>
 800ad44:	2050      	movs	r0, #80	; 0x50
 800ad46:	f7ff fe9b 	bl	800aa80 <malloc>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	65b8      	str	r0, [r7, #88]	; 0x58
 800ad4e:	b920      	cbnz	r0, 800ad5a <strtok+0x26>
 800ad50:	2157      	movs	r1, #87	; 0x57
 800ad52:	4b10      	ldr	r3, [pc, #64]	; (800ad94 <strtok+0x60>)
 800ad54:	4810      	ldr	r0, [pc, #64]	; (800ad98 <strtok+0x64>)
 800ad56:	f000 f8d9 	bl	800af0c <__assert_func>
 800ad5a:	e9c0 4400 	strd	r4, r4, [r0]
 800ad5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad62:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad66:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ad6a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ad6e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ad72:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ad76:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ad7a:	6184      	str	r4, [r0, #24]
 800ad7c:	7704      	strb	r4, [r0, #28]
 800ad7e:	6244      	str	r4, [r0, #36]	; 0x24
 800ad80:	4631      	mov	r1, r6
 800ad82:	4628      	mov	r0, r5
 800ad84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad86:	2301      	movs	r3, #1
 800ad88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	f000 b806 	b.w	800ad9c <__strtok_r>
 800ad90:	20000024 	.word	0x20000024
 800ad94:	0800d33c 	.word	0x0800d33c
 800ad98:	0800d353 	.word	0x0800d353

0800ad9c <__strtok_r>:
 800ad9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9e:	b908      	cbnz	r0, 800ada4 <__strtok_r+0x8>
 800ada0:	6810      	ldr	r0, [r2, #0]
 800ada2:	b188      	cbz	r0, 800adc8 <__strtok_r+0x2c>
 800ada4:	4604      	mov	r4, r0
 800ada6:	460f      	mov	r7, r1
 800ada8:	4620      	mov	r0, r4
 800adaa:	f814 5b01 	ldrb.w	r5, [r4], #1
 800adae:	f817 6b01 	ldrb.w	r6, [r7], #1
 800adb2:	b91e      	cbnz	r6, 800adbc <__strtok_r+0x20>
 800adb4:	b965      	cbnz	r5, 800add0 <__strtok_r+0x34>
 800adb6:	4628      	mov	r0, r5
 800adb8:	6015      	str	r5, [r2, #0]
 800adba:	e005      	b.n	800adc8 <__strtok_r+0x2c>
 800adbc:	42b5      	cmp	r5, r6
 800adbe:	d1f6      	bne.n	800adae <__strtok_r+0x12>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1f0      	bne.n	800ada6 <__strtok_r+0xa>
 800adc4:	6014      	str	r4, [r2, #0]
 800adc6:	7003      	strb	r3, [r0, #0]
 800adc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adca:	461c      	mov	r4, r3
 800adcc:	e00c      	b.n	800ade8 <__strtok_r+0x4c>
 800adce:	b915      	cbnz	r5, 800add6 <__strtok_r+0x3a>
 800add0:	460e      	mov	r6, r1
 800add2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800add6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800adda:	42ab      	cmp	r3, r5
 800addc:	d1f7      	bne.n	800adce <__strtok_r+0x32>
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0f3      	beq.n	800adca <__strtok_r+0x2e>
 800ade2:	2300      	movs	r3, #0
 800ade4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ade8:	6014      	str	r4, [r2, #0]
 800adea:	e7ed      	b.n	800adc8 <__strtok_r+0x2c>

0800adec <_strtol_l.isra.0>:
 800adec:	2b01      	cmp	r3, #1
 800adee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf2:	4686      	mov	lr, r0
 800adf4:	d001      	beq.n	800adfa <_strtol_l.isra.0+0xe>
 800adf6:	2b24      	cmp	r3, #36	; 0x24
 800adf8:	d906      	bls.n	800ae08 <_strtol_l.isra.0+0x1c>
 800adfa:	f7ff fe17 	bl	800aa2c <__errno>
 800adfe:	2316      	movs	r3, #22
 800ae00:	6003      	str	r3, [r0, #0]
 800ae02:	2000      	movs	r0, #0
 800ae04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae08:	468c      	mov	ip, r1
 800ae0a:	4e3a      	ldr	r6, [pc, #232]	; (800aef4 <_strtol_l.isra.0+0x108>)
 800ae0c:	4660      	mov	r0, ip
 800ae0e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ae12:	5da5      	ldrb	r5, [r4, r6]
 800ae14:	f015 0508 	ands.w	r5, r5, #8
 800ae18:	d1f8      	bne.n	800ae0c <_strtol_l.isra.0+0x20>
 800ae1a:	2c2d      	cmp	r4, #45	; 0x2d
 800ae1c:	d133      	bne.n	800ae86 <_strtol_l.isra.0+0x9a>
 800ae1e:	f04f 0801 	mov.w	r8, #1
 800ae22:	f89c 4000 	ldrb.w	r4, [ip]
 800ae26:	f100 0c02 	add.w	ip, r0, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d05d      	beq.n	800aeea <_strtol_l.isra.0+0xfe>
 800ae2e:	2b10      	cmp	r3, #16
 800ae30:	d10c      	bne.n	800ae4c <_strtol_l.isra.0+0x60>
 800ae32:	2c30      	cmp	r4, #48	; 0x30
 800ae34:	d10a      	bne.n	800ae4c <_strtol_l.isra.0+0x60>
 800ae36:	f89c 0000 	ldrb.w	r0, [ip]
 800ae3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ae3e:	2858      	cmp	r0, #88	; 0x58
 800ae40:	d14e      	bne.n	800aee0 <_strtol_l.isra.0+0xf4>
 800ae42:	2310      	movs	r3, #16
 800ae44:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ae48:	f10c 0c02 	add.w	ip, ip, #2
 800ae4c:	2500      	movs	r5, #0
 800ae4e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800ae52:	3f01      	subs	r7, #1
 800ae54:	fbb7 f9f3 	udiv	r9, r7, r3
 800ae58:	4628      	mov	r0, r5
 800ae5a:	fb03 7a19 	mls	sl, r3, r9, r7
 800ae5e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ae62:	2e09      	cmp	r6, #9
 800ae64:	d818      	bhi.n	800ae98 <_strtol_l.isra.0+0xac>
 800ae66:	4634      	mov	r4, r6
 800ae68:	42a3      	cmp	r3, r4
 800ae6a:	dd24      	ble.n	800aeb6 <_strtol_l.isra.0+0xca>
 800ae6c:	2d00      	cmp	r5, #0
 800ae6e:	db1f      	blt.n	800aeb0 <_strtol_l.isra.0+0xc4>
 800ae70:	4581      	cmp	r9, r0
 800ae72:	d31d      	bcc.n	800aeb0 <_strtol_l.isra.0+0xc4>
 800ae74:	d101      	bne.n	800ae7a <_strtol_l.isra.0+0x8e>
 800ae76:	45a2      	cmp	sl, r4
 800ae78:	db1a      	blt.n	800aeb0 <_strtol_l.isra.0+0xc4>
 800ae7a:	2501      	movs	r5, #1
 800ae7c:	fb00 4003 	mla	r0, r0, r3, r4
 800ae80:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ae84:	e7eb      	b.n	800ae5e <_strtol_l.isra.0+0x72>
 800ae86:	2c2b      	cmp	r4, #43	; 0x2b
 800ae88:	bf08      	it	eq
 800ae8a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ae8e:	46a8      	mov	r8, r5
 800ae90:	bf08      	it	eq
 800ae92:	f100 0c02 	addeq.w	ip, r0, #2
 800ae96:	e7c8      	b.n	800ae2a <_strtol_l.isra.0+0x3e>
 800ae98:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ae9c:	2e19      	cmp	r6, #25
 800ae9e:	d801      	bhi.n	800aea4 <_strtol_l.isra.0+0xb8>
 800aea0:	3c37      	subs	r4, #55	; 0x37
 800aea2:	e7e1      	b.n	800ae68 <_strtol_l.isra.0+0x7c>
 800aea4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800aea8:	2e19      	cmp	r6, #25
 800aeaa:	d804      	bhi.n	800aeb6 <_strtol_l.isra.0+0xca>
 800aeac:	3c57      	subs	r4, #87	; 0x57
 800aeae:	e7db      	b.n	800ae68 <_strtol_l.isra.0+0x7c>
 800aeb0:	f04f 35ff 	mov.w	r5, #4294967295
 800aeb4:	e7e4      	b.n	800ae80 <_strtol_l.isra.0+0x94>
 800aeb6:	2d00      	cmp	r5, #0
 800aeb8:	da08      	bge.n	800aecc <_strtol_l.isra.0+0xe0>
 800aeba:	2322      	movs	r3, #34	; 0x22
 800aebc:	4638      	mov	r0, r7
 800aebe:	f8ce 3000 	str.w	r3, [lr]
 800aec2:	2a00      	cmp	r2, #0
 800aec4:	d09e      	beq.n	800ae04 <_strtol_l.isra.0+0x18>
 800aec6:	f10c 31ff 	add.w	r1, ip, #4294967295
 800aeca:	e007      	b.n	800aedc <_strtol_l.isra.0+0xf0>
 800aecc:	f1b8 0f00 	cmp.w	r8, #0
 800aed0:	d000      	beq.n	800aed4 <_strtol_l.isra.0+0xe8>
 800aed2:	4240      	negs	r0, r0
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	d095      	beq.n	800ae04 <_strtol_l.isra.0+0x18>
 800aed8:	2d00      	cmp	r5, #0
 800aeda:	d1f4      	bne.n	800aec6 <_strtol_l.isra.0+0xda>
 800aedc:	6011      	str	r1, [r2, #0]
 800aede:	e791      	b.n	800ae04 <_strtol_l.isra.0+0x18>
 800aee0:	2430      	movs	r4, #48	; 0x30
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1b2      	bne.n	800ae4c <_strtol_l.isra.0+0x60>
 800aee6:	2308      	movs	r3, #8
 800aee8:	e7b0      	b.n	800ae4c <_strtol_l.isra.0+0x60>
 800aeea:	2c30      	cmp	r4, #48	; 0x30
 800aeec:	d0a3      	beq.n	800ae36 <_strtol_l.isra.0+0x4a>
 800aeee:	230a      	movs	r3, #10
 800aef0:	e7ac      	b.n	800ae4c <_strtol_l.isra.0+0x60>
 800aef2:	bf00      	nop
 800aef4:	0800d3f1 	.word	0x0800d3f1

0800aef8 <strtol>:
 800aef8:	4613      	mov	r3, r2
 800aefa:	460a      	mov	r2, r1
 800aefc:	4601      	mov	r1, r0
 800aefe:	4802      	ldr	r0, [pc, #8]	; (800af08 <strtol+0x10>)
 800af00:	6800      	ldr	r0, [r0, #0]
 800af02:	f7ff bf73 	b.w	800adec <_strtol_l.isra.0>
 800af06:	bf00      	nop
 800af08:	20000024 	.word	0x20000024

0800af0c <__assert_func>:
 800af0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af0e:	4614      	mov	r4, r2
 800af10:	461a      	mov	r2, r3
 800af12:	4b09      	ldr	r3, [pc, #36]	; (800af38 <__assert_func+0x2c>)
 800af14:	4605      	mov	r5, r0
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68d8      	ldr	r0, [r3, #12]
 800af1a:	b14c      	cbz	r4, 800af30 <__assert_func+0x24>
 800af1c:	4b07      	ldr	r3, [pc, #28]	; (800af3c <__assert_func+0x30>)
 800af1e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af22:	9100      	str	r1, [sp, #0]
 800af24:	462b      	mov	r3, r5
 800af26:	4906      	ldr	r1, [pc, #24]	; (800af40 <__assert_func+0x34>)
 800af28:	f000 f80e 	bl	800af48 <fiprintf>
 800af2c:	f000 fd34 	bl	800b998 <abort>
 800af30:	4b04      	ldr	r3, [pc, #16]	; (800af44 <__assert_func+0x38>)
 800af32:	461c      	mov	r4, r3
 800af34:	e7f3      	b.n	800af1e <__assert_func+0x12>
 800af36:	bf00      	nop
 800af38:	20000024 	.word	0x20000024
 800af3c:	0800d3b4 	.word	0x0800d3b4
 800af40:	0800d3c1 	.word	0x0800d3c1
 800af44:	0800d3ef 	.word	0x0800d3ef

0800af48 <fiprintf>:
 800af48:	b40e      	push	{r1, r2, r3}
 800af4a:	b503      	push	{r0, r1, lr}
 800af4c:	4601      	mov	r1, r0
 800af4e:	ab03      	add	r3, sp, #12
 800af50:	4805      	ldr	r0, [pc, #20]	; (800af68 <fiprintf+0x20>)
 800af52:	f853 2b04 	ldr.w	r2, [r3], #4
 800af56:	6800      	ldr	r0, [r0, #0]
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	f000 f997 	bl	800b28c <_vfiprintf_r>
 800af5e:	b002      	add	sp, #8
 800af60:	f85d eb04 	ldr.w	lr, [sp], #4
 800af64:	b003      	add	sp, #12
 800af66:	4770      	bx	lr
 800af68:	20000024 	.word	0x20000024

0800af6c <__malloc_lock>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__malloc_lock+0x8>)
 800af6e:	f000 bed3 	b.w	800bd18 <__retarget_lock_acquire_recursive>
 800af72:	bf00      	nop
 800af74:	20000520 	.word	0x20000520

0800af78 <__malloc_unlock>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__malloc_unlock+0x8>)
 800af7a:	f000 bece 	b.w	800bd1a <__retarget_lock_release_recursive>
 800af7e:	bf00      	nop
 800af80:	20000520 	.word	0x20000520

0800af84 <__ssputs_r>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	688e      	ldr	r6, [r1, #8]
 800af8a:	4682      	mov	sl, r0
 800af8c:	429e      	cmp	r6, r3
 800af8e:	460c      	mov	r4, r1
 800af90:	4690      	mov	r8, r2
 800af92:	461f      	mov	r7, r3
 800af94:	d838      	bhi.n	800b008 <__ssputs_r+0x84>
 800af96:	898a      	ldrh	r2, [r1, #12]
 800af98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af9c:	d032      	beq.n	800b004 <__ssputs_r+0x80>
 800af9e:	6825      	ldr	r5, [r4, #0]
 800afa0:	6909      	ldr	r1, [r1, #16]
 800afa2:	3301      	adds	r3, #1
 800afa4:	eba5 0901 	sub.w	r9, r5, r1
 800afa8:	6965      	ldr	r5, [r4, #20]
 800afaa:	444b      	add	r3, r9
 800afac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afb4:	106d      	asrs	r5, r5, #1
 800afb6:	429d      	cmp	r5, r3
 800afb8:	bf38      	it	cc
 800afba:	461d      	movcc	r5, r3
 800afbc:	0553      	lsls	r3, r2, #21
 800afbe:	d531      	bpl.n	800b024 <__ssputs_r+0xa0>
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7ff fdcf 	bl	800ab64 <_malloc_r>
 800afc6:	4606      	mov	r6, r0
 800afc8:	b950      	cbnz	r0, 800afe0 <__ssputs_r+0x5c>
 800afca:	230c      	movs	r3, #12
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295
 800afd0:	f8ca 3000 	str.w	r3, [sl]
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe0:	464a      	mov	r2, r9
 800afe2:	6921      	ldr	r1, [r4, #16]
 800afe4:	f7ff fd5c 	bl	800aaa0 <memcpy>
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff2:	81a3      	strh	r3, [r4, #12]
 800aff4:	6126      	str	r6, [r4, #16]
 800aff6:	444e      	add	r6, r9
 800aff8:	6026      	str	r6, [r4, #0]
 800affa:	463e      	mov	r6, r7
 800affc:	6165      	str	r5, [r4, #20]
 800affe:	eba5 0509 	sub.w	r5, r5, r9
 800b002:	60a5      	str	r5, [r4, #8]
 800b004:	42be      	cmp	r6, r7
 800b006:	d900      	bls.n	800b00a <__ssputs_r+0x86>
 800b008:	463e      	mov	r6, r7
 800b00a:	4632      	mov	r2, r6
 800b00c:	4641      	mov	r1, r8
 800b00e:	6820      	ldr	r0, [r4, #0]
 800b010:	f000 fef6 	bl	800be00 <memmove>
 800b014:	68a3      	ldr	r3, [r4, #8]
 800b016:	6822      	ldr	r2, [r4, #0]
 800b018:	1b9b      	subs	r3, r3, r6
 800b01a:	4432      	add	r2, r6
 800b01c:	2000      	movs	r0, #0
 800b01e:	60a3      	str	r3, [r4, #8]
 800b020:	6022      	str	r2, [r4, #0]
 800b022:	e7db      	b.n	800afdc <__ssputs_r+0x58>
 800b024:	462a      	mov	r2, r5
 800b026:	f000 ff05 	bl	800be34 <_realloc_r>
 800b02a:	4606      	mov	r6, r0
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d1e1      	bne.n	800aff4 <__ssputs_r+0x70>
 800b030:	4650      	mov	r0, sl
 800b032:	6921      	ldr	r1, [r4, #16]
 800b034:	f7ff fd4a 	bl	800aacc <_free_r>
 800b038:	e7c7      	b.n	800afca <__ssputs_r+0x46>
	...

0800b03c <_svfiprintf_r>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	4698      	mov	r8, r3
 800b042:	898b      	ldrh	r3, [r1, #12]
 800b044:	4607      	mov	r7, r0
 800b046:	061b      	lsls	r3, r3, #24
 800b048:	460d      	mov	r5, r1
 800b04a:	4614      	mov	r4, r2
 800b04c:	b09d      	sub	sp, #116	; 0x74
 800b04e:	d50e      	bpl.n	800b06e <_svfiprintf_r+0x32>
 800b050:	690b      	ldr	r3, [r1, #16]
 800b052:	b963      	cbnz	r3, 800b06e <_svfiprintf_r+0x32>
 800b054:	2140      	movs	r1, #64	; 0x40
 800b056:	f7ff fd85 	bl	800ab64 <_malloc_r>
 800b05a:	6028      	str	r0, [r5, #0]
 800b05c:	6128      	str	r0, [r5, #16]
 800b05e:	b920      	cbnz	r0, 800b06a <_svfiprintf_r+0x2e>
 800b060:	230c      	movs	r3, #12
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	e0d1      	b.n	800b20e <_svfiprintf_r+0x1d2>
 800b06a:	2340      	movs	r3, #64	; 0x40
 800b06c:	616b      	str	r3, [r5, #20]
 800b06e:	2300      	movs	r3, #0
 800b070:	9309      	str	r3, [sp, #36]	; 0x24
 800b072:	2320      	movs	r3, #32
 800b074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b078:	2330      	movs	r3, #48	; 0x30
 800b07a:	f04f 0901 	mov.w	r9, #1
 800b07e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b082:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b228 <_svfiprintf_r+0x1ec>
 800b086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b08a:	4623      	mov	r3, r4
 800b08c:	469a      	mov	sl, r3
 800b08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b092:	b10a      	cbz	r2, 800b098 <_svfiprintf_r+0x5c>
 800b094:	2a25      	cmp	r2, #37	; 0x25
 800b096:	d1f9      	bne.n	800b08c <_svfiprintf_r+0x50>
 800b098:	ebba 0b04 	subs.w	fp, sl, r4
 800b09c:	d00b      	beq.n	800b0b6 <_svfiprintf_r+0x7a>
 800b09e:	465b      	mov	r3, fp
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4638      	mov	r0, r7
 800b0a6:	f7ff ff6d 	bl	800af84 <__ssputs_r>
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f000 80aa 	beq.w	800b204 <_svfiprintf_r+0x1c8>
 800b0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b2:	445a      	add	r2, fp
 800b0b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b0b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 80a2 	beq.w	800b204 <_svfiprintf_r+0x1c8>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ca:	f10a 0a01 	add.w	sl, sl, #1
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	9307      	str	r3, [sp, #28]
 800b0d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0d6:	931a      	str	r3, [sp, #104]	; 0x68
 800b0d8:	4654      	mov	r4, sl
 800b0da:	2205      	movs	r2, #5
 800b0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e0:	4851      	ldr	r0, [pc, #324]	; (800b228 <_svfiprintf_r+0x1ec>)
 800b0e2:	f000 fe7f 	bl	800bde4 <memchr>
 800b0e6:	9a04      	ldr	r2, [sp, #16]
 800b0e8:	b9d8      	cbnz	r0, 800b122 <_svfiprintf_r+0xe6>
 800b0ea:	06d0      	lsls	r0, r2, #27
 800b0ec:	bf44      	itt	mi
 800b0ee:	2320      	movmi	r3, #32
 800b0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0f4:	0711      	lsls	r1, r2, #28
 800b0f6:	bf44      	itt	mi
 800b0f8:	232b      	movmi	r3, #43	; 0x2b
 800b0fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b102:	2b2a      	cmp	r3, #42	; 0x2a
 800b104:	d015      	beq.n	800b132 <_svfiprintf_r+0xf6>
 800b106:	4654      	mov	r4, sl
 800b108:	2000      	movs	r0, #0
 800b10a:	f04f 0c0a 	mov.w	ip, #10
 800b10e:	9a07      	ldr	r2, [sp, #28]
 800b110:	4621      	mov	r1, r4
 800b112:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b116:	3b30      	subs	r3, #48	; 0x30
 800b118:	2b09      	cmp	r3, #9
 800b11a:	d94e      	bls.n	800b1ba <_svfiprintf_r+0x17e>
 800b11c:	b1b0      	cbz	r0, 800b14c <_svfiprintf_r+0x110>
 800b11e:	9207      	str	r2, [sp, #28]
 800b120:	e014      	b.n	800b14c <_svfiprintf_r+0x110>
 800b122:	eba0 0308 	sub.w	r3, r0, r8
 800b126:	fa09 f303 	lsl.w	r3, r9, r3
 800b12a:	4313      	orrs	r3, r2
 800b12c:	46a2      	mov	sl, r4
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	e7d2      	b.n	800b0d8 <_svfiprintf_r+0x9c>
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	1d19      	adds	r1, r3, #4
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	9103      	str	r1, [sp, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfbb      	ittet	lt
 800b13e:	425b      	neglt	r3, r3
 800b140:	f042 0202 	orrlt.w	r2, r2, #2
 800b144:	9307      	strge	r3, [sp, #28]
 800b146:	9307      	strlt	r3, [sp, #28]
 800b148:	bfb8      	it	lt
 800b14a:	9204      	strlt	r2, [sp, #16]
 800b14c:	7823      	ldrb	r3, [r4, #0]
 800b14e:	2b2e      	cmp	r3, #46	; 0x2e
 800b150:	d10c      	bne.n	800b16c <_svfiprintf_r+0x130>
 800b152:	7863      	ldrb	r3, [r4, #1]
 800b154:	2b2a      	cmp	r3, #42	; 0x2a
 800b156:	d135      	bne.n	800b1c4 <_svfiprintf_r+0x188>
 800b158:	9b03      	ldr	r3, [sp, #12]
 800b15a:	3402      	adds	r4, #2
 800b15c:	1d1a      	adds	r2, r3, #4
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	9203      	str	r2, [sp, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	bfb8      	it	lt
 800b166:	f04f 33ff 	movlt.w	r3, #4294967295
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b238 <_svfiprintf_r+0x1fc>
 800b170:	2203      	movs	r2, #3
 800b172:	4650      	mov	r0, sl
 800b174:	7821      	ldrb	r1, [r4, #0]
 800b176:	f000 fe35 	bl	800bde4 <memchr>
 800b17a:	b140      	cbz	r0, 800b18e <_svfiprintf_r+0x152>
 800b17c:	2340      	movs	r3, #64	; 0x40
 800b17e:	eba0 000a 	sub.w	r0, r0, sl
 800b182:	fa03 f000 	lsl.w	r0, r3, r0
 800b186:	9b04      	ldr	r3, [sp, #16]
 800b188:	3401      	adds	r4, #1
 800b18a:	4303      	orrs	r3, r0
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b192:	2206      	movs	r2, #6
 800b194:	4825      	ldr	r0, [pc, #148]	; (800b22c <_svfiprintf_r+0x1f0>)
 800b196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b19a:	f000 fe23 	bl	800bde4 <memchr>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d038      	beq.n	800b214 <_svfiprintf_r+0x1d8>
 800b1a2:	4b23      	ldr	r3, [pc, #140]	; (800b230 <_svfiprintf_r+0x1f4>)
 800b1a4:	bb1b      	cbnz	r3, 800b1ee <_svfiprintf_r+0x1b2>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	3307      	adds	r3, #7
 800b1aa:	f023 0307 	bic.w	r3, r3, #7
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	9303      	str	r3, [sp, #12]
 800b1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b4:	4433      	add	r3, r6
 800b1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b8:	e767      	b.n	800b08a <_svfiprintf_r+0x4e>
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	2001      	movs	r0, #1
 800b1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1c2:	e7a5      	b.n	800b110 <_svfiprintf_r+0xd4>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f04f 0c0a 	mov.w	ip, #10
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	3401      	adds	r4, #1
 800b1ce:	9305      	str	r3, [sp, #20]
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d6:	3a30      	subs	r2, #48	; 0x30
 800b1d8:	2a09      	cmp	r2, #9
 800b1da:	d903      	bls.n	800b1e4 <_svfiprintf_r+0x1a8>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0c5      	beq.n	800b16c <_svfiprintf_r+0x130>
 800b1e0:	9105      	str	r1, [sp, #20]
 800b1e2:	e7c3      	b.n	800b16c <_svfiprintf_r+0x130>
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ec:	e7f0      	b.n	800b1d0 <_svfiprintf_r+0x194>
 800b1ee:	ab03      	add	r3, sp, #12
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	462a      	mov	r2, r5
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <_svfiprintf_r+0x1f8>)
 800b1f8:	a904      	add	r1, sp, #16
 800b1fa:	f3af 8000 	nop.w
 800b1fe:	1c42      	adds	r2, r0, #1
 800b200:	4606      	mov	r6, r0
 800b202:	d1d6      	bne.n	800b1b2 <_svfiprintf_r+0x176>
 800b204:	89ab      	ldrh	r3, [r5, #12]
 800b206:	065b      	lsls	r3, r3, #25
 800b208:	f53f af2c 	bmi.w	800b064 <_svfiprintf_r+0x28>
 800b20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b20e:	b01d      	add	sp, #116	; 0x74
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	ab03      	add	r3, sp, #12
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	462a      	mov	r2, r5
 800b21a:	4638      	mov	r0, r7
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <_svfiprintf_r+0x1f8>)
 800b21e:	a904      	add	r1, sp, #16
 800b220:	f000 f9d4 	bl	800b5cc <_printf_i>
 800b224:	e7eb      	b.n	800b1fe <_svfiprintf_r+0x1c2>
 800b226:	bf00      	nop
 800b228:	0800d4f1 	.word	0x0800d4f1
 800b22c:	0800d4fb 	.word	0x0800d4fb
 800b230:	00000000 	.word	0x00000000
 800b234:	0800af85 	.word	0x0800af85
 800b238:	0800d4f7 	.word	0x0800d4f7

0800b23c <__sfputc_r>:
 800b23c:	6893      	ldr	r3, [r2, #8]
 800b23e:	b410      	push	{r4}
 800b240:	3b01      	subs	r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	6093      	str	r3, [r2, #8]
 800b246:	da07      	bge.n	800b258 <__sfputc_r+0x1c>
 800b248:	6994      	ldr	r4, [r2, #24]
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	db01      	blt.n	800b252 <__sfputc_r+0x16>
 800b24e:	290a      	cmp	r1, #10
 800b250:	d102      	bne.n	800b258 <__sfputc_r+0x1c>
 800b252:	bc10      	pop	{r4}
 800b254:	f000 bae0 	b.w	800b818 <__swbuf_r>
 800b258:	6813      	ldr	r3, [r2, #0]
 800b25a:	1c58      	adds	r0, r3, #1
 800b25c:	6010      	str	r0, [r2, #0]
 800b25e:	7019      	strb	r1, [r3, #0]
 800b260:	4608      	mov	r0, r1
 800b262:	bc10      	pop	{r4}
 800b264:	4770      	bx	lr

0800b266 <__sfputs_r>:
 800b266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b268:	4606      	mov	r6, r0
 800b26a:	460f      	mov	r7, r1
 800b26c:	4614      	mov	r4, r2
 800b26e:	18d5      	adds	r5, r2, r3
 800b270:	42ac      	cmp	r4, r5
 800b272:	d101      	bne.n	800b278 <__sfputs_r+0x12>
 800b274:	2000      	movs	r0, #0
 800b276:	e007      	b.n	800b288 <__sfputs_r+0x22>
 800b278:	463a      	mov	r2, r7
 800b27a:	4630      	mov	r0, r6
 800b27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b280:	f7ff ffdc 	bl	800b23c <__sfputc_r>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d1f3      	bne.n	800b270 <__sfputs_r+0xa>
 800b288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b28c <_vfiprintf_r>:
 800b28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b290:	460d      	mov	r5, r1
 800b292:	4614      	mov	r4, r2
 800b294:	4698      	mov	r8, r3
 800b296:	4606      	mov	r6, r0
 800b298:	b09d      	sub	sp, #116	; 0x74
 800b29a:	b118      	cbz	r0, 800b2a4 <_vfiprintf_r+0x18>
 800b29c:	6983      	ldr	r3, [r0, #24]
 800b29e:	b90b      	cbnz	r3, 800b2a4 <_vfiprintf_r+0x18>
 800b2a0:	f000 fc9c 	bl	800bbdc <__sinit>
 800b2a4:	4b89      	ldr	r3, [pc, #548]	; (800b4cc <_vfiprintf_r+0x240>)
 800b2a6:	429d      	cmp	r5, r3
 800b2a8:	d11b      	bne.n	800b2e2 <_vfiprintf_r+0x56>
 800b2aa:	6875      	ldr	r5, [r6, #4]
 800b2ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2ae:	07d9      	lsls	r1, r3, #31
 800b2b0:	d405      	bmi.n	800b2be <_vfiprintf_r+0x32>
 800b2b2:	89ab      	ldrh	r3, [r5, #12]
 800b2b4:	059a      	lsls	r2, r3, #22
 800b2b6:	d402      	bmi.n	800b2be <_vfiprintf_r+0x32>
 800b2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ba:	f000 fd2d 	bl	800bd18 <__retarget_lock_acquire_recursive>
 800b2be:	89ab      	ldrh	r3, [r5, #12]
 800b2c0:	071b      	lsls	r3, r3, #28
 800b2c2:	d501      	bpl.n	800b2c8 <_vfiprintf_r+0x3c>
 800b2c4:	692b      	ldr	r3, [r5, #16]
 800b2c6:	b9eb      	cbnz	r3, 800b304 <_vfiprintf_r+0x78>
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f000 faf6 	bl	800b8bc <__swsetup_r>
 800b2d0:	b1c0      	cbz	r0, 800b304 <_vfiprintf_r+0x78>
 800b2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2d4:	07dc      	lsls	r4, r3, #31
 800b2d6:	d50e      	bpl.n	800b2f6 <_vfiprintf_r+0x6a>
 800b2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2dc:	b01d      	add	sp, #116	; 0x74
 800b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e2:	4b7b      	ldr	r3, [pc, #492]	; (800b4d0 <_vfiprintf_r+0x244>)
 800b2e4:	429d      	cmp	r5, r3
 800b2e6:	d101      	bne.n	800b2ec <_vfiprintf_r+0x60>
 800b2e8:	68b5      	ldr	r5, [r6, #8]
 800b2ea:	e7df      	b.n	800b2ac <_vfiprintf_r+0x20>
 800b2ec:	4b79      	ldr	r3, [pc, #484]	; (800b4d4 <_vfiprintf_r+0x248>)
 800b2ee:	429d      	cmp	r5, r3
 800b2f0:	bf08      	it	eq
 800b2f2:	68f5      	ldreq	r5, [r6, #12]
 800b2f4:	e7da      	b.n	800b2ac <_vfiprintf_r+0x20>
 800b2f6:	89ab      	ldrh	r3, [r5, #12]
 800b2f8:	0598      	lsls	r0, r3, #22
 800b2fa:	d4ed      	bmi.n	800b2d8 <_vfiprintf_r+0x4c>
 800b2fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2fe:	f000 fd0c 	bl	800bd1a <__retarget_lock_release_recursive>
 800b302:	e7e9      	b.n	800b2d8 <_vfiprintf_r+0x4c>
 800b304:	2300      	movs	r3, #0
 800b306:	9309      	str	r3, [sp, #36]	; 0x24
 800b308:	2320      	movs	r3, #32
 800b30a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b30e:	2330      	movs	r3, #48	; 0x30
 800b310:	f04f 0901 	mov.w	r9, #1
 800b314:	f8cd 800c 	str.w	r8, [sp, #12]
 800b318:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b4d8 <_vfiprintf_r+0x24c>
 800b31c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b320:	4623      	mov	r3, r4
 800b322:	469a      	mov	sl, r3
 800b324:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b328:	b10a      	cbz	r2, 800b32e <_vfiprintf_r+0xa2>
 800b32a:	2a25      	cmp	r2, #37	; 0x25
 800b32c:	d1f9      	bne.n	800b322 <_vfiprintf_r+0x96>
 800b32e:	ebba 0b04 	subs.w	fp, sl, r4
 800b332:	d00b      	beq.n	800b34c <_vfiprintf_r+0xc0>
 800b334:	465b      	mov	r3, fp
 800b336:	4622      	mov	r2, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7ff ff93 	bl	800b266 <__sfputs_r>
 800b340:	3001      	adds	r0, #1
 800b342:	f000 80aa 	beq.w	800b49a <_vfiprintf_r+0x20e>
 800b346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b348:	445a      	add	r2, fp
 800b34a:	9209      	str	r2, [sp, #36]	; 0x24
 800b34c:	f89a 3000 	ldrb.w	r3, [sl]
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 80a2 	beq.w	800b49a <_vfiprintf_r+0x20e>
 800b356:	2300      	movs	r3, #0
 800b358:	f04f 32ff 	mov.w	r2, #4294967295
 800b35c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b360:	f10a 0a01 	add.w	sl, sl, #1
 800b364:	9304      	str	r3, [sp, #16]
 800b366:	9307      	str	r3, [sp, #28]
 800b368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b36c:	931a      	str	r3, [sp, #104]	; 0x68
 800b36e:	4654      	mov	r4, sl
 800b370:	2205      	movs	r2, #5
 800b372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b376:	4858      	ldr	r0, [pc, #352]	; (800b4d8 <_vfiprintf_r+0x24c>)
 800b378:	f000 fd34 	bl	800bde4 <memchr>
 800b37c:	9a04      	ldr	r2, [sp, #16]
 800b37e:	b9d8      	cbnz	r0, 800b3b8 <_vfiprintf_r+0x12c>
 800b380:	06d1      	lsls	r1, r2, #27
 800b382:	bf44      	itt	mi
 800b384:	2320      	movmi	r3, #32
 800b386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b38a:	0713      	lsls	r3, r2, #28
 800b38c:	bf44      	itt	mi
 800b38e:	232b      	movmi	r3, #43	; 0x2b
 800b390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b394:	f89a 3000 	ldrb.w	r3, [sl]
 800b398:	2b2a      	cmp	r3, #42	; 0x2a
 800b39a:	d015      	beq.n	800b3c8 <_vfiprintf_r+0x13c>
 800b39c:	4654      	mov	r4, sl
 800b39e:	2000      	movs	r0, #0
 800b3a0:	f04f 0c0a 	mov.w	ip, #10
 800b3a4:	9a07      	ldr	r2, [sp, #28]
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3ac:	3b30      	subs	r3, #48	; 0x30
 800b3ae:	2b09      	cmp	r3, #9
 800b3b0:	d94e      	bls.n	800b450 <_vfiprintf_r+0x1c4>
 800b3b2:	b1b0      	cbz	r0, 800b3e2 <_vfiprintf_r+0x156>
 800b3b4:	9207      	str	r2, [sp, #28]
 800b3b6:	e014      	b.n	800b3e2 <_vfiprintf_r+0x156>
 800b3b8:	eba0 0308 	sub.w	r3, r0, r8
 800b3bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	46a2      	mov	sl, r4
 800b3c4:	9304      	str	r3, [sp, #16]
 800b3c6:	e7d2      	b.n	800b36e <_vfiprintf_r+0xe2>
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	1d19      	adds	r1, r3, #4
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	9103      	str	r1, [sp, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfbb      	ittet	lt
 800b3d4:	425b      	neglt	r3, r3
 800b3d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b3da:	9307      	strge	r3, [sp, #28]
 800b3dc:	9307      	strlt	r3, [sp, #28]
 800b3de:	bfb8      	it	lt
 800b3e0:	9204      	strlt	r2, [sp, #16]
 800b3e2:	7823      	ldrb	r3, [r4, #0]
 800b3e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b3e6:	d10c      	bne.n	800b402 <_vfiprintf_r+0x176>
 800b3e8:	7863      	ldrb	r3, [r4, #1]
 800b3ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ec:	d135      	bne.n	800b45a <_vfiprintf_r+0x1ce>
 800b3ee:	9b03      	ldr	r3, [sp, #12]
 800b3f0:	3402      	adds	r4, #2
 800b3f2:	1d1a      	adds	r2, r3, #4
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	9203      	str	r2, [sp, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bfb8      	it	lt
 800b3fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b400:	9305      	str	r3, [sp, #20]
 800b402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4e8 <_vfiprintf_r+0x25c>
 800b406:	2203      	movs	r2, #3
 800b408:	4650      	mov	r0, sl
 800b40a:	7821      	ldrb	r1, [r4, #0]
 800b40c:	f000 fcea 	bl	800bde4 <memchr>
 800b410:	b140      	cbz	r0, 800b424 <_vfiprintf_r+0x198>
 800b412:	2340      	movs	r3, #64	; 0x40
 800b414:	eba0 000a 	sub.w	r0, r0, sl
 800b418:	fa03 f000 	lsl.w	r0, r3, r0
 800b41c:	9b04      	ldr	r3, [sp, #16]
 800b41e:	3401      	adds	r4, #1
 800b420:	4303      	orrs	r3, r0
 800b422:	9304      	str	r3, [sp, #16]
 800b424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b428:	2206      	movs	r2, #6
 800b42a:	482c      	ldr	r0, [pc, #176]	; (800b4dc <_vfiprintf_r+0x250>)
 800b42c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b430:	f000 fcd8 	bl	800bde4 <memchr>
 800b434:	2800      	cmp	r0, #0
 800b436:	d03f      	beq.n	800b4b8 <_vfiprintf_r+0x22c>
 800b438:	4b29      	ldr	r3, [pc, #164]	; (800b4e0 <_vfiprintf_r+0x254>)
 800b43a:	bb1b      	cbnz	r3, 800b484 <_vfiprintf_r+0x1f8>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	3307      	adds	r3, #7
 800b440:	f023 0307 	bic.w	r3, r3, #7
 800b444:	3308      	adds	r3, #8
 800b446:	9303      	str	r3, [sp, #12]
 800b448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44a:	443b      	add	r3, r7
 800b44c:	9309      	str	r3, [sp, #36]	; 0x24
 800b44e:	e767      	b.n	800b320 <_vfiprintf_r+0x94>
 800b450:	460c      	mov	r4, r1
 800b452:	2001      	movs	r0, #1
 800b454:	fb0c 3202 	mla	r2, ip, r2, r3
 800b458:	e7a5      	b.n	800b3a6 <_vfiprintf_r+0x11a>
 800b45a:	2300      	movs	r3, #0
 800b45c:	f04f 0c0a 	mov.w	ip, #10
 800b460:	4619      	mov	r1, r3
 800b462:	3401      	adds	r4, #1
 800b464:	9305      	str	r3, [sp, #20]
 800b466:	4620      	mov	r0, r4
 800b468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b46c:	3a30      	subs	r2, #48	; 0x30
 800b46e:	2a09      	cmp	r2, #9
 800b470:	d903      	bls.n	800b47a <_vfiprintf_r+0x1ee>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0c5      	beq.n	800b402 <_vfiprintf_r+0x176>
 800b476:	9105      	str	r1, [sp, #20]
 800b478:	e7c3      	b.n	800b402 <_vfiprintf_r+0x176>
 800b47a:	4604      	mov	r4, r0
 800b47c:	2301      	movs	r3, #1
 800b47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b482:	e7f0      	b.n	800b466 <_vfiprintf_r+0x1da>
 800b484:	ab03      	add	r3, sp, #12
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	462a      	mov	r2, r5
 800b48a:	4630      	mov	r0, r6
 800b48c:	4b15      	ldr	r3, [pc, #84]	; (800b4e4 <_vfiprintf_r+0x258>)
 800b48e:	a904      	add	r1, sp, #16
 800b490:	f3af 8000 	nop.w
 800b494:	4607      	mov	r7, r0
 800b496:	1c78      	adds	r0, r7, #1
 800b498:	d1d6      	bne.n	800b448 <_vfiprintf_r+0x1bc>
 800b49a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b49c:	07d9      	lsls	r1, r3, #31
 800b49e:	d405      	bmi.n	800b4ac <_vfiprintf_r+0x220>
 800b4a0:	89ab      	ldrh	r3, [r5, #12]
 800b4a2:	059a      	lsls	r2, r3, #22
 800b4a4:	d402      	bmi.n	800b4ac <_vfiprintf_r+0x220>
 800b4a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4a8:	f000 fc37 	bl	800bd1a <__retarget_lock_release_recursive>
 800b4ac:	89ab      	ldrh	r3, [r5, #12]
 800b4ae:	065b      	lsls	r3, r3, #25
 800b4b0:	f53f af12 	bmi.w	800b2d8 <_vfiprintf_r+0x4c>
 800b4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4b6:	e711      	b.n	800b2dc <_vfiprintf_r+0x50>
 800b4b8:	ab03      	add	r3, sp, #12
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	462a      	mov	r2, r5
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4b08      	ldr	r3, [pc, #32]	; (800b4e4 <_vfiprintf_r+0x258>)
 800b4c2:	a904      	add	r1, sp, #16
 800b4c4:	f000 f882 	bl	800b5cc <_printf_i>
 800b4c8:	e7e4      	b.n	800b494 <_vfiprintf_r+0x208>
 800b4ca:	bf00      	nop
 800b4cc:	0800d544 	.word	0x0800d544
 800b4d0:	0800d564 	.word	0x0800d564
 800b4d4:	0800d524 	.word	0x0800d524
 800b4d8:	0800d4f1 	.word	0x0800d4f1
 800b4dc:	0800d4fb 	.word	0x0800d4fb
 800b4e0:	00000000 	.word	0x00000000
 800b4e4:	0800b267 	.word	0x0800b267
 800b4e8:	0800d4f7 	.word	0x0800d4f7

0800b4ec <_printf_common>:
 800b4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	4616      	mov	r6, r2
 800b4f2:	4699      	mov	r9, r3
 800b4f4:	688a      	ldr	r2, [r1, #8]
 800b4f6:	690b      	ldr	r3, [r1, #16]
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	bfb8      	it	lt
 800b4fe:	4613      	movlt	r3, r2
 800b500:	6033      	str	r3, [r6, #0]
 800b502:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b506:	460c      	mov	r4, r1
 800b508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b50c:	b10a      	cbz	r2, 800b512 <_printf_common+0x26>
 800b50e:	3301      	adds	r3, #1
 800b510:	6033      	str	r3, [r6, #0]
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	0699      	lsls	r1, r3, #26
 800b516:	bf42      	ittt	mi
 800b518:	6833      	ldrmi	r3, [r6, #0]
 800b51a:	3302      	addmi	r3, #2
 800b51c:	6033      	strmi	r3, [r6, #0]
 800b51e:	6825      	ldr	r5, [r4, #0]
 800b520:	f015 0506 	ands.w	r5, r5, #6
 800b524:	d106      	bne.n	800b534 <_printf_common+0x48>
 800b526:	f104 0a19 	add.w	sl, r4, #25
 800b52a:	68e3      	ldr	r3, [r4, #12]
 800b52c:	6832      	ldr	r2, [r6, #0]
 800b52e:	1a9b      	subs	r3, r3, r2
 800b530:	42ab      	cmp	r3, r5
 800b532:	dc28      	bgt.n	800b586 <_printf_common+0x9a>
 800b534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b538:	1e13      	subs	r3, r2, #0
 800b53a:	6822      	ldr	r2, [r4, #0]
 800b53c:	bf18      	it	ne
 800b53e:	2301      	movne	r3, #1
 800b540:	0692      	lsls	r2, r2, #26
 800b542:	d42d      	bmi.n	800b5a0 <_printf_common+0xb4>
 800b544:	4649      	mov	r1, r9
 800b546:	4638      	mov	r0, r7
 800b548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b54c:	47c0      	blx	r8
 800b54e:	3001      	adds	r0, #1
 800b550:	d020      	beq.n	800b594 <_printf_common+0xa8>
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	68e5      	ldr	r5, [r4, #12]
 800b556:	f003 0306 	and.w	r3, r3, #6
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	bf18      	it	ne
 800b55e:	2500      	movne	r5, #0
 800b560:	6832      	ldr	r2, [r6, #0]
 800b562:	f04f 0600 	mov.w	r6, #0
 800b566:	68a3      	ldr	r3, [r4, #8]
 800b568:	bf08      	it	eq
 800b56a:	1aad      	subeq	r5, r5, r2
 800b56c:	6922      	ldr	r2, [r4, #16]
 800b56e:	bf08      	it	eq
 800b570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b574:	4293      	cmp	r3, r2
 800b576:	bfc4      	itt	gt
 800b578:	1a9b      	subgt	r3, r3, r2
 800b57a:	18ed      	addgt	r5, r5, r3
 800b57c:	341a      	adds	r4, #26
 800b57e:	42b5      	cmp	r5, r6
 800b580:	d11a      	bne.n	800b5b8 <_printf_common+0xcc>
 800b582:	2000      	movs	r0, #0
 800b584:	e008      	b.n	800b598 <_printf_common+0xac>
 800b586:	2301      	movs	r3, #1
 800b588:	4652      	mov	r2, sl
 800b58a:	4649      	mov	r1, r9
 800b58c:	4638      	mov	r0, r7
 800b58e:	47c0      	blx	r8
 800b590:	3001      	adds	r0, #1
 800b592:	d103      	bne.n	800b59c <_printf_common+0xb0>
 800b594:	f04f 30ff 	mov.w	r0, #4294967295
 800b598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59c:	3501      	adds	r5, #1
 800b59e:	e7c4      	b.n	800b52a <_printf_common+0x3e>
 800b5a0:	2030      	movs	r0, #48	; 0x30
 800b5a2:	18e1      	adds	r1, r4, r3
 800b5a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5ae:	4422      	add	r2, r4
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5b6:	e7c5      	b.n	800b544 <_printf_common+0x58>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	4622      	mov	r2, r4
 800b5bc:	4649      	mov	r1, r9
 800b5be:	4638      	mov	r0, r7
 800b5c0:	47c0      	blx	r8
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	d0e6      	beq.n	800b594 <_printf_common+0xa8>
 800b5c6:	3601      	adds	r6, #1
 800b5c8:	e7d9      	b.n	800b57e <_printf_common+0x92>
	...

0800b5cc <_printf_i>:
 800b5cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	7e27      	ldrb	r7, [r4, #24]
 800b5d4:	4691      	mov	r9, r2
 800b5d6:	2f78      	cmp	r7, #120	; 0x78
 800b5d8:	4680      	mov	r8, r0
 800b5da:	469a      	mov	sl, r3
 800b5dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b5de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5e2:	d807      	bhi.n	800b5f4 <_printf_i+0x28>
 800b5e4:	2f62      	cmp	r7, #98	; 0x62
 800b5e6:	d80a      	bhi.n	800b5fe <_printf_i+0x32>
 800b5e8:	2f00      	cmp	r7, #0
 800b5ea:	f000 80d9 	beq.w	800b7a0 <_printf_i+0x1d4>
 800b5ee:	2f58      	cmp	r7, #88	; 0x58
 800b5f0:	f000 80a4 	beq.w	800b73c <_printf_i+0x170>
 800b5f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5fc:	e03a      	b.n	800b674 <_printf_i+0xa8>
 800b5fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b602:	2b15      	cmp	r3, #21
 800b604:	d8f6      	bhi.n	800b5f4 <_printf_i+0x28>
 800b606:	a001      	add	r0, pc, #4	; (adr r0, 800b60c <_printf_i+0x40>)
 800b608:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b60c:	0800b665 	.word	0x0800b665
 800b610:	0800b679 	.word	0x0800b679
 800b614:	0800b5f5 	.word	0x0800b5f5
 800b618:	0800b5f5 	.word	0x0800b5f5
 800b61c:	0800b5f5 	.word	0x0800b5f5
 800b620:	0800b5f5 	.word	0x0800b5f5
 800b624:	0800b679 	.word	0x0800b679
 800b628:	0800b5f5 	.word	0x0800b5f5
 800b62c:	0800b5f5 	.word	0x0800b5f5
 800b630:	0800b5f5 	.word	0x0800b5f5
 800b634:	0800b5f5 	.word	0x0800b5f5
 800b638:	0800b787 	.word	0x0800b787
 800b63c:	0800b6a9 	.word	0x0800b6a9
 800b640:	0800b769 	.word	0x0800b769
 800b644:	0800b5f5 	.word	0x0800b5f5
 800b648:	0800b5f5 	.word	0x0800b5f5
 800b64c:	0800b7a9 	.word	0x0800b7a9
 800b650:	0800b5f5 	.word	0x0800b5f5
 800b654:	0800b6a9 	.word	0x0800b6a9
 800b658:	0800b5f5 	.word	0x0800b5f5
 800b65c:	0800b5f5 	.word	0x0800b5f5
 800b660:	0800b771 	.word	0x0800b771
 800b664:	680b      	ldr	r3, [r1, #0]
 800b666:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b66a:	1d1a      	adds	r2, r3, #4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	600a      	str	r2, [r1, #0]
 800b670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b674:	2301      	movs	r3, #1
 800b676:	e0a4      	b.n	800b7c2 <_printf_i+0x1f6>
 800b678:	6825      	ldr	r5, [r4, #0]
 800b67a:	6808      	ldr	r0, [r1, #0]
 800b67c:	062e      	lsls	r6, r5, #24
 800b67e:	f100 0304 	add.w	r3, r0, #4
 800b682:	d50a      	bpl.n	800b69a <_printf_i+0xce>
 800b684:	6805      	ldr	r5, [r0, #0]
 800b686:	600b      	str	r3, [r1, #0]
 800b688:	2d00      	cmp	r5, #0
 800b68a:	da03      	bge.n	800b694 <_printf_i+0xc8>
 800b68c:	232d      	movs	r3, #45	; 0x2d
 800b68e:	426d      	negs	r5, r5
 800b690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b694:	230a      	movs	r3, #10
 800b696:	485e      	ldr	r0, [pc, #376]	; (800b810 <_printf_i+0x244>)
 800b698:	e019      	b.n	800b6ce <_printf_i+0x102>
 800b69a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b69e:	6805      	ldr	r5, [r0, #0]
 800b6a0:	600b      	str	r3, [r1, #0]
 800b6a2:	bf18      	it	ne
 800b6a4:	b22d      	sxthne	r5, r5
 800b6a6:	e7ef      	b.n	800b688 <_printf_i+0xbc>
 800b6a8:	680b      	ldr	r3, [r1, #0]
 800b6aa:	6825      	ldr	r5, [r4, #0]
 800b6ac:	1d18      	adds	r0, r3, #4
 800b6ae:	6008      	str	r0, [r1, #0]
 800b6b0:	0628      	lsls	r0, r5, #24
 800b6b2:	d501      	bpl.n	800b6b8 <_printf_i+0xec>
 800b6b4:	681d      	ldr	r5, [r3, #0]
 800b6b6:	e002      	b.n	800b6be <_printf_i+0xf2>
 800b6b8:	0669      	lsls	r1, r5, #25
 800b6ba:	d5fb      	bpl.n	800b6b4 <_printf_i+0xe8>
 800b6bc:	881d      	ldrh	r5, [r3, #0]
 800b6be:	2f6f      	cmp	r7, #111	; 0x6f
 800b6c0:	bf0c      	ite	eq
 800b6c2:	2308      	moveq	r3, #8
 800b6c4:	230a      	movne	r3, #10
 800b6c6:	4852      	ldr	r0, [pc, #328]	; (800b810 <_printf_i+0x244>)
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6ce:	6866      	ldr	r6, [r4, #4]
 800b6d0:	2e00      	cmp	r6, #0
 800b6d2:	bfa8      	it	ge
 800b6d4:	6821      	ldrge	r1, [r4, #0]
 800b6d6:	60a6      	str	r6, [r4, #8]
 800b6d8:	bfa4      	itt	ge
 800b6da:	f021 0104 	bicge.w	r1, r1, #4
 800b6de:	6021      	strge	r1, [r4, #0]
 800b6e0:	b90d      	cbnz	r5, 800b6e6 <_printf_i+0x11a>
 800b6e2:	2e00      	cmp	r6, #0
 800b6e4:	d04d      	beq.n	800b782 <_printf_i+0x1b6>
 800b6e6:	4616      	mov	r6, r2
 800b6e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6ec:	fb03 5711 	mls	r7, r3, r1, r5
 800b6f0:	5dc7      	ldrb	r7, [r0, r7]
 800b6f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6f6:	462f      	mov	r7, r5
 800b6f8:	42bb      	cmp	r3, r7
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	d9f4      	bls.n	800b6e8 <_printf_i+0x11c>
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	d10b      	bne.n	800b71a <_printf_i+0x14e>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	07df      	lsls	r7, r3, #31
 800b706:	d508      	bpl.n	800b71a <_printf_i+0x14e>
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	6861      	ldr	r1, [r4, #4]
 800b70c:	4299      	cmp	r1, r3
 800b70e:	bfde      	ittt	le
 800b710:	2330      	movle	r3, #48	; 0x30
 800b712:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b716:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b71a:	1b92      	subs	r2, r2, r6
 800b71c:	6122      	str	r2, [r4, #16]
 800b71e:	464b      	mov	r3, r9
 800b720:	4621      	mov	r1, r4
 800b722:	4640      	mov	r0, r8
 800b724:	f8cd a000 	str.w	sl, [sp]
 800b728:	aa03      	add	r2, sp, #12
 800b72a:	f7ff fedf 	bl	800b4ec <_printf_common>
 800b72e:	3001      	adds	r0, #1
 800b730:	d14c      	bne.n	800b7cc <_printf_i+0x200>
 800b732:	f04f 30ff 	mov.w	r0, #4294967295
 800b736:	b004      	add	sp, #16
 800b738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73c:	4834      	ldr	r0, [pc, #208]	; (800b810 <_printf_i+0x244>)
 800b73e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b742:	680e      	ldr	r6, [r1, #0]
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	f856 5b04 	ldr.w	r5, [r6], #4
 800b74a:	061f      	lsls	r7, r3, #24
 800b74c:	600e      	str	r6, [r1, #0]
 800b74e:	d514      	bpl.n	800b77a <_printf_i+0x1ae>
 800b750:	07d9      	lsls	r1, r3, #31
 800b752:	bf44      	itt	mi
 800b754:	f043 0320 	orrmi.w	r3, r3, #32
 800b758:	6023      	strmi	r3, [r4, #0]
 800b75a:	b91d      	cbnz	r5, 800b764 <_printf_i+0x198>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	f023 0320 	bic.w	r3, r3, #32
 800b762:	6023      	str	r3, [r4, #0]
 800b764:	2310      	movs	r3, #16
 800b766:	e7af      	b.n	800b6c8 <_printf_i+0xfc>
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	f043 0320 	orr.w	r3, r3, #32
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	2378      	movs	r3, #120	; 0x78
 800b772:	4828      	ldr	r0, [pc, #160]	; (800b814 <_printf_i+0x248>)
 800b774:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b778:	e7e3      	b.n	800b742 <_printf_i+0x176>
 800b77a:	065e      	lsls	r6, r3, #25
 800b77c:	bf48      	it	mi
 800b77e:	b2ad      	uxthmi	r5, r5
 800b780:	e7e6      	b.n	800b750 <_printf_i+0x184>
 800b782:	4616      	mov	r6, r2
 800b784:	e7bb      	b.n	800b6fe <_printf_i+0x132>
 800b786:	680b      	ldr	r3, [r1, #0]
 800b788:	6826      	ldr	r6, [r4, #0]
 800b78a:	1d1d      	adds	r5, r3, #4
 800b78c:	6960      	ldr	r0, [r4, #20]
 800b78e:	600d      	str	r5, [r1, #0]
 800b790:	0635      	lsls	r5, r6, #24
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	d501      	bpl.n	800b79a <_printf_i+0x1ce>
 800b796:	6018      	str	r0, [r3, #0]
 800b798:	e002      	b.n	800b7a0 <_printf_i+0x1d4>
 800b79a:	0671      	lsls	r1, r6, #25
 800b79c:	d5fb      	bpl.n	800b796 <_printf_i+0x1ca>
 800b79e:	8018      	strh	r0, [r3, #0]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4616      	mov	r6, r2
 800b7a4:	6123      	str	r3, [r4, #16]
 800b7a6:	e7ba      	b.n	800b71e <_printf_i+0x152>
 800b7a8:	680b      	ldr	r3, [r1, #0]
 800b7aa:	1d1a      	adds	r2, r3, #4
 800b7ac:	600a      	str	r2, [r1, #0]
 800b7ae:	681e      	ldr	r6, [r3, #0]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	6862      	ldr	r2, [r4, #4]
 800b7b6:	f000 fb15 	bl	800bde4 <memchr>
 800b7ba:	b108      	cbz	r0, 800b7c0 <_printf_i+0x1f4>
 800b7bc:	1b80      	subs	r0, r0, r6
 800b7be:	6060      	str	r0, [r4, #4]
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ca:	e7a8      	b.n	800b71e <_printf_i+0x152>
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	4649      	mov	r1, r9
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	47d0      	blx	sl
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	d0ab      	beq.n	800b732 <_printf_i+0x166>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	079b      	lsls	r3, r3, #30
 800b7de:	d413      	bmi.n	800b808 <_printf_i+0x23c>
 800b7e0:	68e0      	ldr	r0, [r4, #12]
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	4298      	cmp	r0, r3
 800b7e6:	bfb8      	it	lt
 800b7e8:	4618      	movlt	r0, r3
 800b7ea:	e7a4      	b.n	800b736 <_printf_i+0x16a>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	47d0      	blx	sl
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d09b      	beq.n	800b732 <_printf_i+0x166>
 800b7fa:	3501      	adds	r5, #1
 800b7fc:	68e3      	ldr	r3, [r4, #12]
 800b7fe:	9903      	ldr	r1, [sp, #12]
 800b800:	1a5b      	subs	r3, r3, r1
 800b802:	42ab      	cmp	r3, r5
 800b804:	dcf2      	bgt.n	800b7ec <_printf_i+0x220>
 800b806:	e7eb      	b.n	800b7e0 <_printf_i+0x214>
 800b808:	2500      	movs	r5, #0
 800b80a:	f104 0619 	add.w	r6, r4, #25
 800b80e:	e7f5      	b.n	800b7fc <_printf_i+0x230>
 800b810:	0800d502 	.word	0x0800d502
 800b814:	0800d513 	.word	0x0800d513

0800b818 <__swbuf_r>:
 800b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81a:	460e      	mov	r6, r1
 800b81c:	4614      	mov	r4, r2
 800b81e:	4605      	mov	r5, r0
 800b820:	b118      	cbz	r0, 800b82a <__swbuf_r+0x12>
 800b822:	6983      	ldr	r3, [r0, #24]
 800b824:	b90b      	cbnz	r3, 800b82a <__swbuf_r+0x12>
 800b826:	f000 f9d9 	bl	800bbdc <__sinit>
 800b82a:	4b21      	ldr	r3, [pc, #132]	; (800b8b0 <__swbuf_r+0x98>)
 800b82c:	429c      	cmp	r4, r3
 800b82e:	d12b      	bne.n	800b888 <__swbuf_r+0x70>
 800b830:	686c      	ldr	r4, [r5, #4]
 800b832:	69a3      	ldr	r3, [r4, #24]
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	89a3      	ldrh	r3, [r4, #12]
 800b838:	071a      	lsls	r2, r3, #28
 800b83a:	d52f      	bpl.n	800b89c <__swbuf_r+0x84>
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	b36b      	cbz	r3, 800b89c <__swbuf_r+0x84>
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	6820      	ldr	r0, [r4, #0]
 800b844:	b2f6      	uxtb	r6, r6
 800b846:	1ac0      	subs	r0, r0, r3
 800b848:	6963      	ldr	r3, [r4, #20]
 800b84a:	4637      	mov	r7, r6
 800b84c:	4283      	cmp	r3, r0
 800b84e:	dc04      	bgt.n	800b85a <__swbuf_r+0x42>
 800b850:	4621      	mov	r1, r4
 800b852:	4628      	mov	r0, r5
 800b854:	f000 f92e 	bl	800bab4 <_fflush_r>
 800b858:	bb30      	cbnz	r0, 800b8a8 <__swbuf_r+0x90>
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	3001      	adds	r0, #1
 800b85e:	3b01      	subs	r3, #1
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	1c5a      	adds	r2, r3, #1
 800b866:	6022      	str	r2, [r4, #0]
 800b868:	701e      	strb	r6, [r3, #0]
 800b86a:	6963      	ldr	r3, [r4, #20]
 800b86c:	4283      	cmp	r3, r0
 800b86e:	d004      	beq.n	800b87a <__swbuf_r+0x62>
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	07db      	lsls	r3, r3, #31
 800b874:	d506      	bpl.n	800b884 <__swbuf_r+0x6c>
 800b876:	2e0a      	cmp	r6, #10
 800b878:	d104      	bne.n	800b884 <__swbuf_r+0x6c>
 800b87a:	4621      	mov	r1, r4
 800b87c:	4628      	mov	r0, r5
 800b87e:	f000 f919 	bl	800bab4 <_fflush_r>
 800b882:	b988      	cbnz	r0, 800b8a8 <__swbuf_r+0x90>
 800b884:	4638      	mov	r0, r7
 800b886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <__swbuf_r+0x9c>)
 800b88a:	429c      	cmp	r4, r3
 800b88c:	d101      	bne.n	800b892 <__swbuf_r+0x7a>
 800b88e:	68ac      	ldr	r4, [r5, #8]
 800b890:	e7cf      	b.n	800b832 <__swbuf_r+0x1a>
 800b892:	4b09      	ldr	r3, [pc, #36]	; (800b8b8 <__swbuf_r+0xa0>)
 800b894:	429c      	cmp	r4, r3
 800b896:	bf08      	it	eq
 800b898:	68ec      	ldreq	r4, [r5, #12]
 800b89a:	e7ca      	b.n	800b832 <__swbuf_r+0x1a>
 800b89c:	4621      	mov	r1, r4
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f000 f80c 	bl	800b8bc <__swsetup_r>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d0cb      	beq.n	800b840 <__swbuf_r+0x28>
 800b8a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b8ac:	e7ea      	b.n	800b884 <__swbuf_r+0x6c>
 800b8ae:	bf00      	nop
 800b8b0:	0800d544 	.word	0x0800d544
 800b8b4:	0800d564 	.word	0x0800d564
 800b8b8:	0800d524 	.word	0x0800d524

0800b8bc <__swsetup_r>:
 800b8bc:	4b32      	ldr	r3, [pc, #200]	; (800b988 <__swsetup_r+0xcc>)
 800b8be:	b570      	push	{r4, r5, r6, lr}
 800b8c0:	681d      	ldr	r5, [r3, #0]
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	b125      	cbz	r5, 800b8d2 <__swsetup_r+0x16>
 800b8c8:	69ab      	ldr	r3, [r5, #24]
 800b8ca:	b913      	cbnz	r3, 800b8d2 <__swsetup_r+0x16>
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f000 f985 	bl	800bbdc <__sinit>
 800b8d2:	4b2e      	ldr	r3, [pc, #184]	; (800b98c <__swsetup_r+0xd0>)
 800b8d4:	429c      	cmp	r4, r3
 800b8d6:	d10f      	bne.n	800b8f8 <__swsetup_r+0x3c>
 800b8d8:	686c      	ldr	r4, [r5, #4]
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8e0:	0719      	lsls	r1, r3, #28
 800b8e2:	d42c      	bmi.n	800b93e <__swsetup_r+0x82>
 800b8e4:	06dd      	lsls	r5, r3, #27
 800b8e6:	d411      	bmi.n	800b90c <__swsetup_r+0x50>
 800b8e8:	2309      	movs	r3, #9
 800b8ea:	6033      	str	r3, [r6, #0]
 800b8ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	e03e      	b.n	800b976 <__swsetup_r+0xba>
 800b8f8:	4b25      	ldr	r3, [pc, #148]	; (800b990 <__swsetup_r+0xd4>)
 800b8fa:	429c      	cmp	r4, r3
 800b8fc:	d101      	bne.n	800b902 <__swsetup_r+0x46>
 800b8fe:	68ac      	ldr	r4, [r5, #8]
 800b900:	e7eb      	b.n	800b8da <__swsetup_r+0x1e>
 800b902:	4b24      	ldr	r3, [pc, #144]	; (800b994 <__swsetup_r+0xd8>)
 800b904:	429c      	cmp	r4, r3
 800b906:	bf08      	it	eq
 800b908:	68ec      	ldreq	r4, [r5, #12]
 800b90a:	e7e6      	b.n	800b8da <__swsetup_r+0x1e>
 800b90c:	0758      	lsls	r0, r3, #29
 800b90e:	d512      	bpl.n	800b936 <__swsetup_r+0x7a>
 800b910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b912:	b141      	cbz	r1, 800b926 <__swsetup_r+0x6a>
 800b914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b918:	4299      	cmp	r1, r3
 800b91a:	d002      	beq.n	800b922 <__swsetup_r+0x66>
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7ff f8d5 	bl	800aacc <_free_r>
 800b922:	2300      	movs	r3, #0
 800b924:	6363      	str	r3, [r4, #52]	; 0x34
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	2300      	movs	r3, #0
 800b930:	6063      	str	r3, [r4, #4]
 800b932:	6923      	ldr	r3, [r4, #16]
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	f043 0308 	orr.w	r3, r3, #8
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	6923      	ldr	r3, [r4, #16]
 800b940:	b94b      	cbnz	r3, 800b956 <__swsetup_r+0x9a>
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b94c:	d003      	beq.n	800b956 <__swsetup_r+0x9a>
 800b94e:	4621      	mov	r1, r4
 800b950:	4630      	mov	r0, r6
 800b952:	f000 fa07 	bl	800bd64 <__smakebuf_r>
 800b956:	89a0      	ldrh	r0, [r4, #12]
 800b958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b95c:	f010 0301 	ands.w	r3, r0, #1
 800b960:	d00a      	beq.n	800b978 <__swsetup_r+0xbc>
 800b962:	2300      	movs	r3, #0
 800b964:	60a3      	str	r3, [r4, #8]
 800b966:	6963      	ldr	r3, [r4, #20]
 800b968:	425b      	negs	r3, r3
 800b96a:	61a3      	str	r3, [r4, #24]
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	b943      	cbnz	r3, 800b982 <__swsetup_r+0xc6>
 800b970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b974:	d1ba      	bne.n	800b8ec <__swsetup_r+0x30>
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	0781      	lsls	r1, r0, #30
 800b97a:	bf58      	it	pl
 800b97c:	6963      	ldrpl	r3, [r4, #20]
 800b97e:	60a3      	str	r3, [r4, #8]
 800b980:	e7f4      	b.n	800b96c <__swsetup_r+0xb0>
 800b982:	2000      	movs	r0, #0
 800b984:	e7f7      	b.n	800b976 <__swsetup_r+0xba>
 800b986:	bf00      	nop
 800b988:	20000024 	.word	0x20000024
 800b98c:	0800d544 	.word	0x0800d544
 800b990:	0800d564 	.word	0x0800d564
 800b994:	0800d524 	.word	0x0800d524

0800b998 <abort>:
 800b998:	2006      	movs	r0, #6
 800b99a:	b508      	push	{r3, lr}
 800b99c:	f000 fa98 	bl	800bed0 <raise>
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	f7f8 f936 	bl	8003c12 <_exit>
	...

0800b9a8 <__sflush_r>:
 800b9a8:	898a      	ldrh	r2, [r1, #12]
 800b9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	0710      	lsls	r0, r2, #28
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	d458      	bmi.n	800ba68 <__sflush_r+0xc0>
 800b9b6:	684b      	ldr	r3, [r1, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	dc05      	bgt.n	800b9c8 <__sflush_r+0x20>
 800b9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	dc02      	bgt.n	800b9c8 <__sflush_r+0x20>
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9ca:	2e00      	cmp	r6, #0
 800b9cc:	d0f9      	beq.n	800b9c2 <__sflush_r+0x1a>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9d4:	682f      	ldr	r7, [r5, #0]
 800b9d6:	602b      	str	r3, [r5, #0]
 800b9d8:	d032      	beq.n	800ba40 <__sflush_r+0x98>
 800b9da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	075a      	lsls	r2, r3, #29
 800b9e0:	d505      	bpl.n	800b9ee <__sflush_r+0x46>
 800b9e2:	6863      	ldr	r3, [r4, #4]
 800b9e4:	1ac0      	subs	r0, r0, r3
 800b9e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9e8:	b10b      	cbz	r3, 800b9ee <__sflush_r+0x46>
 800b9ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9ec:	1ac0      	subs	r0, r0, r3
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	6a21      	ldr	r1, [r4, #32]
 800b9f8:	47b0      	blx	r6
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	d106      	bne.n	800ba0e <__sflush_r+0x66>
 800ba00:	6829      	ldr	r1, [r5, #0]
 800ba02:	291d      	cmp	r1, #29
 800ba04:	d82c      	bhi.n	800ba60 <__sflush_r+0xb8>
 800ba06:	4a2a      	ldr	r2, [pc, #168]	; (800bab0 <__sflush_r+0x108>)
 800ba08:	40ca      	lsrs	r2, r1
 800ba0a:	07d6      	lsls	r6, r2, #31
 800ba0c:	d528      	bpl.n	800ba60 <__sflush_r+0xb8>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	6062      	str	r2, [r4, #4]
 800ba12:	6922      	ldr	r2, [r4, #16]
 800ba14:	04d9      	lsls	r1, r3, #19
 800ba16:	6022      	str	r2, [r4, #0]
 800ba18:	d504      	bpl.n	800ba24 <__sflush_r+0x7c>
 800ba1a:	1c42      	adds	r2, r0, #1
 800ba1c:	d101      	bne.n	800ba22 <__sflush_r+0x7a>
 800ba1e:	682b      	ldr	r3, [r5, #0]
 800ba20:	b903      	cbnz	r3, 800ba24 <__sflush_r+0x7c>
 800ba22:	6560      	str	r0, [r4, #84]	; 0x54
 800ba24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba26:	602f      	str	r7, [r5, #0]
 800ba28:	2900      	cmp	r1, #0
 800ba2a:	d0ca      	beq.n	800b9c2 <__sflush_r+0x1a>
 800ba2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba30:	4299      	cmp	r1, r3
 800ba32:	d002      	beq.n	800ba3a <__sflush_r+0x92>
 800ba34:	4628      	mov	r0, r5
 800ba36:	f7ff f849 	bl	800aacc <_free_r>
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ba3e:	e7c1      	b.n	800b9c4 <__sflush_r+0x1c>
 800ba40:	6a21      	ldr	r1, [r4, #32]
 800ba42:	2301      	movs	r3, #1
 800ba44:	4628      	mov	r0, r5
 800ba46:	47b0      	blx	r6
 800ba48:	1c41      	adds	r1, r0, #1
 800ba4a:	d1c7      	bne.n	800b9dc <__sflush_r+0x34>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0c4      	beq.n	800b9dc <__sflush_r+0x34>
 800ba52:	2b1d      	cmp	r3, #29
 800ba54:	d001      	beq.n	800ba5a <__sflush_r+0xb2>
 800ba56:	2b16      	cmp	r3, #22
 800ba58:	d101      	bne.n	800ba5e <__sflush_r+0xb6>
 800ba5a:	602f      	str	r7, [r5, #0]
 800ba5c:	e7b1      	b.n	800b9c2 <__sflush_r+0x1a>
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba64:	81a3      	strh	r3, [r4, #12]
 800ba66:	e7ad      	b.n	800b9c4 <__sflush_r+0x1c>
 800ba68:	690f      	ldr	r7, [r1, #16]
 800ba6a:	2f00      	cmp	r7, #0
 800ba6c:	d0a9      	beq.n	800b9c2 <__sflush_r+0x1a>
 800ba6e:	0793      	lsls	r3, r2, #30
 800ba70:	bf18      	it	ne
 800ba72:	2300      	movne	r3, #0
 800ba74:	680e      	ldr	r6, [r1, #0]
 800ba76:	bf08      	it	eq
 800ba78:	694b      	ldreq	r3, [r1, #20]
 800ba7a:	eba6 0807 	sub.w	r8, r6, r7
 800ba7e:	600f      	str	r7, [r1, #0]
 800ba80:	608b      	str	r3, [r1, #8]
 800ba82:	f1b8 0f00 	cmp.w	r8, #0
 800ba86:	dd9c      	ble.n	800b9c2 <__sflush_r+0x1a>
 800ba88:	4643      	mov	r3, r8
 800ba8a:	463a      	mov	r2, r7
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	6a21      	ldr	r1, [r4, #32]
 800ba90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba92:	47b0      	blx	r6
 800ba94:	2800      	cmp	r0, #0
 800ba96:	dc06      	bgt.n	800baa6 <__sflush_r+0xfe>
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baa2:	81a3      	strh	r3, [r4, #12]
 800baa4:	e78e      	b.n	800b9c4 <__sflush_r+0x1c>
 800baa6:	4407      	add	r7, r0
 800baa8:	eba8 0800 	sub.w	r8, r8, r0
 800baac:	e7e9      	b.n	800ba82 <__sflush_r+0xda>
 800baae:	bf00      	nop
 800bab0:	20400001 	.word	0x20400001

0800bab4 <_fflush_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	690b      	ldr	r3, [r1, #16]
 800bab8:	4605      	mov	r5, r0
 800baba:	460c      	mov	r4, r1
 800babc:	b913      	cbnz	r3, 800bac4 <_fflush_r+0x10>
 800babe:	2500      	movs	r5, #0
 800bac0:	4628      	mov	r0, r5
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	b118      	cbz	r0, 800bace <_fflush_r+0x1a>
 800bac6:	6983      	ldr	r3, [r0, #24]
 800bac8:	b90b      	cbnz	r3, 800bace <_fflush_r+0x1a>
 800baca:	f000 f887 	bl	800bbdc <__sinit>
 800bace:	4b14      	ldr	r3, [pc, #80]	; (800bb20 <_fflush_r+0x6c>)
 800bad0:	429c      	cmp	r4, r3
 800bad2:	d11b      	bne.n	800bb0c <_fflush_r+0x58>
 800bad4:	686c      	ldr	r4, [r5, #4]
 800bad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d0ef      	beq.n	800babe <_fflush_r+0xa>
 800bade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bae0:	07d0      	lsls	r0, r2, #31
 800bae2:	d404      	bmi.n	800baee <_fflush_r+0x3a>
 800bae4:	0599      	lsls	r1, r3, #22
 800bae6:	d402      	bmi.n	800baee <_fflush_r+0x3a>
 800bae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baea:	f000 f915 	bl	800bd18 <__retarget_lock_acquire_recursive>
 800baee:	4628      	mov	r0, r5
 800baf0:	4621      	mov	r1, r4
 800baf2:	f7ff ff59 	bl	800b9a8 <__sflush_r>
 800baf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baf8:	4605      	mov	r5, r0
 800bafa:	07da      	lsls	r2, r3, #31
 800bafc:	d4e0      	bmi.n	800bac0 <_fflush_r+0xc>
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	059b      	lsls	r3, r3, #22
 800bb02:	d4dd      	bmi.n	800bac0 <_fflush_r+0xc>
 800bb04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb06:	f000 f908 	bl	800bd1a <__retarget_lock_release_recursive>
 800bb0a:	e7d9      	b.n	800bac0 <_fflush_r+0xc>
 800bb0c:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <_fflush_r+0x70>)
 800bb0e:	429c      	cmp	r4, r3
 800bb10:	d101      	bne.n	800bb16 <_fflush_r+0x62>
 800bb12:	68ac      	ldr	r4, [r5, #8]
 800bb14:	e7df      	b.n	800bad6 <_fflush_r+0x22>
 800bb16:	4b04      	ldr	r3, [pc, #16]	; (800bb28 <_fflush_r+0x74>)
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	bf08      	it	eq
 800bb1c:	68ec      	ldreq	r4, [r5, #12]
 800bb1e:	e7da      	b.n	800bad6 <_fflush_r+0x22>
 800bb20:	0800d544 	.word	0x0800d544
 800bb24:	0800d564 	.word	0x0800d564
 800bb28:	0800d524 	.word	0x0800d524

0800bb2c <std>:
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	b510      	push	{r4, lr}
 800bb30:	4604      	mov	r4, r0
 800bb32:	e9c0 3300 	strd	r3, r3, [r0]
 800bb36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb3a:	6083      	str	r3, [r0, #8]
 800bb3c:	8181      	strh	r1, [r0, #12]
 800bb3e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb40:	81c2      	strh	r2, [r0, #14]
 800bb42:	6183      	str	r3, [r0, #24]
 800bb44:	4619      	mov	r1, r3
 800bb46:	2208      	movs	r2, #8
 800bb48:	305c      	adds	r0, #92	; 0x5c
 800bb4a:	f7fe ffb7 	bl	800aabc <memset>
 800bb4e:	4b05      	ldr	r3, [pc, #20]	; (800bb64 <std+0x38>)
 800bb50:	6224      	str	r4, [r4, #32]
 800bb52:	6263      	str	r3, [r4, #36]	; 0x24
 800bb54:	4b04      	ldr	r3, [pc, #16]	; (800bb68 <std+0x3c>)
 800bb56:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb58:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <std+0x40>)
 800bb5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb5c:	4b04      	ldr	r3, [pc, #16]	; (800bb70 <std+0x44>)
 800bb5e:	6323      	str	r3, [r4, #48]	; 0x30
 800bb60:	bd10      	pop	{r4, pc}
 800bb62:	bf00      	nop
 800bb64:	0800bf09 	.word	0x0800bf09
 800bb68:	0800bf2b 	.word	0x0800bf2b
 800bb6c:	0800bf63 	.word	0x0800bf63
 800bb70:	0800bf87 	.word	0x0800bf87

0800bb74 <_cleanup_r>:
 800bb74:	4901      	ldr	r1, [pc, #4]	; (800bb7c <_cleanup_r+0x8>)
 800bb76:	f000 b8af 	b.w	800bcd8 <_fwalk_reent>
 800bb7a:	bf00      	nop
 800bb7c:	0800bab5 	.word	0x0800bab5

0800bb80 <__sfmoreglue>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	2568      	movs	r5, #104	; 0x68
 800bb84:	1e4a      	subs	r2, r1, #1
 800bb86:	4355      	muls	r5, r2
 800bb88:	460e      	mov	r6, r1
 800bb8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb8e:	f7fe ffe9 	bl	800ab64 <_malloc_r>
 800bb92:	4604      	mov	r4, r0
 800bb94:	b140      	cbz	r0, 800bba8 <__sfmoreglue+0x28>
 800bb96:	2100      	movs	r1, #0
 800bb98:	e9c0 1600 	strd	r1, r6, [r0]
 800bb9c:	300c      	adds	r0, #12
 800bb9e:	60a0      	str	r0, [r4, #8]
 800bba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bba4:	f7fe ff8a 	bl	800aabc <memset>
 800bba8:	4620      	mov	r0, r4
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}

0800bbac <__sfp_lock_acquire>:
 800bbac:	4801      	ldr	r0, [pc, #4]	; (800bbb4 <__sfp_lock_acquire+0x8>)
 800bbae:	f000 b8b3 	b.w	800bd18 <__retarget_lock_acquire_recursive>
 800bbb2:	bf00      	nop
 800bbb4:	20000524 	.word	0x20000524

0800bbb8 <__sfp_lock_release>:
 800bbb8:	4801      	ldr	r0, [pc, #4]	; (800bbc0 <__sfp_lock_release+0x8>)
 800bbba:	f000 b8ae 	b.w	800bd1a <__retarget_lock_release_recursive>
 800bbbe:	bf00      	nop
 800bbc0:	20000524 	.word	0x20000524

0800bbc4 <__sinit_lock_acquire>:
 800bbc4:	4801      	ldr	r0, [pc, #4]	; (800bbcc <__sinit_lock_acquire+0x8>)
 800bbc6:	f000 b8a7 	b.w	800bd18 <__retarget_lock_acquire_recursive>
 800bbca:	bf00      	nop
 800bbcc:	2000051f 	.word	0x2000051f

0800bbd0 <__sinit_lock_release>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	; (800bbd8 <__sinit_lock_release+0x8>)
 800bbd2:	f000 b8a2 	b.w	800bd1a <__retarget_lock_release_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	2000051f 	.word	0x2000051f

0800bbdc <__sinit>:
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	4604      	mov	r4, r0
 800bbe0:	f7ff fff0 	bl	800bbc4 <__sinit_lock_acquire>
 800bbe4:	69a3      	ldr	r3, [r4, #24]
 800bbe6:	b11b      	cbz	r3, 800bbf0 <__sinit+0x14>
 800bbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbec:	f7ff bff0 	b.w	800bbd0 <__sinit_lock_release>
 800bbf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbf4:	6523      	str	r3, [r4, #80]	; 0x50
 800bbf6:	4b13      	ldr	r3, [pc, #76]	; (800bc44 <__sinit+0x68>)
 800bbf8:	4a13      	ldr	r2, [pc, #76]	; (800bc48 <__sinit+0x6c>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbfe:	42a3      	cmp	r3, r4
 800bc00:	bf08      	it	eq
 800bc02:	2301      	moveq	r3, #1
 800bc04:	4620      	mov	r0, r4
 800bc06:	bf08      	it	eq
 800bc08:	61a3      	streq	r3, [r4, #24]
 800bc0a:	f000 f81f 	bl	800bc4c <__sfp>
 800bc0e:	6060      	str	r0, [r4, #4]
 800bc10:	4620      	mov	r0, r4
 800bc12:	f000 f81b 	bl	800bc4c <__sfp>
 800bc16:	60a0      	str	r0, [r4, #8]
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f000 f817 	bl	800bc4c <__sfp>
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2104      	movs	r1, #4
 800bc22:	60e0      	str	r0, [r4, #12]
 800bc24:	6860      	ldr	r0, [r4, #4]
 800bc26:	f7ff ff81 	bl	800bb2c <std>
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	2109      	movs	r1, #9
 800bc2e:	68a0      	ldr	r0, [r4, #8]
 800bc30:	f7ff ff7c 	bl	800bb2c <std>
 800bc34:	2202      	movs	r2, #2
 800bc36:	2112      	movs	r1, #18
 800bc38:	68e0      	ldr	r0, [r4, #12]
 800bc3a:	f7ff ff77 	bl	800bb2c <std>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	61a3      	str	r3, [r4, #24]
 800bc42:	e7d1      	b.n	800bbe8 <__sinit+0xc>
 800bc44:	0800d338 	.word	0x0800d338
 800bc48:	0800bb75 	.word	0x0800bb75

0800bc4c <__sfp>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	4607      	mov	r7, r0
 800bc50:	f7ff ffac 	bl	800bbac <__sfp_lock_acquire>
 800bc54:	4b1e      	ldr	r3, [pc, #120]	; (800bcd0 <__sfp+0x84>)
 800bc56:	681e      	ldr	r6, [r3, #0]
 800bc58:	69b3      	ldr	r3, [r6, #24]
 800bc5a:	b913      	cbnz	r3, 800bc62 <__sfp+0x16>
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7ff ffbd 	bl	800bbdc <__sinit>
 800bc62:	3648      	adds	r6, #72	; 0x48
 800bc64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	d503      	bpl.n	800bc74 <__sfp+0x28>
 800bc6c:	6833      	ldr	r3, [r6, #0]
 800bc6e:	b30b      	cbz	r3, 800bcb4 <__sfp+0x68>
 800bc70:	6836      	ldr	r6, [r6, #0]
 800bc72:	e7f7      	b.n	800bc64 <__sfp+0x18>
 800bc74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc78:	b9d5      	cbnz	r5, 800bcb0 <__sfp+0x64>
 800bc7a:	4b16      	ldr	r3, [pc, #88]	; (800bcd4 <__sfp+0x88>)
 800bc7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc80:	60e3      	str	r3, [r4, #12]
 800bc82:	6665      	str	r5, [r4, #100]	; 0x64
 800bc84:	f000 f847 	bl	800bd16 <__retarget_lock_init_recursive>
 800bc88:	f7ff ff96 	bl	800bbb8 <__sfp_lock_release>
 800bc8c:	2208      	movs	r2, #8
 800bc8e:	4629      	mov	r1, r5
 800bc90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc98:	6025      	str	r5, [r4, #0]
 800bc9a:	61a5      	str	r5, [r4, #24]
 800bc9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bca0:	f7fe ff0c 	bl	800aabc <memset>
 800bca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcac:	4620      	mov	r0, r4
 800bcae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb0:	3468      	adds	r4, #104	; 0x68
 800bcb2:	e7d9      	b.n	800bc68 <__sfp+0x1c>
 800bcb4:	2104      	movs	r1, #4
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	f7ff ff62 	bl	800bb80 <__sfmoreglue>
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	6030      	str	r0, [r6, #0]
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d1d5      	bne.n	800bc70 <__sfp+0x24>
 800bcc4:	f7ff ff78 	bl	800bbb8 <__sfp_lock_release>
 800bcc8:	230c      	movs	r3, #12
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	e7ee      	b.n	800bcac <__sfp+0x60>
 800bcce:	bf00      	nop
 800bcd0:	0800d338 	.word	0x0800d338
 800bcd4:	ffff0001 	.word	0xffff0001

0800bcd8 <_fwalk_reent>:
 800bcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcdc:	4606      	mov	r6, r0
 800bcde:	4688      	mov	r8, r1
 800bce0:	2700      	movs	r7, #0
 800bce2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcea:	f1b9 0901 	subs.w	r9, r9, #1
 800bcee:	d505      	bpl.n	800bcfc <_fwalk_reent+0x24>
 800bcf0:	6824      	ldr	r4, [r4, #0]
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	d1f7      	bne.n	800bce6 <_fwalk_reent+0xe>
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcfc:	89ab      	ldrh	r3, [r5, #12]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d907      	bls.n	800bd12 <_fwalk_reent+0x3a>
 800bd02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd06:	3301      	adds	r3, #1
 800bd08:	d003      	beq.n	800bd12 <_fwalk_reent+0x3a>
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	47c0      	blx	r8
 800bd10:	4307      	orrs	r7, r0
 800bd12:	3568      	adds	r5, #104	; 0x68
 800bd14:	e7e9      	b.n	800bcea <_fwalk_reent+0x12>

0800bd16 <__retarget_lock_init_recursive>:
 800bd16:	4770      	bx	lr

0800bd18 <__retarget_lock_acquire_recursive>:
 800bd18:	4770      	bx	lr

0800bd1a <__retarget_lock_release_recursive>:
 800bd1a:	4770      	bx	lr

0800bd1c <__swhatbuf_r>:
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	460e      	mov	r6, r1
 800bd20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd24:	4614      	mov	r4, r2
 800bd26:	2900      	cmp	r1, #0
 800bd28:	461d      	mov	r5, r3
 800bd2a:	b096      	sub	sp, #88	; 0x58
 800bd2c:	da07      	bge.n	800bd3e <__swhatbuf_r+0x22>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	602b      	str	r3, [r5, #0]
 800bd32:	89b3      	ldrh	r3, [r6, #12]
 800bd34:	061a      	lsls	r2, r3, #24
 800bd36:	d410      	bmi.n	800bd5a <__swhatbuf_r+0x3e>
 800bd38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd3c:	e00e      	b.n	800bd5c <__swhatbuf_r+0x40>
 800bd3e:	466a      	mov	r2, sp
 800bd40:	f000 f948 	bl	800bfd4 <_fstat_r>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	dbf2      	blt.n	800bd2e <__swhatbuf_r+0x12>
 800bd48:	9a01      	ldr	r2, [sp, #4]
 800bd4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd52:	425a      	negs	r2, r3
 800bd54:	415a      	adcs	r2, r3
 800bd56:	602a      	str	r2, [r5, #0]
 800bd58:	e7ee      	b.n	800bd38 <__swhatbuf_r+0x1c>
 800bd5a:	2340      	movs	r3, #64	; 0x40
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	6023      	str	r3, [r4, #0]
 800bd60:	b016      	add	sp, #88	; 0x58
 800bd62:	bd70      	pop	{r4, r5, r6, pc}

0800bd64 <__smakebuf_r>:
 800bd64:	898b      	ldrh	r3, [r1, #12]
 800bd66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd68:	079d      	lsls	r5, r3, #30
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	d507      	bpl.n	800bd80 <__smakebuf_r+0x1c>
 800bd70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	6123      	str	r3, [r4, #16]
 800bd78:	2301      	movs	r3, #1
 800bd7a:	6163      	str	r3, [r4, #20]
 800bd7c:	b002      	add	sp, #8
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	466a      	mov	r2, sp
 800bd82:	ab01      	add	r3, sp, #4
 800bd84:	f7ff ffca 	bl	800bd1c <__swhatbuf_r>
 800bd88:	9900      	ldr	r1, [sp, #0]
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7fe fee9 	bl	800ab64 <_malloc_r>
 800bd92:	b948      	cbnz	r0, 800bda8 <__smakebuf_r+0x44>
 800bd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd98:	059a      	lsls	r2, r3, #22
 800bd9a:	d4ef      	bmi.n	800bd7c <__smakebuf_r+0x18>
 800bd9c:	f023 0303 	bic.w	r3, r3, #3
 800bda0:	f043 0302 	orr.w	r3, r3, #2
 800bda4:	81a3      	strh	r3, [r4, #12]
 800bda6:	e7e3      	b.n	800bd70 <__smakebuf_r+0xc>
 800bda8:	4b0d      	ldr	r3, [pc, #52]	; (800bde0 <__smakebuf_r+0x7c>)
 800bdaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	6020      	str	r0, [r4, #0]
 800bdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	9b00      	ldr	r3, [sp, #0]
 800bdb8:	6120      	str	r0, [r4, #16]
 800bdba:	6163      	str	r3, [r4, #20]
 800bdbc:	9b01      	ldr	r3, [sp, #4]
 800bdbe:	b15b      	cbz	r3, 800bdd8 <__smakebuf_r+0x74>
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdc6:	f000 f917 	bl	800bff8 <_isatty_r>
 800bdca:	b128      	cbz	r0, 800bdd8 <__smakebuf_r+0x74>
 800bdcc:	89a3      	ldrh	r3, [r4, #12]
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	f043 0301 	orr.w	r3, r3, #1
 800bdd6:	81a3      	strh	r3, [r4, #12]
 800bdd8:	89a0      	ldrh	r0, [r4, #12]
 800bdda:	4305      	orrs	r5, r0
 800bddc:	81a5      	strh	r5, [r4, #12]
 800bdde:	e7cd      	b.n	800bd7c <__smakebuf_r+0x18>
 800bde0:	0800bb75 	.word	0x0800bb75

0800bde4 <memchr>:
 800bde4:	4603      	mov	r3, r0
 800bde6:	b510      	push	{r4, lr}
 800bde8:	b2c9      	uxtb	r1, r1
 800bdea:	4402      	add	r2, r0
 800bdec:	4293      	cmp	r3, r2
 800bdee:	4618      	mov	r0, r3
 800bdf0:	d101      	bne.n	800bdf6 <memchr+0x12>
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	e003      	b.n	800bdfe <memchr+0x1a>
 800bdf6:	7804      	ldrb	r4, [r0, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	428c      	cmp	r4, r1
 800bdfc:	d1f6      	bne.n	800bdec <memchr+0x8>
 800bdfe:	bd10      	pop	{r4, pc}

0800be00 <memmove>:
 800be00:	4288      	cmp	r0, r1
 800be02:	b510      	push	{r4, lr}
 800be04:	eb01 0402 	add.w	r4, r1, r2
 800be08:	d902      	bls.n	800be10 <memmove+0x10>
 800be0a:	4284      	cmp	r4, r0
 800be0c:	4623      	mov	r3, r4
 800be0e:	d807      	bhi.n	800be20 <memmove+0x20>
 800be10:	1e43      	subs	r3, r0, #1
 800be12:	42a1      	cmp	r1, r4
 800be14:	d008      	beq.n	800be28 <memmove+0x28>
 800be16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be1e:	e7f8      	b.n	800be12 <memmove+0x12>
 800be20:	4601      	mov	r1, r0
 800be22:	4402      	add	r2, r0
 800be24:	428a      	cmp	r2, r1
 800be26:	d100      	bne.n	800be2a <memmove+0x2a>
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be32:	e7f7      	b.n	800be24 <memmove+0x24>

0800be34 <_realloc_r>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	4607      	mov	r7, r0
 800be38:	4614      	mov	r4, r2
 800be3a:	460e      	mov	r6, r1
 800be3c:	b921      	cbnz	r1, 800be48 <_realloc_r+0x14>
 800be3e:	4611      	mov	r1, r2
 800be40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be44:	f7fe be8e 	b.w	800ab64 <_malloc_r>
 800be48:	b922      	cbnz	r2, 800be54 <_realloc_r+0x20>
 800be4a:	f7fe fe3f 	bl	800aacc <_free_r>
 800be4e:	4625      	mov	r5, r4
 800be50:	4628      	mov	r0, r5
 800be52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be54:	f000 f8f2 	bl	800c03c <_malloc_usable_size_r>
 800be58:	42a0      	cmp	r0, r4
 800be5a:	d20f      	bcs.n	800be7c <_realloc_r+0x48>
 800be5c:	4621      	mov	r1, r4
 800be5e:	4638      	mov	r0, r7
 800be60:	f7fe fe80 	bl	800ab64 <_malloc_r>
 800be64:	4605      	mov	r5, r0
 800be66:	2800      	cmp	r0, #0
 800be68:	d0f2      	beq.n	800be50 <_realloc_r+0x1c>
 800be6a:	4631      	mov	r1, r6
 800be6c:	4622      	mov	r2, r4
 800be6e:	f7fe fe17 	bl	800aaa0 <memcpy>
 800be72:	4631      	mov	r1, r6
 800be74:	4638      	mov	r0, r7
 800be76:	f7fe fe29 	bl	800aacc <_free_r>
 800be7a:	e7e9      	b.n	800be50 <_realloc_r+0x1c>
 800be7c:	4635      	mov	r5, r6
 800be7e:	e7e7      	b.n	800be50 <_realloc_r+0x1c>

0800be80 <_raise_r>:
 800be80:	291f      	cmp	r1, #31
 800be82:	b538      	push	{r3, r4, r5, lr}
 800be84:	4604      	mov	r4, r0
 800be86:	460d      	mov	r5, r1
 800be88:	d904      	bls.n	800be94 <_raise_r+0x14>
 800be8a:	2316      	movs	r3, #22
 800be8c:	6003      	str	r3, [r0, #0]
 800be8e:	f04f 30ff 	mov.w	r0, #4294967295
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be96:	b112      	cbz	r2, 800be9e <_raise_r+0x1e>
 800be98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be9c:	b94b      	cbnz	r3, 800beb2 <_raise_r+0x32>
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 f830 	bl	800bf04 <_getpid_r>
 800bea4:	462a      	mov	r2, r5
 800bea6:	4601      	mov	r1, r0
 800bea8:	4620      	mov	r0, r4
 800beaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beae:	f000 b817 	b.w	800bee0 <_kill_r>
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d00a      	beq.n	800becc <_raise_r+0x4c>
 800beb6:	1c59      	adds	r1, r3, #1
 800beb8:	d103      	bne.n	800bec2 <_raise_r+0x42>
 800beba:	2316      	movs	r3, #22
 800bebc:	6003      	str	r3, [r0, #0]
 800bebe:	2001      	movs	r0, #1
 800bec0:	e7e7      	b.n	800be92 <_raise_r+0x12>
 800bec2:	2400      	movs	r4, #0
 800bec4:	4628      	mov	r0, r5
 800bec6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800beca:	4798      	blx	r3
 800becc:	2000      	movs	r0, #0
 800bece:	e7e0      	b.n	800be92 <_raise_r+0x12>

0800bed0 <raise>:
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <raise+0xc>)
 800bed2:	4601      	mov	r1, r0
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	f7ff bfd3 	b.w	800be80 <_raise_r>
 800beda:	bf00      	nop
 800bedc:	20000024 	.word	0x20000024

0800bee0 <_kill_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	2300      	movs	r3, #0
 800bee4:	4d06      	ldr	r5, [pc, #24]	; (800bf00 <_kill_r+0x20>)
 800bee6:	4604      	mov	r4, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	4611      	mov	r1, r2
 800beec:	602b      	str	r3, [r5, #0]
 800beee:	f7f7 fe80 	bl	8003bf2 <_kill>
 800bef2:	1c43      	adds	r3, r0, #1
 800bef4:	d102      	bne.n	800befc <_kill_r+0x1c>
 800bef6:	682b      	ldr	r3, [r5, #0]
 800bef8:	b103      	cbz	r3, 800befc <_kill_r+0x1c>
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	bd38      	pop	{r3, r4, r5, pc}
 800befe:	bf00      	nop
 800bf00:	20000518 	.word	0x20000518

0800bf04 <_getpid_r>:
 800bf04:	f7f7 be6e 	b.w	8003be4 <_getpid>

0800bf08 <__sread>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf10:	f000 f89c 	bl	800c04c <_read_r>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	bfab      	itete	ge
 800bf18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf1c:	181b      	addge	r3, r3, r0
 800bf1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf22:	bfac      	ite	ge
 800bf24:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf26:	81a3      	strhlt	r3, [r4, #12]
 800bf28:	bd10      	pop	{r4, pc}

0800bf2a <__swrite>:
 800bf2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2e:	461f      	mov	r7, r3
 800bf30:	898b      	ldrh	r3, [r1, #12]
 800bf32:	4605      	mov	r5, r0
 800bf34:	05db      	lsls	r3, r3, #23
 800bf36:	460c      	mov	r4, r1
 800bf38:	4616      	mov	r6, r2
 800bf3a:	d505      	bpl.n	800bf48 <__swrite+0x1e>
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf44:	f000 f868 	bl	800c018 <_lseek_r>
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf50:	81a3      	strh	r3, [r4, #12]
 800bf52:	4628      	mov	r0, r5
 800bf54:	463b      	mov	r3, r7
 800bf56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5e:	f000 b817 	b.w	800bf90 <_write_r>

0800bf62 <__sseek>:
 800bf62:	b510      	push	{r4, lr}
 800bf64:	460c      	mov	r4, r1
 800bf66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf6a:	f000 f855 	bl	800c018 <_lseek_r>
 800bf6e:	1c43      	adds	r3, r0, #1
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	bf15      	itete	ne
 800bf74:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf7e:	81a3      	strheq	r3, [r4, #12]
 800bf80:	bf18      	it	ne
 800bf82:	81a3      	strhne	r3, [r4, #12]
 800bf84:	bd10      	pop	{r4, pc}

0800bf86 <__sclose>:
 800bf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8a:	f000 b813 	b.w	800bfb4 <_close_r>
	...

0800bf90 <_write_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4604      	mov	r4, r0
 800bf94:	4608      	mov	r0, r1
 800bf96:	4611      	mov	r1, r2
 800bf98:	2200      	movs	r2, #0
 800bf9a:	4d05      	ldr	r5, [pc, #20]	; (800bfb0 <_write_r+0x20>)
 800bf9c:	602a      	str	r2, [r5, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f7f7 fe5e 	bl	8003c60 <_write>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_write_r+0x1e>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_write_r+0x1e>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	20000518 	.word	0x20000518

0800bfb4 <_close_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	4d05      	ldr	r5, [pc, #20]	; (800bfd0 <_close_r+0x1c>)
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f7 fe6a 	bl	8003c98 <_close>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_close_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_close_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20000518 	.word	0x20000518

0800bfd4 <_fstat_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4d06      	ldr	r5, [pc, #24]	; (800bff4 <_fstat_r+0x20>)
 800bfda:	4604      	mov	r4, r0
 800bfdc:	4608      	mov	r0, r1
 800bfde:	4611      	mov	r1, r2
 800bfe0:	602b      	str	r3, [r5, #0]
 800bfe2:	f7f7 fe64 	bl	8003cae <_fstat>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	d102      	bne.n	800bff0 <_fstat_r+0x1c>
 800bfea:	682b      	ldr	r3, [r5, #0]
 800bfec:	b103      	cbz	r3, 800bff0 <_fstat_r+0x1c>
 800bfee:	6023      	str	r3, [r4, #0]
 800bff0:	bd38      	pop	{r3, r4, r5, pc}
 800bff2:	bf00      	nop
 800bff4:	20000518 	.word	0x20000518

0800bff8 <_isatty_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	2300      	movs	r3, #0
 800bffc:	4d05      	ldr	r5, [pc, #20]	; (800c014 <_isatty_r+0x1c>)
 800bffe:	4604      	mov	r4, r0
 800c000:	4608      	mov	r0, r1
 800c002:	602b      	str	r3, [r5, #0]
 800c004:	f7f7 fe62 	bl	8003ccc <_isatty>
 800c008:	1c43      	adds	r3, r0, #1
 800c00a:	d102      	bne.n	800c012 <_isatty_r+0x1a>
 800c00c:	682b      	ldr	r3, [r5, #0]
 800c00e:	b103      	cbz	r3, 800c012 <_isatty_r+0x1a>
 800c010:	6023      	str	r3, [r4, #0]
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	20000518 	.word	0x20000518

0800c018 <_lseek_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4604      	mov	r4, r0
 800c01c:	4608      	mov	r0, r1
 800c01e:	4611      	mov	r1, r2
 800c020:	2200      	movs	r2, #0
 800c022:	4d05      	ldr	r5, [pc, #20]	; (800c038 <_lseek_r+0x20>)
 800c024:	602a      	str	r2, [r5, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	f7f7 fe5a 	bl	8003ce0 <_lseek>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_lseek_r+0x1e>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	b103      	cbz	r3, 800c036 <_lseek_r+0x1e>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	20000518 	.word	0x20000518

0800c03c <_malloc_usable_size_r>:
 800c03c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c040:	1f18      	subs	r0, r3, #4
 800c042:	2b00      	cmp	r3, #0
 800c044:	bfbc      	itt	lt
 800c046:	580b      	ldrlt	r3, [r1, r0]
 800c048:	18c0      	addlt	r0, r0, r3
 800c04a:	4770      	bx	lr

0800c04c <_read_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	4604      	mov	r4, r0
 800c050:	4608      	mov	r0, r1
 800c052:	4611      	mov	r1, r2
 800c054:	2200      	movs	r2, #0
 800c056:	4d05      	ldr	r5, [pc, #20]	; (800c06c <_read_r+0x20>)
 800c058:	602a      	str	r2, [r5, #0]
 800c05a:	461a      	mov	r2, r3
 800c05c:	f7f7 fde3 	bl	8003c26 <_read>
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	d102      	bne.n	800c06a <_read_r+0x1e>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	b103      	cbz	r3, 800c06a <_read_r+0x1e>
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	20000518 	.word	0x20000518

0800c070 <pow>:
 800c070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c074:	461f      	mov	r7, r3
 800c076:	4680      	mov	r8, r0
 800c078:	4689      	mov	r9, r1
 800c07a:	4616      	mov	r6, r2
 800c07c:	f000 f8a4 	bl	800c1c8 <__ieee754_pow>
 800c080:	4b4d      	ldr	r3, [pc, #308]	; (800c1b8 <pow+0x148>)
 800c082:	4604      	mov	r4, r0
 800c084:	f993 3000 	ldrsb.w	r3, [r3]
 800c088:	460d      	mov	r5, r1
 800c08a:	3301      	adds	r3, #1
 800c08c:	d015      	beq.n	800c0ba <pow+0x4a>
 800c08e:	4632      	mov	r2, r6
 800c090:	463b      	mov	r3, r7
 800c092:	4630      	mov	r0, r6
 800c094:	4639      	mov	r1, r7
 800c096:	f7f4 fcb9 	bl	8000a0c <__aeabi_dcmpun>
 800c09a:	b970      	cbnz	r0, 800c0ba <pow+0x4a>
 800c09c:	4642      	mov	r2, r8
 800c09e:	464b      	mov	r3, r9
 800c0a0:	4640      	mov	r0, r8
 800c0a2:	4649      	mov	r1, r9
 800c0a4:	f7f4 fcb2 	bl	8000a0c <__aeabi_dcmpun>
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	b148      	cbz	r0, 800c0c2 <pow+0x52>
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	f7f4 fc79 	bl	80009a8 <__aeabi_dcmpeq>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d17b      	bne.n	800c1b2 <pow+0x142>
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	f7f4 fc6f 	bl	80009a8 <__aeabi_dcmpeq>
 800c0ca:	b1e0      	cbz	r0, 800c106 <pow+0x96>
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 fc68 	bl	80009a8 <__aeabi_dcmpeq>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d16a      	bne.n	800c1b2 <pow+0x142>
 800c0dc:	4630      	mov	r0, r6
 800c0de:	4639      	mov	r1, r7
 800c0e0:	f000 fe37 	bl	800cd52 <finite>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d0e8      	beq.n	800c0ba <pow+0x4a>
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	f7f4 fc64 	bl	80009bc <__aeabi_dcmplt>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d0e0      	beq.n	800c0ba <pow+0x4a>
 800c0f8:	f7fe fc98 	bl	800aa2c <__errno>
 800c0fc:	2321      	movs	r3, #33	; 0x21
 800c0fe:	2400      	movs	r4, #0
 800c100:	6003      	str	r3, [r0, #0]
 800c102:	4d2e      	ldr	r5, [pc, #184]	; (800c1bc <pow+0x14c>)
 800c104:	e7d9      	b.n	800c0ba <pow+0x4a>
 800c106:	4620      	mov	r0, r4
 800c108:	4629      	mov	r1, r5
 800c10a:	f000 fe22 	bl	800cd52 <finite>
 800c10e:	bba8      	cbnz	r0, 800c17c <pow+0x10c>
 800c110:	4640      	mov	r0, r8
 800c112:	4649      	mov	r1, r9
 800c114:	f000 fe1d 	bl	800cd52 <finite>
 800c118:	b380      	cbz	r0, 800c17c <pow+0x10c>
 800c11a:	4630      	mov	r0, r6
 800c11c:	4639      	mov	r1, r7
 800c11e:	f000 fe18 	bl	800cd52 <finite>
 800c122:	b358      	cbz	r0, 800c17c <pow+0x10c>
 800c124:	4622      	mov	r2, r4
 800c126:	462b      	mov	r3, r5
 800c128:	4620      	mov	r0, r4
 800c12a:	4629      	mov	r1, r5
 800c12c:	f7f4 fc6e 	bl	8000a0c <__aeabi_dcmpun>
 800c130:	b160      	cbz	r0, 800c14c <pow+0xdc>
 800c132:	f7fe fc7b 	bl	800aa2c <__errno>
 800c136:	2321      	movs	r3, #33	; 0x21
 800c138:	2200      	movs	r2, #0
 800c13a:	6003      	str	r3, [r0, #0]
 800c13c:	2300      	movs	r3, #0
 800c13e:	4610      	mov	r0, r2
 800c140:	4619      	mov	r1, r3
 800c142:	f7f4 faf3 	bl	800072c <__aeabi_ddiv>
 800c146:	4604      	mov	r4, r0
 800c148:	460d      	mov	r5, r1
 800c14a:	e7b6      	b.n	800c0ba <pow+0x4a>
 800c14c:	f7fe fc6e 	bl	800aa2c <__errno>
 800c150:	2322      	movs	r3, #34	; 0x22
 800c152:	2200      	movs	r2, #0
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	4649      	mov	r1, r9
 800c158:	2300      	movs	r3, #0
 800c15a:	4640      	mov	r0, r8
 800c15c:	f7f4 fc2e 	bl	80009bc <__aeabi_dcmplt>
 800c160:	2400      	movs	r4, #0
 800c162:	b148      	cbz	r0, 800c178 <pow+0x108>
 800c164:	4630      	mov	r0, r6
 800c166:	4639      	mov	r1, r7
 800c168:	f000 fe00 	bl	800cd6c <rint>
 800c16c:	4632      	mov	r2, r6
 800c16e:	463b      	mov	r3, r7
 800c170:	f7f4 fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 800c174:	2800      	cmp	r0, #0
 800c176:	d0c4      	beq.n	800c102 <pow+0x92>
 800c178:	4d11      	ldr	r5, [pc, #68]	; (800c1c0 <pow+0x150>)
 800c17a:	e79e      	b.n	800c0ba <pow+0x4a>
 800c17c:	2200      	movs	r2, #0
 800c17e:	2300      	movs	r3, #0
 800c180:	4620      	mov	r0, r4
 800c182:	4629      	mov	r1, r5
 800c184:	f7f4 fc10 	bl	80009a8 <__aeabi_dcmpeq>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d096      	beq.n	800c0ba <pow+0x4a>
 800c18c:	4640      	mov	r0, r8
 800c18e:	4649      	mov	r1, r9
 800c190:	f000 fddf 	bl	800cd52 <finite>
 800c194:	2800      	cmp	r0, #0
 800c196:	d090      	beq.n	800c0ba <pow+0x4a>
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f000 fdd9 	bl	800cd52 <finite>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d08a      	beq.n	800c0ba <pow+0x4a>
 800c1a4:	f7fe fc42 	bl	800aa2c <__errno>
 800c1a8:	2322      	movs	r3, #34	; 0x22
 800c1aa:	2400      	movs	r4, #0
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	6003      	str	r3, [r0, #0]
 800c1b0:	e783      	b.n	800c0ba <pow+0x4a>
 800c1b2:	2400      	movs	r4, #0
 800c1b4:	4d03      	ldr	r5, [pc, #12]	; (800c1c4 <pow+0x154>)
 800c1b6:	e780      	b.n	800c0ba <pow+0x4a>
 800c1b8:	20000088 	.word	0x20000088
 800c1bc:	fff00000 	.word	0xfff00000
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	3ff00000 	.word	0x3ff00000

0800c1c8 <__ieee754_pow>:
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	b093      	sub	sp, #76	; 0x4c
 800c1ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1d2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800c1d6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c1da:	ea55 0302 	orrs.w	r3, r5, r2
 800c1de:	4607      	mov	r7, r0
 800c1e0:	4688      	mov	r8, r1
 800c1e2:	f000 84bf 	beq.w	800cb64 <__ieee754_pow+0x99c>
 800c1e6:	4b7e      	ldr	r3, [pc, #504]	; (800c3e0 <__ieee754_pow+0x218>)
 800c1e8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	4689      	mov	r9, r1
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	dc09      	bgt.n	800c208 <__ieee754_pow+0x40>
 800c1f4:	d103      	bne.n	800c1fe <__ieee754_pow+0x36>
 800c1f6:	b978      	cbnz	r0, 800c218 <__ieee754_pow+0x50>
 800c1f8:	42a5      	cmp	r5, r4
 800c1fa:	dd02      	ble.n	800c202 <__ieee754_pow+0x3a>
 800c1fc:	e00c      	b.n	800c218 <__ieee754_pow+0x50>
 800c1fe:	429d      	cmp	r5, r3
 800c200:	dc02      	bgt.n	800c208 <__ieee754_pow+0x40>
 800c202:	429d      	cmp	r5, r3
 800c204:	d10e      	bne.n	800c224 <__ieee754_pow+0x5c>
 800c206:	b16a      	cbz	r2, 800c224 <__ieee754_pow+0x5c>
 800c208:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c20c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c210:	ea54 030a 	orrs.w	r3, r4, sl
 800c214:	f000 84a6 	beq.w	800cb64 <__ieee754_pow+0x99c>
 800c218:	4872      	ldr	r0, [pc, #456]	; (800c3e4 <__ieee754_pow+0x21c>)
 800c21a:	b013      	add	sp, #76	; 0x4c
 800c21c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c220:	f000 bd9e 	b.w	800cd60 <nan>
 800c224:	f1b9 0f00 	cmp.w	r9, #0
 800c228:	da39      	bge.n	800c29e <__ieee754_pow+0xd6>
 800c22a:	4b6f      	ldr	r3, [pc, #444]	; (800c3e8 <__ieee754_pow+0x220>)
 800c22c:	429d      	cmp	r5, r3
 800c22e:	dc54      	bgt.n	800c2da <__ieee754_pow+0x112>
 800c230:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c234:	429d      	cmp	r5, r3
 800c236:	f340 84a6 	ble.w	800cb86 <__ieee754_pow+0x9be>
 800c23a:	152b      	asrs	r3, r5, #20
 800c23c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c240:	2b14      	cmp	r3, #20
 800c242:	dd0f      	ble.n	800c264 <__ieee754_pow+0x9c>
 800c244:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c248:	fa22 f103 	lsr.w	r1, r2, r3
 800c24c:	fa01 f303 	lsl.w	r3, r1, r3
 800c250:	4293      	cmp	r3, r2
 800c252:	f040 8498 	bne.w	800cb86 <__ieee754_pow+0x9be>
 800c256:	f001 0101 	and.w	r1, r1, #1
 800c25a:	f1c1 0302 	rsb	r3, r1, #2
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	b182      	cbz	r2, 800c284 <__ieee754_pow+0xbc>
 800c262:	e05e      	b.n	800c322 <__ieee754_pow+0x15a>
 800c264:	2a00      	cmp	r2, #0
 800c266:	d15a      	bne.n	800c31e <__ieee754_pow+0x156>
 800c268:	f1c3 0314 	rsb	r3, r3, #20
 800c26c:	fa45 f103 	asr.w	r1, r5, r3
 800c270:	fa01 f303 	lsl.w	r3, r1, r3
 800c274:	42ab      	cmp	r3, r5
 800c276:	f040 8483 	bne.w	800cb80 <__ieee754_pow+0x9b8>
 800c27a:	f001 0101 	and.w	r1, r1, #1
 800c27e:	f1c1 0302 	rsb	r3, r1, #2
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	4b59      	ldr	r3, [pc, #356]	; (800c3ec <__ieee754_pow+0x224>)
 800c286:	429d      	cmp	r5, r3
 800c288:	d130      	bne.n	800c2ec <__ieee754_pow+0x124>
 800c28a:	2e00      	cmp	r6, #0
 800c28c:	f280 8474 	bge.w	800cb78 <__ieee754_pow+0x9b0>
 800c290:	463a      	mov	r2, r7
 800c292:	4643      	mov	r3, r8
 800c294:	2000      	movs	r0, #0
 800c296:	4955      	ldr	r1, [pc, #340]	; (800c3ec <__ieee754_pow+0x224>)
 800c298:	f7f4 fa48 	bl	800072c <__aeabi_ddiv>
 800c29c:	e02f      	b.n	800c2fe <__ieee754_pow+0x136>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	d13d      	bne.n	800c322 <__ieee754_pow+0x15a>
 800c2a6:	4b4e      	ldr	r3, [pc, #312]	; (800c3e0 <__ieee754_pow+0x218>)
 800c2a8:	429d      	cmp	r5, r3
 800c2aa:	d1eb      	bne.n	800c284 <__ieee754_pow+0xbc>
 800c2ac:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c2b0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c2b4:	ea53 030a 	orrs.w	r3, r3, sl
 800c2b8:	f000 8454 	beq.w	800cb64 <__ieee754_pow+0x99c>
 800c2bc:	4b4c      	ldr	r3, [pc, #304]	; (800c3f0 <__ieee754_pow+0x228>)
 800c2be:	429c      	cmp	r4, r3
 800c2c0:	dd0d      	ble.n	800c2de <__ieee754_pow+0x116>
 800c2c2:	2e00      	cmp	r6, #0
 800c2c4:	f280 8454 	bge.w	800cb70 <__ieee754_pow+0x9a8>
 800c2c8:	f04f 0b00 	mov.w	fp, #0
 800c2cc:	f04f 0c00 	mov.w	ip, #0
 800c2d0:	4658      	mov	r0, fp
 800c2d2:	4661      	mov	r1, ip
 800c2d4:	b013      	add	sp, #76	; 0x4c
 800c2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2da:	2302      	movs	r3, #2
 800c2dc:	e7e0      	b.n	800c2a0 <__ieee754_pow+0xd8>
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	daf2      	bge.n	800c2c8 <__ieee754_pow+0x100>
 800c2e2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800c2e6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800c2ea:	e7f1      	b.n	800c2d0 <__ieee754_pow+0x108>
 800c2ec:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800c2f0:	d108      	bne.n	800c304 <__ieee754_pow+0x13c>
 800c2f2:	463a      	mov	r2, r7
 800c2f4:	4643      	mov	r3, r8
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	4641      	mov	r1, r8
 800c2fa:	f7f4 f8ed 	bl	80004d8 <__aeabi_dmul>
 800c2fe:	4683      	mov	fp, r0
 800c300:	468c      	mov	ip, r1
 800c302:	e7e5      	b.n	800c2d0 <__ieee754_pow+0x108>
 800c304:	4b3b      	ldr	r3, [pc, #236]	; (800c3f4 <__ieee754_pow+0x22c>)
 800c306:	429e      	cmp	r6, r3
 800c308:	d10b      	bne.n	800c322 <__ieee754_pow+0x15a>
 800c30a:	f1b9 0f00 	cmp.w	r9, #0
 800c30e:	db08      	blt.n	800c322 <__ieee754_pow+0x15a>
 800c310:	4638      	mov	r0, r7
 800c312:	4641      	mov	r1, r8
 800c314:	b013      	add	sp, #76	; 0x4c
 800c316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31a:	f000 bc6b 	b.w	800cbf4 <__ieee754_sqrt>
 800c31e:	2300      	movs	r3, #0
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	4638      	mov	r0, r7
 800c324:	4641      	mov	r1, r8
 800c326:	f000 fd11 	bl	800cd4c <fabs>
 800c32a:	4683      	mov	fp, r0
 800c32c:	468c      	mov	ip, r1
 800c32e:	f1ba 0f00 	cmp.w	sl, #0
 800c332:	d129      	bne.n	800c388 <__ieee754_pow+0x1c0>
 800c334:	b124      	cbz	r4, 800c340 <__ieee754_pow+0x178>
 800c336:	4b2d      	ldr	r3, [pc, #180]	; (800c3ec <__ieee754_pow+0x224>)
 800c338:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d123      	bne.n	800c388 <__ieee754_pow+0x1c0>
 800c340:	2e00      	cmp	r6, #0
 800c342:	da07      	bge.n	800c354 <__ieee754_pow+0x18c>
 800c344:	465a      	mov	r2, fp
 800c346:	4663      	mov	r3, ip
 800c348:	2000      	movs	r0, #0
 800c34a:	4928      	ldr	r1, [pc, #160]	; (800c3ec <__ieee754_pow+0x224>)
 800c34c:	f7f4 f9ee 	bl	800072c <__aeabi_ddiv>
 800c350:	4683      	mov	fp, r0
 800c352:	468c      	mov	ip, r1
 800c354:	f1b9 0f00 	cmp.w	r9, #0
 800c358:	daba      	bge.n	800c2d0 <__ieee754_pow+0x108>
 800c35a:	9b00      	ldr	r3, [sp, #0]
 800c35c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c360:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c364:	4323      	orrs	r3, r4
 800c366:	d108      	bne.n	800c37a <__ieee754_pow+0x1b2>
 800c368:	465a      	mov	r2, fp
 800c36a:	4663      	mov	r3, ip
 800c36c:	4658      	mov	r0, fp
 800c36e:	4661      	mov	r1, ip
 800c370:	f7f3 fefa 	bl	8000168 <__aeabi_dsub>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	e78e      	b.n	800c298 <__ieee754_pow+0xd0>
 800c37a:	9b00      	ldr	r3, [sp, #0]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d1a7      	bne.n	800c2d0 <__ieee754_pow+0x108>
 800c380:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800c384:	469c      	mov	ip, r3
 800c386:	e7a3      	b.n	800c2d0 <__ieee754_pow+0x108>
 800c388:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800c38c:	3b01      	subs	r3, #1
 800c38e:	930c      	str	r3, [sp, #48]	; 0x30
 800c390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c392:	9b00      	ldr	r3, [sp, #0]
 800c394:	4313      	orrs	r3, r2
 800c396:	d104      	bne.n	800c3a2 <__ieee754_pow+0x1da>
 800c398:	463a      	mov	r2, r7
 800c39a:	4643      	mov	r3, r8
 800c39c:	4638      	mov	r0, r7
 800c39e:	4641      	mov	r1, r8
 800c3a0:	e7e6      	b.n	800c370 <__ieee754_pow+0x1a8>
 800c3a2:	4b15      	ldr	r3, [pc, #84]	; (800c3f8 <__ieee754_pow+0x230>)
 800c3a4:	429d      	cmp	r5, r3
 800c3a6:	f340 80f9 	ble.w	800c59c <__ieee754_pow+0x3d4>
 800c3aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c3ae:	429d      	cmp	r5, r3
 800c3b0:	4b0f      	ldr	r3, [pc, #60]	; (800c3f0 <__ieee754_pow+0x228>)
 800c3b2:	dd09      	ble.n	800c3c8 <__ieee754_pow+0x200>
 800c3b4:	429c      	cmp	r4, r3
 800c3b6:	dc0c      	bgt.n	800c3d2 <__ieee754_pow+0x20a>
 800c3b8:	2e00      	cmp	r6, #0
 800c3ba:	da85      	bge.n	800c2c8 <__ieee754_pow+0x100>
 800c3bc:	a306      	add	r3, pc, #24	; (adr r3, 800c3d8 <__ieee754_pow+0x210>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	e798      	b.n	800c2fa <__ieee754_pow+0x132>
 800c3c8:	429c      	cmp	r4, r3
 800c3ca:	dbf5      	blt.n	800c3b8 <__ieee754_pow+0x1f0>
 800c3cc:	4b07      	ldr	r3, [pc, #28]	; (800c3ec <__ieee754_pow+0x224>)
 800c3ce:	429c      	cmp	r4, r3
 800c3d0:	dd14      	ble.n	800c3fc <__ieee754_pow+0x234>
 800c3d2:	2e00      	cmp	r6, #0
 800c3d4:	dcf2      	bgt.n	800c3bc <__ieee754_pow+0x1f4>
 800c3d6:	e777      	b.n	800c2c8 <__ieee754_pow+0x100>
 800c3d8:	8800759c 	.word	0x8800759c
 800c3dc:	7e37e43c 	.word	0x7e37e43c
 800c3e0:	7ff00000 	.word	0x7ff00000
 800c3e4:	0800d3ef 	.word	0x0800d3ef
 800c3e8:	433fffff 	.word	0x433fffff
 800c3ec:	3ff00000 	.word	0x3ff00000
 800c3f0:	3fefffff 	.word	0x3fefffff
 800c3f4:	3fe00000 	.word	0x3fe00000
 800c3f8:	41e00000 	.word	0x41e00000
 800c3fc:	4661      	mov	r1, ip
 800c3fe:	2200      	movs	r2, #0
 800c400:	4658      	mov	r0, fp
 800c402:	4b61      	ldr	r3, [pc, #388]	; (800c588 <__ieee754_pow+0x3c0>)
 800c404:	f7f3 feb0 	bl	8000168 <__aeabi_dsub>
 800c408:	a355      	add	r3, pc, #340	; (adr r3, 800c560 <__ieee754_pow+0x398>)
 800c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40e:	4604      	mov	r4, r0
 800c410:	460d      	mov	r5, r1
 800c412:	f7f4 f861 	bl	80004d8 <__aeabi_dmul>
 800c416:	a354      	add	r3, pc, #336	; (adr r3, 800c568 <__ieee754_pow+0x3a0>)
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	4606      	mov	r6, r0
 800c41e:	460f      	mov	r7, r1
 800c420:	4620      	mov	r0, r4
 800c422:	4629      	mov	r1, r5
 800c424:	f7f4 f858 	bl	80004d8 <__aeabi_dmul>
 800c428:	2200      	movs	r2, #0
 800c42a:	4682      	mov	sl, r0
 800c42c:	468b      	mov	fp, r1
 800c42e:	4620      	mov	r0, r4
 800c430:	4629      	mov	r1, r5
 800c432:	4b56      	ldr	r3, [pc, #344]	; (800c58c <__ieee754_pow+0x3c4>)
 800c434:	f7f4 f850 	bl	80004d8 <__aeabi_dmul>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	a14c      	add	r1, pc, #304	; (adr r1, 800c570 <__ieee754_pow+0x3a8>)
 800c43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c442:	f7f3 fe91 	bl	8000168 <__aeabi_dsub>
 800c446:	4622      	mov	r2, r4
 800c448:	462b      	mov	r3, r5
 800c44a:	f7f4 f845 	bl	80004d8 <__aeabi_dmul>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	2000      	movs	r0, #0
 800c454:	494e      	ldr	r1, [pc, #312]	; (800c590 <__ieee754_pow+0x3c8>)
 800c456:	f7f3 fe87 	bl	8000168 <__aeabi_dsub>
 800c45a:	4622      	mov	r2, r4
 800c45c:	462b      	mov	r3, r5
 800c45e:	4680      	mov	r8, r0
 800c460:	4689      	mov	r9, r1
 800c462:	4620      	mov	r0, r4
 800c464:	4629      	mov	r1, r5
 800c466:	f7f4 f837 	bl	80004d8 <__aeabi_dmul>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4640      	mov	r0, r8
 800c470:	4649      	mov	r1, r9
 800c472:	f7f4 f831 	bl	80004d8 <__aeabi_dmul>
 800c476:	a340      	add	r3, pc, #256	; (adr r3, 800c578 <__ieee754_pow+0x3b0>)
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	f7f4 f82c 	bl	80004d8 <__aeabi_dmul>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	4650      	mov	r0, sl
 800c486:	4659      	mov	r1, fp
 800c488:	f7f3 fe6e 	bl	8000168 <__aeabi_dsub>
 800c48c:	f04f 0a00 	mov.w	sl, #0
 800c490:	4602      	mov	r2, r0
 800c492:	460b      	mov	r3, r1
 800c494:	4604      	mov	r4, r0
 800c496:	460d      	mov	r5, r1
 800c498:	4630      	mov	r0, r6
 800c49a:	4639      	mov	r1, r7
 800c49c:	f7f3 fe66 	bl	800016c <__adddf3>
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	463b      	mov	r3, r7
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	468b      	mov	fp, r1
 800c4a8:	f7f3 fe5e 	bl	8000168 <__aeabi_dsub>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	f7f3 fe58 	bl	8000168 <__aeabi_dsub>
 800c4b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c4bc:	9b00      	ldr	r3, [sp, #0]
 800c4be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	f04f 0600 	mov.w	r6, #0
 800c4c8:	f04f 0200 	mov.w	r2, #0
 800c4cc:	bf0c      	ite	eq
 800c4ce:	4b31      	ldreq	r3, [pc, #196]	; (800c594 <__ieee754_pow+0x3cc>)
 800c4d0:	4b2d      	ldrne	r3, [pc, #180]	; (800c588 <__ieee754_pow+0x3c0>)
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4da:	e9cd 2300 	strd	r2, r3, [sp]
 800c4de:	4632      	mov	r2, r6
 800c4e0:	463b      	mov	r3, r7
 800c4e2:	f7f3 fe41 	bl	8000168 <__aeabi_dsub>
 800c4e6:	4652      	mov	r2, sl
 800c4e8:	465b      	mov	r3, fp
 800c4ea:	f7f3 fff5 	bl	80004d8 <__aeabi_dmul>
 800c4ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4f2:	4680      	mov	r8, r0
 800c4f4:	4689      	mov	r9, r1
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f3 ffed 	bl	80004d8 <__aeabi_dmul>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4640      	mov	r0, r8
 800c504:	4649      	mov	r1, r9
 800c506:	f7f3 fe31 	bl	800016c <__adddf3>
 800c50a:	4632      	mov	r2, r6
 800c50c:	463b      	mov	r3, r7
 800c50e:	4680      	mov	r8, r0
 800c510:	4689      	mov	r9, r1
 800c512:	4650      	mov	r0, sl
 800c514:	4659      	mov	r1, fp
 800c516:	f7f3 ffdf 	bl	80004d8 <__aeabi_dmul>
 800c51a:	4604      	mov	r4, r0
 800c51c:	460d      	mov	r5, r1
 800c51e:	460b      	mov	r3, r1
 800c520:	4602      	mov	r2, r0
 800c522:	4649      	mov	r1, r9
 800c524:	4640      	mov	r0, r8
 800c526:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c52a:	f7f3 fe1f 	bl	800016c <__adddf3>
 800c52e:	4b1a      	ldr	r3, [pc, #104]	; (800c598 <__ieee754_pow+0x3d0>)
 800c530:	4682      	mov	sl, r0
 800c532:	4299      	cmp	r1, r3
 800c534:	460f      	mov	r7, r1
 800c536:	460e      	mov	r6, r1
 800c538:	f340 82ed 	ble.w	800cb16 <__ieee754_pow+0x94e>
 800c53c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c540:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c544:	4303      	orrs	r3, r0
 800c546:	f000 81e7 	beq.w	800c918 <__ieee754_pow+0x750>
 800c54a:	a30d      	add	r3, pc, #52	; (adr r3, 800c580 <__ieee754_pow+0x3b8>)
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c554:	f7f3 ffc0 	bl	80004d8 <__aeabi_dmul>
 800c558:	a309      	add	r3, pc, #36	; (adr r3, 800c580 <__ieee754_pow+0x3b8>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	e6cc      	b.n	800c2fa <__ieee754_pow+0x132>
 800c560:	60000000 	.word	0x60000000
 800c564:	3ff71547 	.word	0x3ff71547
 800c568:	f85ddf44 	.word	0xf85ddf44
 800c56c:	3e54ae0b 	.word	0x3e54ae0b
 800c570:	55555555 	.word	0x55555555
 800c574:	3fd55555 	.word	0x3fd55555
 800c578:	652b82fe 	.word	0x652b82fe
 800c57c:	3ff71547 	.word	0x3ff71547
 800c580:	8800759c 	.word	0x8800759c
 800c584:	7e37e43c 	.word	0x7e37e43c
 800c588:	3ff00000 	.word	0x3ff00000
 800c58c:	3fd00000 	.word	0x3fd00000
 800c590:	3fe00000 	.word	0x3fe00000
 800c594:	bff00000 	.word	0xbff00000
 800c598:	408fffff 	.word	0x408fffff
 800c59c:	4bd4      	ldr	r3, [pc, #848]	; (800c8f0 <__ieee754_pow+0x728>)
 800c59e:	2200      	movs	r2, #0
 800c5a0:	ea09 0303 	and.w	r3, r9, r3
 800c5a4:	b943      	cbnz	r3, 800c5b8 <__ieee754_pow+0x3f0>
 800c5a6:	4658      	mov	r0, fp
 800c5a8:	4661      	mov	r1, ip
 800c5aa:	4bd2      	ldr	r3, [pc, #840]	; (800c8f4 <__ieee754_pow+0x72c>)
 800c5ac:	f7f3 ff94 	bl	80004d8 <__aeabi_dmul>
 800c5b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c5b4:	4683      	mov	fp, r0
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	1523      	asrs	r3, r4, #20
 800c5ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c5be:	4413      	add	r3, r2
 800c5c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5c2:	4bcd      	ldr	r3, [pc, #820]	; (800c8f8 <__ieee754_pow+0x730>)
 800c5c4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c5c8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c5d2:	dd08      	ble.n	800c5e6 <__ieee754_pow+0x41e>
 800c5d4:	4bc9      	ldr	r3, [pc, #804]	; (800c8fc <__ieee754_pow+0x734>)
 800c5d6:	429c      	cmp	r4, r3
 800c5d8:	f340 819c 	ble.w	800c914 <__ieee754_pow+0x74c>
 800c5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5e6:	2600      	movs	r6, #0
 800c5e8:	00f3      	lsls	r3, r6, #3
 800c5ea:	930d      	str	r3, [sp, #52]	; 0x34
 800c5ec:	4bc4      	ldr	r3, [pc, #784]	; (800c900 <__ieee754_pow+0x738>)
 800c5ee:	4658      	mov	r0, fp
 800c5f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c600:	4623      	mov	r3, r4
 800c602:	f7f3 fdb1 	bl	8000168 <__aeabi_dsub>
 800c606:	46da      	mov	sl, fp
 800c608:	462b      	mov	r3, r5
 800c60a:	4652      	mov	r2, sl
 800c60c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c610:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c614:	f7f3 fdaa 	bl	800016c <__adddf3>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	2000      	movs	r0, #0
 800c61e:	49b9      	ldr	r1, [pc, #740]	; (800c904 <__ieee754_pow+0x73c>)
 800c620:	f7f4 f884 	bl	800072c <__aeabi_ddiv>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c62c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c630:	f7f3 ff52 	bl	80004d8 <__aeabi_dmul>
 800c634:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c638:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c63c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c640:	2300      	movs	r3, #0
 800c642:	2200      	movs	r2, #0
 800c644:	46ab      	mov	fp, r5
 800c646:	106d      	asrs	r5, r5, #1
 800c648:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c652:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c656:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c65a:	4640      	mov	r0, r8
 800c65c:	4649      	mov	r1, r9
 800c65e:	4614      	mov	r4, r2
 800c660:	461d      	mov	r5, r3
 800c662:	f7f3 ff39 	bl	80004d8 <__aeabi_dmul>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c66e:	f7f3 fd7b 	bl	8000168 <__aeabi_dsub>
 800c672:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c676:	4606      	mov	r6, r0
 800c678:	460f      	mov	r7, r1
 800c67a:	4620      	mov	r0, r4
 800c67c:	4629      	mov	r1, r5
 800c67e:	f7f3 fd73 	bl	8000168 <__aeabi_dsub>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4650      	mov	r0, sl
 800c688:	4659      	mov	r1, fp
 800c68a:	f7f3 fd6d 	bl	8000168 <__aeabi_dsub>
 800c68e:	4642      	mov	r2, r8
 800c690:	464b      	mov	r3, r9
 800c692:	f7f3 ff21 	bl	80004d8 <__aeabi_dmul>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4630      	mov	r0, r6
 800c69c:	4639      	mov	r1, r7
 800c69e:	f7f3 fd63 	bl	8000168 <__aeabi_dsub>
 800c6a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c6a6:	f7f3 ff17 	bl	80004d8 <__aeabi_dmul>
 800c6aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	f7f3 ff0f 	bl	80004d8 <__aeabi_dmul>
 800c6ba:	a37b      	add	r3, pc, #492	; (adr r3, 800c8a8 <__ieee754_pow+0x6e0>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	460d      	mov	r5, r1
 800c6c4:	f7f3 ff08 	bl	80004d8 <__aeabi_dmul>
 800c6c8:	a379      	add	r3, pc, #484	; (adr r3, 800c8b0 <__ieee754_pow+0x6e8>)
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f7f3 fd4d 	bl	800016c <__adddf3>
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	462b      	mov	r3, r5
 800c6d6:	f7f3 feff 	bl	80004d8 <__aeabi_dmul>
 800c6da:	a377      	add	r3, pc, #476	; (adr r3, 800c8b8 <__ieee754_pow+0x6f0>)
 800c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e0:	f7f3 fd44 	bl	800016c <__adddf3>
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	462b      	mov	r3, r5
 800c6e8:	f7f3 fef6 	bl	80004d8 <__aeabi_dmul>
 800c6ec:	a374      	add	r3, pc, #464	; (adr r3, 800c8c0 <__ieee754_pow+0x6f8>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	f7f3 fd3b 	bl	800016c <__adddf3>
 800c6f6:	4622      	mov	r2, r4
 800c6f8:	462b      	mov	r3, r5
 800c6fa:	f7f3 feed 	bl	80004d8 <__aeabi_dmul>
 800c6fe:	a372      	add	r3, pc, #456	; (adr r3, 800c8c8 <__ieee754_pow+0x700>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	f7f3 fd32 	bl	800016c <__adddf3>
 800c708:	4622      	mov	r2, r4
 800c70a:	462b      	mov	r3, r5
 800c70c:	f7f3 fee4 	bl	80004d8 <__aeabi_dmul>
 800c710:	a36f      	add	r3, pc, #444	; (adr r3, 800c8d0 <__ieee754_pow+0x708>)
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	f7f3 fd29 	bl	800016c <__adddf3>
 800c71a:	4622      	mov	r2, r4
 800c71c:	4606      	mov	r6, r0
 800c71e:	460f      	mov	r7, r1
 800c720:	462b      	mov	r3, r5
 800c722:	4620      	mov	r0, r4
 800c724:	4629      	mov	r1, r5
 800c726:	f7f3 fed7 	bl	80004d8 <__aeabi_dmul>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4630      	mov	r0, r6
 800c730:	4639      	mov	r1, r7
 800c732:	f7f3 fed1 	bl	80004d8 <__aeabi_dmul>
 800c736:	4604      	mov	r4, r0
 800c738:	460d      	mov	r5, r1
 800c73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c73e:	4642      	mov	r2, r8
 800c740:	464b      	mov	r3, r9
 800c742:	f7f3 fd13 	bl	800016c <__adddf3>
 800c746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c74a:	f7f3 fec5 	bl	80004d8 <__aeabi_dmul>
 800c74e:	4622      	mov	r2, r4
 800c750:	462b      	mov	r3, r5
 800c752:	f7f3 fd0b 	bl	800016c <__adddf3>
 800c756:	4642      	mov	r2, r8
 800c758:	4606      	mov	r6, r0
 800c75a:	460f      	mov	r7, r1
 800c75c:	464b      	mov	r3, r9
 800c75e:	4640      	mov	r0, r8
 800c760:	4649      	mov	r1, r9
 800c762:	f7f3 feb9 	bl	80004d8 <__aeabi_dmul>
 800c766:	2200      	movs	r2, #0
 800c768:	4b67      	ldr	r3, [pc, #412]	; (800c908 <__ieee754_pow+0x740>)
 800c76a:	4682      	mov	sl, r0
 800c76c:	468b      	mov	fp, r1
 800c76e:	f7f3 fcfd 	bl	800016c <__adddf3>
 800c772:	4632      	mov	r2, r6
 800c774:	463b      	mov	r3, r7
 800c776:	f7f3 fcf9 	bl	800016c <__adddf3>
 800c77a:	9c04      	ldr	r4, [sp, #16]
 800c77c:	460d      	mov	r5, r1
 800c77e:	4622      	mov	r2, r4
 800c780:	460b      	mov	r3, r1
 800c782:	4640      	mov	r0, r8
 800c784:	4649      	mov	r1, r9
 800c786:	f7f3 fea7 	bl	80004d8 <__aeabi_dmul>
 800c78a:	2200      	movs	r2, #0
 800c78c:	4680      	mov	r8, r0
 800c78e:	4689      	mov	r9, r1
 800c790:	4620      	mov	r0, r4
 800c792:	4629      	mov	r1, r5
 800c794:	4b5c      	ldr	r3, [pc, #368]	; (800c908 <__ieee754_pow+0x740>)
 800c796:	f7f3 fce7 	bl	8000168 <__aeabi_dsub>
 800c79a:	4652      	mov	r2, sl
 800c79c:	465b      	mov	r3, fp
 800c79e:	f7f3 fce3 	bl	8000168 <__aeabi_dsub>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f3 fcdd 	bl	8000168 <__aeabi_dsub>
 800c7ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7b2:	f7f3 fe91 	bl	80004d8 <__aeabi_dmul>
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	460f      	mov	r7, r1
 800c7bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7c0:	462b      	mov	r3, r5
 800c7c2:	f7f3 fe89 	bl	80004d8 <__aeabi_dmul>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	f7f3 fccd 	bl	800016c <__adddf3>
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	460f      	mov	r7, r1
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4640      	mov	r0, r8
 800c7dc:	4649      	mov	r1, r9
 800c7de:	f7f3 fcc5 	bl	800016c <__adddf3>
 800c7e2:	a33d      	add	r3, pc, #244	; (adr r3, 800c8d8 <__ieee754_pow+0x710>)
 800c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e8:	9c04      	ldr	r4, [sp, #16]
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7f3 fe73 	bl	80004d8 <__aeabi_dmul>
 800c7f2:	4642      	mov	r2, r8
 800c7f4:	464b      	mov	r3, r9
 800c7f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7f3 fcb3 	bl	8000168 <__aeabi_dsub>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4630      	mov	r0, r6
 800c808:	4639      	mov	r1, r7
 800c80a:	f7f3 fcad 	bl	8000168 <__aeabi_dsub>
 800c80e:	a334      	add	r3, pc, #208	; (adr r3, 800c8e0 <__ieee754_pow+0x718>)
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	f7f3 fe60 	bl	80004d8 <__aeabi_dmul>
 800c818:	a333      	add	r3, pc, #204	; (adr r3, 800c8e8 <__ieee754_pow+0x720>)
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	4606      	mov	r6, r0
 800c820:	460f      	mov	r7, r1
 800c822:	4620      	mov	r0, r4
 800c824:	4629      	mov	r1, r5
 800c826:	f7f3 fe57 	bl	80004d8 <__aeabi_dmul>
 800c82a:	4602      	mov	r2, r0
 800c82c:	460b      	mov	r3, r1
 800c82e:	4630      	mov	r0, r6
 800c830:	4639      	mov	r1, r7
 800c832:	f7f3 fc9b 	bl	800016c <__adddf3>
 800c836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c838:	4b34      	ldr	r3, [pc, #208]	; (800c90c <__ieee754_pow+0x744>)
 800c83a:	4413      	add	r3, r2
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	f7f3 fc94 	bl	800016c <__adddf3>
 800c844:	4680      	mov	r8, r0
 800c846:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c848:	4689      	mov	r9, r1
 800c84a:	f7f3 fddb 	bl	8000404 <__aeabi_i2d>
 800c84e:	4604      	mov	r4, r0
 800c850:	460d      	mov	r5, r1
 800c852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c854:	4b2e      	ldr	r3, [pc, #184]	; (800c910 <__ieee754_pow+0x748>)
 800c856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c85a:	4413      	add	r3, r2
 800c85c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c860:	4642      	mov	r2, r8
 800c862:	464b      	mov	r3, r9
 800c864:	f7f3 fc82 	bl	800016c <__adddf3>
 800c868:	4632      	mov	r2, r6
 800c86a:	463b      	mov	r3, r7
 800c86c:	f7f3 fc7e 	bl	800016c <__adddf3>
 800c870:	4622      	mov	r2, r4
 800c872:	462b      	mov	r3, r5
 800c874:	f7f3 fc7a 	bl	800016c <__adddf3>
 800c878:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c87c:	4622      	mov	r2, r4
 800c87e:	462b      	mov	r3, r5
 800c880:	4650      	mov	r0, sl
 800c882:	468b      	mov	fp, r1
 800c884:	f7f3 fc70 	bl	8000168 <__aeabi_dsub>
 800c888:	4632      	mov	r2, r6
 800c88a:	463b      	mov	r3, r7
 800c88c:	f7f3 fc6c 	bl	8000168 <__aeabi_dsub>
 800c890:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c894:	f7f3 fc68 	bl	8000168 <__aeabi_dsub>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	4640      	mov	r0, r8
 800c89e:	4649      	mov	r1, r9
 800c8a0:	e608      	b.n	800c4b4 <__ieee754_pow+0x2ec>
 800c8a2:	bf00      	nop
 800c8a4:	f3af 8000 	nop.w
 800c8a8:	4a454eef 	.word	0x4a454eef
 800c8ac:	3fca7e28 	.word	0x3fca7e28
 800c8b0:	93c9db65 	.word	0x93c9db65
 800c8b4:	3fcd864a 	.word	0x3fcd864a
 800c8b8:	a91d4101 	.word	0xa91d4101
 800c8bc:	3fd17460 	.word	0x3fd17460
 800c8c0:	518f264d 	.word	0x518f264d
 800c8c4:	3fd55555 	.word	0x3fd55555
 800c8c8:	db6fabff 	.word	0xdb6fabff
 800c8cc:	3fdb6db6 	.word	0x3fdb6db6
 800c8d0:	33333303 	.word	0x33333303
 800c8d4:	3fe33333 	.word	0x3fe33333
 800c8d8:	e0000000 	.word	0xe0000000
 800c8dc:	3feec709 	.word	0x3feec709
 800c8e0:	dc3a03fd 	.word	0xdc3a03fd
 800c8e4:	3feec709 	.word	0x3feec709
 800c8e8:	145b01f5 	.word	0x145b01f5
 800c8ec:	be3e2fe0 	.word	0xbe3e2fe0
 800c8f0:	7ff00000 	.word	0x7ff00000
 800c8f4:	43400000 	.word	0x43400000
 800c8f8:	0003988e 	.word	0x0003988e
 800c8fc:	000bb679 	.word	0x000bb679
 800c900:	0800d588 	.word	0x0800d588
 800c904:	3ff00000 	.word	0x3ff00000
 800c908:	40080000 	.word	0x40080000
 800c90c:	0800d5a8 	.word	0x0800d5a8
 800c910:	0800d598 	.word	0x0800d598
 800c914:	2601      	movs	r6, #1
 800c916:	e667      	b.n	800c5e8 <__ieee754_pow+0x420>
 800c918:	a39d      	add	r3, pc, #628	; (adr r3, 800cb90 <__ieee754_pow+0x9c8>)
 800c91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91e:	4640      	mov	r0, r8
 800c920:	4649      	mov	r1, r9
 800c922:	f7f3 fc23 	bl	800016c <__adddf3>
 800c926:	4622      	mov	r2, r4
 800c928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c92c:	462b      	mov	r3, r5
 800c92e:	4650      	mov	r0, sl
 800c930:	4639      	mov	r1, r7
 800c932:	f7f3 fc19 	bl	8000168 <__aeabi_dsub>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c93e:	f7f4 f85b 	bl	80009f8 <__aeabi_dcmpgt>
 800c942:	2800      	cmp	r0, #0
 800c944:	f47f ae01 	bne.w	800c54a <__ieee754_pow+0x382>
 800c948:	4aa5      	ldr	r2, [pc, #660]	; (800cbe0 <__ieee754_pow+0xa18>)
 800c94a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c94e:	4293      	cmp	r3, r2
 800c950:	f340 8103 	ble.w	800cb5a <__ieee754_pow+0x992>
 800c954:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c958:	2000      	movs	r0, #0
 800c95a:	151b      	asrs	r3, r3, #20
 800c95c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c960:	fa4a f303 	asr.w	r3, sl, r3
 800c964:	4433      	add	r3, r6
 800c966:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c96a:	4f9e      	ldr	r7, [pc, #632]	; (800cbe4 <__ieee754_pow+0xa1c>)
 800c96c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c970:	4117      	asrs	r7, r2
 800c972:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c976:	ea23 0107 	bic.w	r1, r3, r7
 800c97a:	f1c2 0214 	rsb	r2, r2, #20
 800c97e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c982:	460b      	mov	r3, r1
 800c984:	fa4a fa02 	asr.w	sl, sl, r2
 800c988:	2e00      	cmp	r6, #0
 800c98a:	4602      	mov	r2, r0
 800c98c:	4629      	mov	r1, r5
 800c98e:	4620      	mov	r0, r4
 800c990:	bfb8      	it	lt
 800c992:	f1ca 0a00 	rsblt	sl, sl, #0
 800c996:	f7f3 fbe7 	bl	8000168 <__aeabi_dsub>
 800c99a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9a2:	2400      	movs	r4, #0
 800c9a4:	4642      	mov	r2, r8
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	f7f3 fbe0 	bl	800016c <__adddf3>
 800c9ac:	a37a      	add	r3, pc, #488	; (adr r3, 800cb98 <__ieee754_pow+0x9d0>)
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	f7f3 fd8f 	bl	80004d8 <__aeabi_dmul>
 800c9ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460f      	mov	r7, r1
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	f7f3 fbcf 	bl	8000168 <__aeabi_dsub>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	f7f3 fbc9 	bl	8000168 <__aeabi_dsub>
 800c9d6:	a372      	add	r3, pc, #456	; (adr r3, 800cba0 <__ieee754_pow+0x9d8>)
 800c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9dc:	f7f3 fd7c 	bl	80004d8 <__aeabi_dmul>
 800c9e0:	a371      	add	r3, pc, #452	; (adr r3, 800cba8 <__ieee754_pow+0x9e0>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	4680      	mov	r8, r0
 800c9e8:	4689      	mov	r9, r1
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	f7f3 fd73 	bl	80004d8 <__aeabi_dmul>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	f7f3 fbb7 	bl	800016c <__adddf3>
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4630      	mov	r0, r6
 800ca08:	4639      	mov	r1, r7
 800ca0a:	f7f3 fbaf 	bl	800016c <__adddf3>
 800ca0e:	4632      	mov	r2, r6
 800ca10:	463b      	mov	r3, r7
 800ca12:	4680      	mov	r8, r0
 800ca14:	4689      	mov	r9, r1
 800ca16:	f7f3 fba7 	bl	8000168 <__aeabi_dsub>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	4620      	mov	r0, r4
 800ca20:	4629      	mov	r1, r5
 800ca22:	f7f3 fba1 	bl	8000168 <__aeabi_dsub>
 800ca26:	4642      	mov	r2, r8
 800ca28:	4606      	mov	r6, r0
 800ca2a:	460f      	mov	r7, r1
 800ca2c:	464b      	mov	r3, r9
 800ca2e:	4640      	mov	r0, r8
 800ca30:	4649      	mov	r1, r9
 800ca32:	f7f3 fd51 	bl	80004d8 <__aeabi_dmul>
 800ca36:	a35e      	add	r3, pc, #376	; (adr r3, 800cbb0 <__ieee754_pow+0x9e8>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	f7f3 fd4a 	bl	80004d8 <__aeabi_dmul>
 800ca44:	a35c      	add	r3, pc, #368	; (adr r3, 800cbb8 <__ieee754_pow+0x9f0>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	f7f3 fb8d 	bl	8000168 <__aeabi_dsub>
 800ca4e:	4622      	mov	r2, r4
 800ca50:	462b      	mov	r3, r5
 800ca52:	f7f3 fd41 	bl	80004d8 <__aeabi_dmul>
 800ca56:	a35a      	add	r3, pc, #360	; (adr r3, 800cbc0 <__ieee754_pow+0x9f8>)
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	f7f3 fb86 	bl	800016c <__adddf3>
 800ca60:	4622      	mov	r2, r4
 800ca62:	462b      	mov	r3, r5
 800ca64:	f7f3 fd38 	bl	80004d8 <__aeabi_dmul>
 800ca68:	a357      	add	r3, pc, #348	; (adr r3, 800cbc8 <__ieee754_pow+0xa00>)
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	f7f3 fb7b 	bl	8000168 <__aeabi_dsub>
 800ca72:	4622      	mov	r2, r4
 800ca74:	462b      	mov	r3, r5
 800ca76:	f7f3 fd2f 	bl	80004d8 <__aeabi_dmul>
 800ca7a:	a355      	add	r3, pc, #340	; (adr r3, 800cbd0 <__ieee754_pow+0xa08>)
 800ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca80:	f7f3 fb74 	bl	800016c <__adddf3>
 800ca84:	4622      	mov	r2, r4
 800ca86:	462b      	mov	r3, r5
 800ca88:	f7f3 fd26 	bl	80004d8 <__aeabi_dmul>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4640      	mov	r0, r8
 800ca92:	4649      	mov	r1, r9
 800ca94:	f7f3 fb68 	bl	8000168 <__aeabi_dsub>
 800ca98:	4604      	mov	r4, r0
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	460b      	mov	r3, r1
 800caa0:	4640      	mov	r0, r8
 800caa2:	4649      	mov	r1, r9
 800caa4:	f7f3 fd18 	bl	80004d8 <__aeabi_dmul>
 800caa8:	2200      	movs	r2, #0
 800caaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cab2:	4620      	mov	r0, r4
 800cab4:	4629      	mov	r1, r5
 800cab6:	f7f3 fb57 	bl	8000168 <__aeabi_dsub>
 800caba:	4602      	mov	r2, r0
 800cabc:	460b      	mov	r3, r1
 800cabe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cac2:	f7f3 fe33 	bl	800072c <__aeabi_ddiv>
 800cac6:	4632      	mov	r2, r6
 800cac8:	4604      	mov	r4, r0
 800caca:	460d      	mov	r5, r1
 800cacc:	463b      	mov	r3, r7
 800cace:	4640      	mov	r0, r8
 800cad0:	4649      	mov	r1, r9
 800cad2:	f7f3 fd01 	bl	80004d8 <__aeabi_dmul>
 800cad6:	4632      	mov	r2, r6
 800cad8:	463b      	mov	r3, r7
 800cada:	f7f3 fb47 	bl	800016c <__adddf3>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	4620      	mov	r0, r4
 800cae4:	4629      	mov	r1, r5
 800cae6:	f7f3 fb3f 	bl	8000168 <__aeabi_dsub>
 800caea:	4642      	mov	r2, r8
 800caec:	464b      	mov	r3, r9
 800caee:	f7f3 fb3b 	bl	8000168 <__aeabi_dsub>
 800caf2:	4602      	mov	r2, r0
 800caf4:	460b      	mov	r3, r1
 800caf6:	2000      	movs	r0, #0
 800caf8:	493b      	ldr	r1, [pc, #236]	; (800cbe8 <__ieee754_pow+0xa20>)
 800cafa:	f7f3 fb35 	bl	8000168 <__aeabi_dsub>
 800cafe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cb02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cb06:	da2b      	bge.n	800cb60 <__ieee754_pow+0x998>
 800cb08:	4652      	mov	r2, sl
 800cb0a:	f000 f9b9 	bl	800ce80 <scalbn>
 800cb0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb12:	f7ff bbf2 	b.w	800c2fa <__ieee754_pow+0x132>
 800cb16:	4b35      	ldr	r3, [pc, #212]	; (800cbec <__ieee754_pow+0xa24>)
 800cb18:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800cb1c:	429f      	cmp	r7, r3
 800cb1e:	f77f af13 	ble.w	800c948 <__ieee754_pow+0x780>
 800cb22:	4b33      	ldr	r3, [pc, #204]	; (800cbf0 <__ieee754_pow+0xa28>)
 800cb24:	440b      	add	r3, r1
 800cb26:	4303      	orrs	r3, r0
 800cb28:	d00b      	beq.n	800cb42 <__ieee754_pow+0x97a>
 800cb2a:	a32b      	add	r3, pc, #172	; (adr r3, 800cbd8 <__ieee754_pow+0xa10>)
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb34:	f7f3 fcd0 	bl	80004d8 <__aeabi_dmul>
 800cb38:	a327      	add	r3, pc, #156	; (adr r3, 800cbd8 <__ieee754_pow+0xa10>)
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	f7ff bbdc 	b.w	800c2fa <__ieee754_pow+0x132>
 800cb42:	4622      	mov	r2, r4
 800cb44:	462b      	mov	r3, r5
 800cb46:	f7f3 fb0f 	bl	8000168 <__aeabi_dsub>
 800cb4a:	4642      	mov	r2, r8
 800cb4c:	464b      	mov	r3, r9
 800cb4e:	f7f3 ff49 	bl	80009e4 <__aeabi_dcmpge>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	f43f aef8 	beq.w	800c948 <__ieee754_pow+0x780>
 800cb58:	e7e7      	b.n	800cb2a <__ieee754_pow+0x962>
 800cb5a:	f04f 0a00 	mov.w	sl, #0
 800cb5e:	e71e      	b.n	800c99e <__ieee754_pow+0x7d6>
 800cb60:	4621      	mov	r1, r4
 800cb62:	e7d4      	b.n	800cb0e <__ieee754_pow+0x946>
 800cb64:	f04f 0b00 	mov.w	fp, #0
 800cb68:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cbe8 <__ieee754_pow+0xa20>
 800cb6c:	f7ff bbb0 	b.w	800c2d0 <__ieee754_pow+0x108>
 800cb70:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800cb74:	f7ff bbac 	b.w	800c2d0 <__ieee754_pow+0x108>
 800cb78:	4638      	mov	r0, r7
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	f7ff bbbf 	b.w	800c2fe <__ieee754_pow+0x136>
 800cb80:	9200      	str	r2, [sp, #0]
 800cb82:	f7ff bb7f 	b.w	800c284 <__ieee754_pow+0xbc>
 800cb86:	2300      	movs	r3, #0
 800cb88:	f7ff bb69 	b.w	800c25e <__ieee754_pow+0x96>
 800cb8c:	f3af 8000 	nop.w
 800cb90:	652b82fe 	.word	0x652b82fe
 800cb94:	3c971547 	.word	0x3c971547
 800cb98:	00000000 	.word	0x00000000
 800cb9c:	3fe62e43 	.word	0x3fe62e43
 800cba0:	fefa39ef 	.word	0xfefa39ef
 800cba4:	3fe62e42 	.word	0x3fe62e42
 800cba8:	0ca86c39 	.word	0x0ca86c39
 800cbac:	be205c61 	.word	0xbe205c61
 800cbb0:	72bea4d0 	.word	0x72bea4d0
 800cbb4:	3e663769 	.word	0x3e663769
 800cbb8:	c5d26bf1 	.word	0xc5d26bf1
 800cbbc:	3ebbbd41 	.word	0x3ebbbd41
 800cbc0:	af25de2c 	.word	0xaf25de2c
 800cbc4:	3f11566a 	.word	0x3f11566a
 800cbc8:	16bebd93 	.word	0x16bebd93
 800cbcc:	3f66c16c 	.word	0x3f66c16c
 800cbd0:	5555553e 	.word	0x5555553e
 800cbd4:	3fc55555 	.word	0x3fc55555
 800cbd8:	c2f8f359 	.word	0xc2f8f359
 800cbdc:	01a56e1f 	.word	0x01a56e1f
 800cbe0:	3fe00000 	.word	0x3fe00000
 800cbe4:	000fffff 	.word	0x000fffff
 800cbe8:	3ff00000 	.word	0x3ff00000
 800cbec:	4090cbff 	.word	0x4090cbff
 800cbf0:	3f6f3400 	.word	0x3f6f3400

0800cbf4 <__ieee754_sqrt>:
 800cbf4:	f8df c150 	ldr.w	ip, [pc, #336]	; 800cd48 <__ieee754_sqrt+0x154>
 800cbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfc:	ea3c 0c01 	bics.w	ip, ip, r1
 800cc00:	460b      	mov	r3, r1
 800cc02:	4606      	mov	r6, r0
 800cc04:	460d      	mov	r5, r1
 800cc06:	460a      	mov	r2, r1
 800cc08:	4607      	mov	r7, r0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	d10e      	bne.n	800cc2c <__ieee754_sqrt+0x38>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	f7f3 fc62 	bl	80004d8 <__aeabi_dmul>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	4630      	mov	r0, r6
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f3 faa6 	bl	800016c <__adddf3>
 800cc20:	4606      	mov	r6, r0
 800cc22:	460d      	mov	r5, r1
 800cc24:	4630      	mov	r0, r6
 800cc26:	4629      	mov	r1, r5
 800cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2c:	2900      	cmp	r1, #0
 800cc2e:	dc0d      	bgt.n	800cc4c <__ieee754_sqrt+0x58>
 800cc30:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800cc34:	ea5c 0707 	orrs.w	r7, ip, r7
 800cc38:	d0f4      	beq.n	800cc24 <__ieee754_sqrt+0x30>
 800cc3a:	b139      	cbz	r1, 800cc4c <__ieee754_sqrt+0x58>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	f7f3 fa93 	bl	8000168 <__aeabi_dsub>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	f7f3 fd71 	bl	800072c <__aeabi_ddiv>
 800cc4a:	e7e9      	b.n	800cc20 <__ieee754_sqrt+0x2c>
 800cc4c:	1512      	asrs	r2, r2, #20
 800cc4e:	d074      	beq.n	800cd3a <__ieee754_sqrt+0x146>
 800cc50:	2000      	movs	r0, #0
 800cc52:	07d5      	lsls	r5, r2, #31
 800cc54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc58:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800cc5c:	bf5e      	ittt	pl
 800cc5e:	0fe3      	lsrpl	r3, r4, #31
 800cc60:	0064      	lslpl	r4, r4, #1
 800cc62:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800cc66:	0fe3      	lsrs	r3, r4, #31
 800cc68:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cc6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800cc70:	2516      	movs	r5, #22
 800cc72:	4601      	mov	r1, r0
 800cc74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cc78:	1076      	asrs	r6, r6, #1
 800cc7a:	0064      	lsls	r4, r4, #1
 800cc7c:	188f      	adds	r7, r1, r2
 800cc7e:	429f      	cmp	r7, r3
 800cc80:	bfde      	ittt	le
 800cc82:	1bdb      	suble	r3, r3, r7
 800cc84:	18b9      	addle	r1, r7, r2
 800cc86:	1880      	addle	r0, r0, r2
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	3d01      	subs	r5, #1
 800cc8c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800cc90:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cc94:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cc98:	d1f0      	bne.n	800cc7c <__ieee754_sqrt+0x88>
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	f04f 0e20 	mov.w	lr, #32
 800cca0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800cca4:	428b      	cmp	r3, r1
 800cca6:	eb07 0c05 	add.w	ip, r7, r5
 800ccaa:	dc02      	bgt.n	800ccb2 <__ieee754_sqrt+0xbe>
 800ccac:	d113      	bne.n	800ccd6 <__ieee754_sqrt+0xe2>
 800ccae:	45a4      	cmp	ip, r4
 800ccb0:	d811      	bhi.n	800ccd6 <__ieee754_sqrt+0xe2>
 800ccb2:	f1bc 0f00 	cmp.w	ip, #0
 800ccb6:	eb0c 0507 	add.w	r5, ip, r7
 800ccba:	da43      	bge.n	800cd44 <__ieee754_sqrt+0x150>
 800ccbc:	2d00      	cmp	r5, #0
 800ccbe:	db41      	blt.n	800cd44 <__ieee754_sqrt+0x150>
 800ccc0:	f101 0801 	add.w	r8, r1, #1
 800ccc4:	1a5b      	subs	r3, r3, r1
 800ccc6:	4641      	mov	r1, r8
 800ccc8:	45a4      	cmp	ip, r4
 800ccca:	bf88      	it	hi
 800cccc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ccd0:	eba4 040c 	sub.w	r4, r4, ip
 800ccd4:	443a      	add	r2, r7
 800ccd6:	005b      	lsls	r3, r3, #1
 800ccd8:	f1be 0e01 	subs.w	lr, lr, #1
 800ccdc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800cce0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800cce4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cce8:	d1dc      	bne.n	800cca4 <__ieee754_sqrt+0xb0>
 800ccea:	4323      	orrs	r3, r4
 800ccec:	d006      	beq.n	800ccfc <__ieee754_sqrt+0x108>
 800ccee:	1c54      	adds	r4, r2, #1
 800ccf0:	bf0b      	itete	eq
 800ccf2:	4672      	moveq	r2, lr
 800ccf4:	3201      	addne	r2, #1
 800ccf6:	3001      	addeq	r0, #1
 800ccf8:	f022 0201 	bicne.w	r2, r2, #1
 800ccfc:	1043      	asrs	r3, r0, #1
 800ccfe:	07c1      	lsls	r1, r0, #31
 800cd00:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cd04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cd08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cd0c:	bf48      	it	mi
 800cd0e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cd12:	4610      	mov	r0, r2
 800cd14:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800cd18:	e782      	b.n	800cc20 <__ieee754_sqrt+0x2c>
 800cd1a:	0ae3      	lsrs	r3, r4, #11
 800cd1c:	3915      	subs	r1, #21
 800cd1e:	0564      	lsls	r4, r4, #21
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d0fa      	beq.n	800cd1a <__ieee754_sqrt+0x126>
 800cd24:	02de      	lsls	r6, r3, #11
 800cd26:	d50a      	bpl.n	800cd3e <__ieee754_sqrt+0x14a>
 800cd28:	f1c2 0020 	rsb	r0, r2, #32
 800cd2c:	fa24 f000 	lsr.w	r0, r4, r0
 800cd30:	1e55      	subs	r5, r2, #1
 800cd32:	4094      	lsls	r4, r2
 800cd34:	4303      	orrs	r3, r0
 800cd36:	1b4a      	subs	r2, r1, r5
 800cd38:	e78a      	b.n	800cc50 <__ieee754_sqrt+0x5c>
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	e7f0      	b.n	800cd20 <__ieee754_sqrt+0x12c>
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	3201      	adds	r2, #1
 800cd42:	e7ef      	b.n	800cd24 <__ieee754_sqrt+0x130>
 800cd44:	4688      	mov	r8, r1
 800cd46:	e7bd      	b.n	800ccc4 <__ieee754_sqrt+0xd0>
 800cd48:	7ff00000 	.word	0x7ff00000

0800cd4c <fabs>:
 800cd4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cd50:	4770      	bx	lr

0800cd52 <finite>:
 800cd52:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800cd56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cd5a:	0fc0      	lsrs	r0, r0, #31
 800cd5c:	4770      	bx	lr
	...

0800cd60 <nan>:
 800cd60:	2000      	movs	r0, #0
 800cd62:	4901      	ldr	r1, [pc, #4]	; (800cd68 <nan+0x8>)
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	7ff80000 	.word	0x7ff80000

0800cd6c <rint>:
 800cd6c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800cd70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd72:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800cd76:	2f13      	cmp	r7, #19
 800cd78:	4602      	mov	r2, r0
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	4605      	mov	r5, r0
 800cd80:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800cd84:	dc59      	bgt.n	800ce3a <rint+0xce>
 800cd86:	2f00      	cmp	r7, #0
 800cd88:	da2a      	bge.n	800cde0 <rint+0x74>
 800cd8a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cd8e:	4301      	orrs	r1, r0
 800cd90:	d022      	beq.n	800cdd8 <rint+0x6c>
 800cd92:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800cd96:	4301      	orrs	r1, r0
 800cd98:	424d      	negs	r5, r1
 800cd9a:	430d      	orrs	r5, r1
 800cd9c:	4936      	ldr	r1, [pc, #216]	; (800ce78 <rint+0x10c>)
 800cd9e:	0c5c      	lsrs	r4, r3, #17
 800cda0:	0b2d      	lsrs	r5, r5, #12
 800cda2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800cda6:	0464      	lsls	r4, r4, #17
 800cda8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cdac:	ea45 0304 	orr.w	r3, r5, r4
 800cdb0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 f9d8 	bl	800016c <__adddf3>
 800cdbc:	e9cd 0100 	strd	r0, r1, [sp]
 800cdc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdc4:	462b      	mov	r3, r5
 800cdc6:	4622      	mov	r2, r4
 800cdc8:	f7f3 f9ce 	bl	8000168 <__aeabi_dsub>
 800cdcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cdd0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	4610      	mov	r0, r2
 800cdda:	4619      	mov	r1, r3
 800cddc:	b003      	add	sp, #12
 800cdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cde0:	4926      	ldr	r1, [pc, #152]	; (800ce7c <rint+0x110>)
 800cde2:	4139      	asrs	r1, r7
 800cde4:	ea03 0001 	and.w	r0, r3, r1
 800cde8:	4310      	orrs	r0, r2
 800cdea:	d0f5      	beq.n	800cdd8 <rint+0x6c>
 800cdec:	084b      	lsrs	r3, r1, #1
 800cdee:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800cdf2:	ea52 0501 	orrs.w	r5, r2, r1
 800cdf6:	d00c      	beq.n	800ce12 <rint+0xa6>
 800cdf8:	ea24 0303 	bic.w	r3, r4, r3
 800cdfc:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ce00:	2f13      	cmp	r7, #19
 800ce02:	bf0c      	ite	eq
 800ce04:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ce08:	2500      	movne	r5, #0
 800ce0a:	fa44 f707 	asr.w	r7, r4, r7
 800ce0e:	ea43 0407 	orr.w	r4, r3, r7
 800ce12:	4919      	ldr	r1, [pc, #100]	; (800ce78 <rint+0x10c>)
 800ce14:	4623      	mov	r3, r4
 800ce16:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ce1a:	462a      	mov	r2, r5
 800ce1c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ce20:	4620      	mov	r0, r4
 800ce22:	4629      	mov	r1, r5
 800ce24:	f7f3 f9a2 	bl	800016c <__adddf3>
 800ce28:	e9cd 0100 	strd	r0, r1, [sp]
 800ce2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce30:	4622      	mov	r2, r4
 800ce32:	462b      	mov	r3, r5
 800ce34:	f7f3 f998 	bl	8000168 <__aeabi_dsub>
 800ce38:	e7cc      	b.n	800cdd4 <rint+0x68>
 800ce3a:	2f33      	cmp	r7, #51	; 0x33
 800ce3c:	dd05      	ble.n	800ce4a <rint+0xde>
 800ce3e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ce42:	d1c9      	bne.n	800cdd8 <rint+0x6c>
 800ce44:	f7f3 f992 	bl	800016c <__adddf3>
 800ce48:	e7c4      	b.n	800cdd4 <rint+0x68>
 800ce4a:	f04f 31ff 	mov.w	r1, #4294967295
 800ce4e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ce52:	fa21 f10c 	lsr.w	r1, r1, ip
 800ce56:	4208      	tst	r0, r1
 800ce58:	d0be      	beq.n	800cdd8 <rint+0x6c>
 800ce5a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800ce5e:	bf18      	it	ne
 800ce60:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ce64:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ce68:	bf1e      	ittt	ne
 800ce6a:	ea20 0303 	bicne.w	r3, r0, r3
 800ce6e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800ce72:	ea43 050c 	orrne.w	r5, r3, ip
 800ce76:	e7cc      	b.n	800ce12 <rint+0xa6>
 800ce78:	0800d5b8 	.word	0x0800d5b8
 800ce7c:	000fffff 	.word	0x000fffff

0800ce80 <scalbn>:
 800ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce82:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ce86:	4604      	mov	r4, r0
 800ce88:	460d      	mov	r5, r1
 800ce8a:	4617      	mov	r7, r2
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	b996      	cbnz	r6, 800ceb6 <scalbn+0x36>
 800ce90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce94:	4303      	orrs	r3, r0
 800ce96:	d039      	beq.n	800cf0c <scalbn+0x8c>
 800ce98:	4b35      	ldr	r3, [pc, #212]	; (800cf70 <scalbn+0xf0>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f7f3 fb1c 	bl	80004d8 <__aeabi_dmul>
 800cea0:	4b34      	ldr	r3, [pc, #208]	; (800cf74 <scalbn+0xf4>)
 800cea2:	4604      	mov	r4, r0
 800cea4:	429f      	cmp	r7, r3
 800cea6:	460d      	mov	r5, r1
 800cea8:	da0f      	bge.n	800ceca <scalbn+0x4a>
 800ceaa:	a32d      	add	r3, pc, #180	; (adr r3, 800cf60 <scalbn+0xe0>)
 800ceac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb0:	f7f3 fb12 	bl	80004d8 <__aeabi_dmul>
 800ceb4:	e006      	b.n	800cec4 <scalbn+0x44>
 800ceb6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ceba:	4296      	cmp	r6, r2
 800cebc:	d10a      	bne.n	800ced4 <scalbn+0x54>
 800cebe:	4602      	mov	r2, r0
 800cec0:	f7f3 f954 	bl	800016c <__adddf3>
 800cec4:	4604      	mov	r4, r0
 800cec6:	460d      	mov	r5, r1
 800cec8:	e020      	b.n	800cf0c <scalbn+0x8c>
 800ceca:	460b      	mov	r3, r1
 800cecc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ced0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ced4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ced8:	19b9      	adds	r1, r7, r6
 800ceda:	4291      	cmp	r1, r2
 800cedc:	dd0e      	ble.n	800cefc <scalbn+0x7c>
 800cede:	a322      	add	r3, pc, #136	; (adr r3, 800cf68 <scalbn+0xe8>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cee8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ceec:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cef0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cef4:	4820      	ldr	r0, [pc, #128]	; (800cf78 <scalbn+0xf8>)
 800cef6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cefa:	e7d9      	b.n	800ceb0 <scalbn+0x30>
 800cefc:	2900      	cmp	r1, #0
 800cefe:	dd08      	ble.n	800cf12 <scalbn+0x92>
 800cf00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf08:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	4629      	mov	r1, r5
 800cf10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf12:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800cf16:	da16      	bge.n	800cf46 <scalbn+0xc6>
 800cf18:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cf1c:	429f      	cmp	r7, r3
 800cf1e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800cf22:	dd08      	ble.n	800cf36 <scalbn+0xb6>
 800cf24:	4c15      	ldr	r4, [pc, #84]	; (800cf7c <scalbn+0xfc>)
 800cf26:	4814      	ldr	r0, [pc, #80]	; (800cf78 <scalbn+0xf8>)
 800cf28:	f363 74df 	bfi	r4, r3, #31, #1
 800cf2c:	a30e      	add	r3, pc, #56	; (adr r3, 800cf68 <scalbn+0xe8>)
 800cf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf32:	4621      	mov	r1, r4
 800cf34:	e7bc      	b.n	800ceb0 <scalbn+0x30>
 800cf36:	4c12      	ldr	r4, [pc, #72]	; (800cf80 <scalbn+0x100>)
 800cf38:	4812      	ldr	r0, [pc, #72]	; (800cf84 <scalbn+0x104>)
 800cf3a:	f363 74df 	bfi	r4, r3, #31, #1
 800cf3e:	a308      	add	r3, pc, #32	; (adr r3, 800cf60 <scalbn+0xe0>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	e7f5      	b.n	800cf32 <scalbn+0xb2>
 800cf46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf4a:	3136      	adds	r1, #54	; 0x36
 800cf4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cf54:	4620      	mov	r0, r4
 800cf56:	4629      	mov	r1, r5
 800cf58:	2200      	movs	r2, #0
 800cf5a:	4b0b      	ldr	r3, [pc, #44]	; (800cf88 <scalbn+0x108>)
 800cf5c:	e7a8      	b.n	800ceb0 <scalbn+0x30>
 800cf5e:	bf00      	nop
 800cf60:	c2f8f359 	.word	0xc2f8f359
 800cf64:	01a56e1f 	.word	0x01a56e1f
 800cf68:	8800759c 	.word	0x8800759c
 800cf6c:	7e37e43c 	.word	0x7e37e43c
 800cf70:	43500000 	.word	0x43500000
 800cf74:	ffff3cb0 	.word	0xffff3cb0
 800cf78:	8800759c 	.word	0x8800759c
 800cf7c:	7e37e43c 	.word	0x7e37e43c
 800cf80:	01a56e1f 	.word	0x01a56e1f
 800cf84:	c2f8f359 	.word	0xc2f8f359
 800cf88:	3c900000 	.word	0x3c900000

0800cf8c <_init>:
 800cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8e:	bf00      	nop
 800cf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf92:	bc08      	pop	{r3}
 800cf94:	469e      	mov	lr, r3
 800cf96:	4770      	bx	lr

0800cf98 <_fini>:
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	bf00      	nop
 800cf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf9e:	bc08      	pop	{r3}
 800cfa0:	469e      	mov	lr, r3
 800cfa2:	4770      	bx	lr
